
avr_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00800100  0000364a  000036de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000364a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027e  0080032a  0080032a  00003908  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003908  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  000039a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004daa  00000000  00000000  00003d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c8  00000000  00000000  00008ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020ea  00000000  00000000  00009eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e8c  00000000  00000000  0000bf98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e2c  00000000  00000000  0000ce24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000486a  00000000  00000000  0000dc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  000124ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 01 	jmp	0x376	; 0x376 <__ctors_end>
       4:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
       8:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
       c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      10:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      14:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      18:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      1c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      20:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      24:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      28:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      2c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      30:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      34:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      38:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_14>
      3c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      40:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      44:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      48:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      4c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      50:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      54:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_21>
      58:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      5c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      60:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      64:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__bad_interrupt>
      68:	e4 01       	movw	r28, r8
      6a:	ee 01       	movw	r28, r28
      6c:	fa 01       	movw	r30, r20
      6e:	06 02       	muls	r16, r22
      70:	12 02       	muls	r17, r18
      72:	1e 02       	muls	r17, r30
      74:	2a 02       	muls	r18, r26
      76:	36 02       	muls	r19, r22
      78:	42 02       	muls	r20, r18

0000007a <TinyFont>:
      7a:	08 08 20 5f 00 00 00 00 00 00 00 00 18 3c 3c 18     .. _.........<<.
      8a:	18 00 18 00 66 66 24 00 00 00 00 00 6c 6c fe 6c     ....ff$.....ll.l
      9a:	fe 6c 6c 00 18 3e 60 3c 06 7c 18 00 00 c6 cc 18     .ll..>`<.|......
      aa:	30 66 c6 00 38 6c 38 76 dc cc 76 00 18 18 30 00     0f..8l8v..v...0.
      ba:	00 00 00 00 0c 18 30 30 30 18 0c 00 30 18 0c 0c     ......000...0...
      ca:	0c 18 30 00 00 66 3c ff 3c 66 00 00 00 18 18 7e     ..0..f<.<f.....~
      da:	18 18 00 00 00 00 00 00 00 18 18 30 00 00 00 7e     ...........0...~
	...
      f2:	00 18 18 00 06 0c 18 30 60 c0 80 00 7c c6 ce d6     .......0`...|...
     102:	e6 c6 7c 00 18 38 18 18 18 18 7e 00 7c c6 06 1c     ..|..8....~.|...
     112:	30 66 fe 00 7c c6 06 3c 06 c6 7c 00 1c 3c 6c cc     0f..|..<..|..<l.
     122:	fe 0c 1e 00 fe c0 c0 fc 06 c6 7c 00 38 60 c0 fc     ..........|.8`..
     132:	c6 c6 7c 00 fe c6 0c 18 30 30 30 00 7c c6 c6 7c     ..|.....000.|..|
     142:	c6 c6 7c 00 7c c6 c6 7e 06 0c 78 00 00 18 18 00     ..|.|..~..x.....
     152:	00 18 18 00 00 18 18 00 00 18 18 30 06 0c 18 30     ...........0...0
     162:	18 0c 06 00 00 00 7e 00 00 7e 00 00 60 30 18 0c     ......~..~..`0..
     172:	18 30 60 00 7c c6 0c 18 18 00 18 00 7c c6 de de     .0`.|.......|...
     182:	de c0 78 00 38 6c c6 fe c6 c6 c6 00 fc 66 66 7c     ..x.8l.......ff|
     192:	66 66 fc 00 3c 66 c0 c0 c0 66 3c 00 f8 6c 66 66     ff..<f...f<..lff
     1a2:	66 6c f8 00 fe 62 68 78 68 62 fe 00 fe 62 68 78     fl...bhxhb...bhx
     1b2:	68 60 f0 00 3c 66 c0 c0 ce 66 3a 00 c6 c6 c6 fe     h`..<f...f:.....
     1c2:	c6 c6 c6 00 3c 18 18 18 18 18 3c 00 1e 0c 0c 0c     ....<.....<.....
     1d2:	cc cc 78 00 e6 66 6c 78 6c 66 e6 00 f0 60 60 60     ..x..flxlf...```
     1e2:	62 66 fe 00 c6 ee fe fe d6 c6 c6 00 c6 e6 f6 de     bf..............
     1f2:	ce c6 c6 00 7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c     ....|.....|..ff|
     202:	60 60 f0 00 7c c6 c6 c6 c6 ce 7c 0e fc 66 66 7c     ``..|.....|..ff|
     212:	6c 66 e6 00 7c c6 60 38 0c c6 7c 00 7e 7e 5a 18     lf..|.`8..|.~~Z.
     222:	18 18 3c 00 c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6     ..<.......|.....
     232:	c6 6c 38 00 c6 c6 c6 d6 d6 fe 6c 00 c6 c6 6c 38     .l8.......l...l8
     242:	6c c6 c6 00 66 66 66 3c 18 18 3c 00 fe c6 8c 18     l...fff<..<.....
     252:	32 66 fe 00 3c 30 30 30 30 30 3c 00 c0 60 30 18     2f..<00000<..`0.
     262:	0c 06 02 00 3c 0c 0c 0c 0c 0c 3c 00 10 38 6c c6     ....<.....<..8l.
	...
     27a:	00 00 00 ff 30 18 0c 00 00 00 00 00 00 00 78 0c     ....0.........x.
     28a:	7c cc 76 00 e0 60 7c 66 66 66 dc 00 00 00 7c c6     |.v..`|fff....|.
     29a:	c0 c6 7c 00 1c 0c 7c cc cc cc 76 00 00 00 7c c6     ..|...|...v...|.
     2aa:	fe c0 7c 00 3c 66 60 f8 60 60 f0 00 00 00 76 cc     ..|.<f`.``....v.
     2ba:	cc 7c 0c f8 e0 60 6c 76 66 66 e6 00 18 00 38 18     .|...`lvff....8.
     2ca:	18 18 3c 00 06 00 06 06 06 66 66 3c e0 60 66 6c     ..<......ff<.`fl
     2da:	78 6c e6 00 38 18 18 18 18 18 3c 00 00 00 ec fe     xl..8.....<.....
     2ea:	d6 d6 d6 00 00 00 dc 66 66 66 66 00 00 00 7c c6     .......ffff...|.
     2fa:	c6 c6 7c 00 00 00 dc 66 66 7c 60 f0 00 00 76 cc     ..|....ff|`...v.
     30a:	cc 7c 0c 1e 00 00 dc 76 60 60 f0 00 00 00 7e c0     .|.....v``....~.
     31a:	7c 06 fc 00 30 30 fc 30 30 36 1c 00 00 00 cc cc     |...00.006......
     32a:	cc cc 76 00 00 00 c6 c6 c6 6c 38 00 00 00 c6 d6     ..v......l8.....
     33a:	d6 fe 6c 00 00 00 c6 6c 38 6c c6 00 00 00 c6 c6     ..l....l8l......
     34a:	c6 7e 06 fc 00 00 7e 4c 18 32 7e 00 0e 18 18 70     .~....~L.2~....p
     35a:	18 18 0e 00 18 18 18 18 18 18 18 00 70 18 18 0e     ............p...
     36a:	18 18 70 00 76 dc 00 00 00 00 00 00                 ..p.v.......

00000376 <__ctors_end>:
     376:	11 24       	eor	r1, r1
     378:	1f be       	out	0x3f, r1	; 63
     37a:	cf ef       	ldi	r28, 0xFF	; 255
     37c:	d8 e0       	ldi	r29, 0x08	; 8
     37e:	de bf       	out	0x3e, r29	; 62
     380:	cd bf       	out	0x3d, r28	; 61

00000382 <__do_copy_data>:
     382:	13 e0       	ldi	r17, 0x03	; 3
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	b1 e0       	ldi	r27, 0x01	; 1
     388:	ea e4       	ldi	r30, 0x4A	; 74
     38a:	f6 e3       	ldi	r31, 0x36	; 54
     38c:	02 c0       	rjmp	.+4      	; 0x392 <__do_copy_data+0x10>
     38e:	05 90       	lpm	r0, Z+
     390:	0d 92       	st	X+, r0
     392:	aa 32       	cpi	r26, 0x2A	; 42
     394:	b1 07       	cpc	r27, r17
     396:	d9 f7       	brne	.-10     	; 0x38e <__do_copy_data+0xc>

00000398 <__do_clear_bss>:
     398:	25 e0       	ldi	r18, 0x05	; 5
     39a:	aa e2       	ldi	r26, 0x2A	; 42
     39c:	b3 e0       	ldi	r27, 0x03	; 3
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <.do_clear_bss_start>

000003a0 <.do_clear_bss_loop>:
     3a0:	1d 92       	st	X+, r1

000003a2 <.do_clear_bss_start>:
     3a2:	a8 3a       	cpi	r26, 0xA8	; 168
     3a4:	b2 07       	cpc	r27, r18
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <.do_clear_bss_loop>
     3a8:	0e 94 1d 0c 	call	0x183a	; 0x183a <main>
     3ac:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <_exit>

000003b0 <__bad_interrupt>:
     3b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b4 <set_ADC_channel>:
	uint16_t result=0;
	set_ADC_channel(adc_ch);							//выбор канала мультиплексора ацп
	SET_BIT(ADCSRA,(1<<ADSC));                        //начало преобразования
	while(!READ_BIT(ADCSRA,(1<<ADIF))){};
	return result = ADCL | (ADCH << 8);	
}
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	89 30       	cpi	r24, 0x09	; 9
     3b8:	91 05       	cpc	r25, r1
     3ba:	08 f0       	brcs	.+2      	; 0x3be <set_ADC_channel+0xa>
     3bc:	69 c0       	rjmp	.+210    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     3be:	fc 01       	movw	r30, r24
     3c0:	ec 5c       	subi	r30, 0xCC	; 204
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__tablejump2__>
     3c8:	ec e7       	ldi	r30, 0x7C	; 124
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	80 7f       	andi	r24, 0xF0	; 240
     3d0:	80 83       	st	Z, r24
     3d2:	ee e7       	ldi	r30, 0x7E	; 126
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	10 82       	st	Z, r1
     3da:	08 95       	ret
     3dc:	ec e7       	ldi	r30, 0x7C	; 124
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	80 7f       	andi	r24, 0xF0	; 240
     3e4:	81 60       	ori	r24, 0x01	; 1
     3e6:	80 83       	st	Z, r24
     3e8:	ee e7       	ldi	r30, 0x7E	; 126
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	80 83       	st	Z, r24
     3f2:	08 95       	ret
     3f4:	ec e7       	ldi	r30, 0x7C	; 124
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	80 7f       	andi	r24, 0xF0	; 240
     3fc:	82 60       	ori	r24, 0x02	; 2
     3fe:	80 83       	st	Z, r24
     400:	ee e7       	ldi	r30, 0x7E	; 126
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	80 83       	st	Z, r24
     40a:	08 95       	ret
     40c:	ec e7       	ldi	r30, 0x7C	; 124
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	80 7f       	andi	r24, 0xF0	; 240
     414:	83 60       	ori	r24, 0x03	; 3
     416:	80 83       	st	Z, r24
     418:	ee e7       	ldi	r30, 0x7E	; 126
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	80 83       	st	Z, r24
     422:	08 95       	ret
     424:	ec e7       	ldi	r30, 0x7C	; 124
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	80 7f       	andi	r24, 0xF0	; 240
     42c:	84 60       	ori	r24, 0x04	; 4
     42e:	80 83       	st	Z, r24
     430:	ee e7       	ldi	r30, 0x7E	; 126
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	80 83       	st	Z, r24
     43a:	08 95       	ret
     43c:	ec e7       	ldi	r30, 0x7C	; 124
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	80 7f       	andi	r24, 0xF0	; 240
     444:	85 60       	ori	r24, 0x05	; 5
     446:	80 83       	st	Z, r24
     448:	ee e7       	ldi	r30, 0x7E	; 126
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	80 83       	st	Z, r24
     452:	08 95       	ret
     454:	ec e7       	ldi	r30, 0x7C	; 124
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	80 7f       	andi	r24, 0xF0	; 240
     45c:	86 60       	ori	r24, 0x06	; 6
     45e:	80 83       	st	Z, r24
     460:	ee e7       	ldi	r30, 0x7E	; 126
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	80 83       	st	Z, r24
     46a:	08 95       	ret
     46c:	ec e7       	ldi	r30, 0x7C	; 124
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	87 60       	ori	r24, 0x07	; 7
     476:	80 83       	st	Z, r24
     478:	ee e7       	ldi	r30, 0x7E	; 126
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	87 e0       	ldi	r24, 0x07	; 7
     480:	80 83       	st	Z, r24
     482:	08 95       	ret
     484:	ec e7       	ldi	r30, 0x7C	; 124
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	88 60       	ori	r24, 0x08	; 8
     48e:	80 83       	st	Z, r24
     490:	08 95       	ret

00000492 <ADC_init>:
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	ec e7       	ldi	r30, 0x7C	; 124
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	8f 73       	andi	r24, 0x3F	; 63
     49e:	80 64       	ori	r24, 0x40	; 64
     4a0:	80 83       	st	Z, r24
     4a2:	ca e7       	ldi	r28, 0x7A	; 122
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	88 81       	ld	r24, Y
     4a8:	87 60       	ori	r24, 0x07	; 7
     4aa:	88 83       	st	Y, r24
     4ac:	eb e7       	ldi	r30, 0x7B	; 123
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	88 7f       	andi	r24, 0xF8	; 248
     4b4:	83 60       	ori	r24, 0x03	; 3
     4b6:	80 83       	st	Z, r24
     4b8:	88 81       	ld	r24, Y
     4ba:	88 62       	ori	r24, 0x28	; 40
     4bc:	88 83       	st	Y, r24
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <set_ADC_channel>
     4c4:	88 81       	ld	r24, Y
     4c6:	80 68       	ori	r24, 0x80	; 128
     4c8:	88 83       	st	Y, r24
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <ADC_average>:

uint16_t ADC_average(volatile uint16_t *data){
     4d0:	dc 01       	movw	r26, r24
	uint32_t result=0;
	for(uint8_t i=0;i<255;i++){
     4d2:	90 e0       	ldi	r25, 0x00	; 0
	while(!READ_BIT(ADCSRA,(1<<ADIF))){};
	return result = ADCL | (ADCH << 8);	
}

uint16_t ADC_average(volatile uint16_t *data){
	uint32_t result=0;
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	ba 01       	movw	r22, r20
	for(uint8_t i=0;i<255;i++){
     4da:	0d c0       	rjmp	.+26     	; 0x4f6 <ADC_average+0x26>
		result+=*(data+i);
     4dc:	e9 2f       	mov	r30, r25
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	ea 0f       	add	r30, r26
     4e6:	fb 1f       	adc	r31, r27
     4e8:	20 81       	ld	r18, Z
     4ea:	31 81       	ldd	r19, Z+1	; 0x01
     4ec:	42 0f       	add	r20, r18
     4ee:	53 1f       	adc	r21, r19
     4f0:	61 1d       	adc	r22, r1
     4f2:	71 1d       	adc	r23, r1
	return result = ADCL | (ADCH << 8);	
}

uint16_t ADC_average(volatile uint16_t *data){
	uint32_t result=0;
	for(uint8_t i=0;i<255;i++){
     4f4:	9f 5f       	subi	r25, 0xFF	; 255
     4f6:	9f 3f       	cpi	r25, 0xFF	; 255
     4f8:	89 f7       	brne	.-30     	; 0x4dc <ADC_average+0xc>
		result+=*(data+i);
	}
	return (uint16_t) (result/256);
     4fa:	bb 27       	eor	r27, r27
     4fc:	a7 2f       	mov	r26, r23
     4fe:	96 2f       	mov	r25, r22
     500:	85 2f       	mov	r24, r21
}
     502:	08 95       	ret

00000504 <ema_filter>:


uint16_t ema_filter(uint16_t input, uint16_t prev_output, float alpha) {
     504:	8f 92       	push	r8
     506:	9f 92       	push	r9
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	eb 01       	movw	r28, r22
     51a:	69 01       	movw	r12, r18
     51c:	7a 01       	movw	r14, r20
	return (uint16_t)(alpha * input + (1.0 - alpha) * prev_output);      
     51e:	bc 01       	movw	r22, r24
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 67 15 	call	0x2ace	; 0x2ace <__floatunsisf>
     528:	a7 01       	movw	r20, r14
     52a:	96 01       	movw	r18, r12
     52c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__mulsf3>
     530:	4b 01       	movw	r8, r22
     532:	5c 01       	movw	r10, r24
     534:	a7 01       	movw	r20, r14
     536:	96 01       	movw	r18, r12
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	80 e8       	ldi	r24, 0x80	; 128
     53e:	9f e3       	ldi	r25, 0x3F	; 63
     540:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__subsf3>
     544:	6b 01       	movw	r12, r22
     546:	7c 01       	movw	r14, r24
     548:	be 01       	movw	r22, r28
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 67 15 	call	0x2ace	; 0x2ace <__floatunsisf>
     552:	a7 01       	movw	r20, r14
     554:	96 01       	movw	r18, r12
     556:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__mulsf3>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	c5 01       	movw	r24, r10
     560:	b4 01       	movw	r22, r8
     562:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__addsf3>
     566:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__fixunssfsi>
}
     56a:	cb 01       	movw	r24, r22
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	9f 90       	pop	r9
     57e:	8f 90       	pop	r8
     580:	08 95       	ret

00000582 <ema_filter_array>:


void ema_filter_array(volatile uint16_t *data,  uint8_t size, float alpha) { 
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	8c 01       	movw	r16, r24
     598:	a6 2e       	mov	r10, r22
     59a:	69 01       	movw	r12, r18
     59c:	7a 01       	movw	r14, r20
	for(uint8_t i = 1; i < size; i++) {
     59e:	bb 24       	eor	r11, r11
     5a0:	b3 94       	inc	r11
     5a2:	19 c0       	rjmp	.+50     	; 0x5d6 <ema_filter_array+0x54>
		data[i-1] = ema_filter(data[i], data[i-1], alpha);
     5a4:	8b 2d       	mov	r24, r11
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	ec 01       	movw	r28, r24
     5aa:	c1 50       	subi	r28, 0x01	; 1
     5ac:	d0 48       	sbci	r29, 0x80	; 128
     5ae:	cc 0f       	add	r28, r28
     5b0:	dd 1f       	adc	r29, r29
     5b2:	c0 0f       	add	r28, r16
     5b4:	d1 1f       	adc	r29, r17
     5b6:	68 81       	ld	r22, Y
     5b8:	79 81       	ldd	r23, Y+1	; 0x01
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	f8 01       	movw	r30, r16
     5c0:	e8 0f       	add	r30, r24
     5c2:	f9 1f       	adc	r31, r25
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	a7 01       	movw	r20, r14
     5ca:	96 01       	movw	r18, r12
     5cc:	0e 94 82 02 	call	0x504	; 0x504 <ema_filter>
     5d0:	99 83       	std	Y+1, r25	; 0x01
     5d2:	88 83       	st	Y, r24
	return (uint16_t)(alpha * input + (1.0 - alpha) * prev_output);      
}


void ema_filter_array(volatile uint16_t *data,  uint8_t size, float alpha) { 
	for(uint8_t i = 1; i < size; i++) {
     5d4:	b3 94       	inc	r11
     5d6:	ba 14       	cp	r11, r10
     5d8:	28 f3       	brcs	.-54     	; 0x5a4 <ema_filter_array+0x22>
		data[i-1] = ema_filter(data[i], data[i-1], alpha);
	}
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	bf 90       	pop	r11
     5ec:	af 90       	pop	r10
     5ee:	08 95       	ret

000005f0 <__vector_21>:
//256 раз АЦП пинается таймером 0
ISR(ADC_vect){
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	2f 93       	push	r18
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
	ADC_data[adc_dt++] = ADCL|(ADCH << 8);
     604:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <__data_end>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	8e 0f       	add	r24, r30
     60c:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__data_end>
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     616:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	98 2f       	mov	r25, r24
     61e:	88 27       	eor	r24, r24
     620:	82 2b       	or	r24, r18
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e5 5d       	subi	r30, 0xD5	; 213
     628:	fc 4f       	sbci	r31, 0xFC	; 252
     62a:	91 83       	std	Z+1, r25	; 0x01
     62c:	80 83       	st	Z, r24
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <bme280_send_data>:
void add_record(record *dt){
  //if(read_byte_i2c(BME280_ADDR, ID) != DEV_NAME ) { return ; };
  dt->temp=(float)parse_temp_bme280(&comp_bme280)/100;
  dt->press=parse_press_bme280(&comp_bme280)/256/133.3;
  dt->hum=(float)parse_hum_bme280(&comp_bme280)/1024;
}
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	c8 2f       	mov	r28, r24
     64c:	8b 01       	movw	r16, r22
     64e:	d4 2f       	mov	r29, r20
     650:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
     654:	8c 2f       	mov	r24, r28
     656:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     65a:	c0 e0       	ldi	r28, 0x00	; 0
     65c:	07 c0       	rjmp	.+14     	; 0x66c <bme280_send_data+0x2a>
     65e:	f8 01       	movw	r30, r16
     660:	ec 0f       	add	r30, r28
     662:	f1 1d       	adc	r31, r1
     664:	80 81       	ld	r24, Z
     666:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     66a:	cf 5f       	subi	r28, 0xFF	; 255
     66c:	cd 17       	cp	r28, r29
     66e:	b8 f3       	brcs	.-18     	; 0x65e <bme280_send_data+0x1c>
     670:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_cond>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <bme280_readbyte>:
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	c8 2f       	mov	r28, r24
     686:	d6 2f       	mov	r29, r22
     688:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
     68c:	8c 2f       	mov	r24, r28
     68e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     692:	8d 2f       	mov	r24, r29
     694:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     698:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
     69c:	8c 2f       	mov	r24, r28
     69e:	81 60       	ori	r24, 0x01	; 1
     6a0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     6a4:	85 e0       	ldi	r24, 0x05	; 5
     6a6:	0e 94 08 0c 	call	0x1810	; 0x1810 <i2c_readbyte>
     6aa:	c8 2f       	mov	r28, r24
     6ac:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_cond>
     6b0:	8c 2f       	mov	r24, r28
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <bme280_readdata>:
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	c8 2f       	mov	r28, r24
     6c4:	16 2f       	mov	r17, r22
     6c6:	7a 01       	movw	r14, r20
     6c8:	d2 2f       	mov	r29, r18
     6ca:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
     6ce:	8c 2f       	mov	r24, r28
     6d0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     6d4:	84 30       	cpi	r24, 0x04	; 4
     6d6:	69 f5       	brne	.+90     	; 0x732 <bme280_readdata+0x7a>
     6d8:	81 2f       	mov	r24, r17
     6da:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     6de:	84 30       	cpi	r24, 0x04	; 4
     6e0:	51 f5       	brne	.+84     	; 0x736 <bme280_readdata+0x7e>
     6e2:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
     6e6:	8c 2f       	mov	r24, r28
     6e8:	81 60       	ori	r24, 0x01	; 1
     6ea:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
     6ee:	84 30       	cpi	r24, 0x04	; 4
     6f0:	21 f5       	brne	.+72     	; 0x73a <bme280_readdata+0x82>
     6f2:	c0 e0       	ldi	r28, 0x00	; 0
     6f4:	18 c0       	rjmp	.+48     	; 0x726 <bme280_readdata+0x6e>
     6f6:	2c 2f       	mov	r18, r28
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	8d 2f       	mov	r24, r29
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	28 17       	cp	r18, r24
     702:	39 07       	cpc	r19, r25
     704:	44 f4       	brge	.+16     	; 0x716 <bme280_readdata+0x5e>
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	0e 94 08 0c 	call	0x1810	; 0x1810 <i2c_readbyte>
     70c:	f7 01       	movw	r30, r14
     70e:	ec 0f       	add	r30, r28
     710:	f1 1d       	adc	r31, r1
     712:	80 83       	st	Z, r24
     714:	07 c0       	rjmp	.+14     	; 0x724 <bme280_readdata+0x6c>
     716:	85 e0       	ldi	r24, 0x05	; 5
     718:	0e 94 08 0c 	call	0x1810	; 0x1810 <i2c_readbyte>
     71c:	f7 01       	movw	r30, r14
     71e:	ec 0f       	add	r30, r28
     720:	f1 1d       	adc	r31, r1
     722:	80 83       	st	Z, r24
     724:	cf 5f       	subi	r28, 0xFF	; 255
     726:	cd 17       	cp	r28, r29
     728:	30 f3       	brcs	.-52     	; 0x6f6 <bme280_readdata+0x3e>
     72a:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_cond>
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	05 c0       	rjmp	.+10     	; 0x73c <bme280_readdata+0x84>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	03 c0       	rjmp	.+6      	; 0x73c <bme280_readdata+0x84>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	01 c0       	rjmp	.+2      	; 0x73c <bme280_readdata+0x84>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	08 95       	ret

00000748 <bme280_reset>:
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <bme280_reset+0x6>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	86 eb       	ldi	r24, 0xB6	; 182
     758:	8a 83       	std	Y+2, r24	; 0x02
     75a:	42 e0       	ldi	r20, 0x02	; 2
     75c:	be 01       	movw	r22, r28
     75e:	6f 5f       	subi	r22, 0xFF	; 255
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	8c ee       	ldi	r24, 0xEC	; 236
     764:	0e 94 21 03 	call	0x642	; 0x642 <bme280_send_data>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <read_raw_data_bme280>:
     772:	24 2f       	mov	r18, r20
     774:	ab 01       	movw	r20, r22
     776:	68 2f       	mov	r22, r24
     778:	8c ee       	ldi	r24, 0xEC	; 236
     77a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <bme280_readdata>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	08 95       	ret

00000782 <get_compens>:
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	ec 01       	movw	r28, r24
     788:	49 e1       	ldi	r20, 0x19	; 25
     78a:	6b e2       	ldi	r22, 0x2B	; 43
     78c:	75 e0       	ldi	r23, 0x05	; 5
     78e:	88 e8       	ldi	r24, 0x88	; 136
     790:	0e 94 b9 03 	call	0x772	; 0x772 <read_raw_data_bme280>
     794:	47 e0       	ldi	r20, 0x07	; 7
     796:	64 e4       	ldi	r22, 0x44	; 68
     798:	75 e0       	ldi	r23, 0x05	; 5
     79a:	81 ee       	ldi	r24, 0xE1	; 225
     79c:	0e 94 b9 03 	call	0x772	; 0x772 <read_raw_data_bme280>
     7a0:	eb e2       	ldi	r30, 0x2B	; 43
     7a2:	f5 e0       	ldi	r31, 0x05	; 5
     7a4:	81 81       	ldd	r24, Z+1	; 0x01
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	98 2f       	mov	r25, r24
     7aa:	88 27       	eor	r24, r24
     7ac:	20 81       	ld	r18, Z
     7ae:	82 2b       	or	r24, r18
     7b0:	99 83       	std	Y+1, r25	; 0x01
     7b2:	88 83       	st	Y, r24
     7b4:	83 81       	ldd	r24, Z+3	; 0x03
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	98 2f       	mov	r25, r24
     7ba:	88 27       	eor	r24, r24
     7bc:	22 81       	ldd	r18, Z+2	; 0x02
     7be:	82 2b       	or	r24, r18
     7c0:	9b 83       	std	Y+3, r25	; 0x03
     7c2:	8a 83       	std	Y+2, r24	; 0x02
     7c4:	85 81       	ldd	r24, Z+5	; 0x05
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	98 2f       	mov	r25, r24
     7ca:	88 27       	eor	r24, r24
     7cc:	24 81       	ldd	r18, Z+4	; 0x04
     7ce:	82 2b       	or	r24, r18
     7d0:	9d 83       	std	Y+5, r25	; 0x05
     7d2:	8c 83       	std	Y+4, r24	; 0x04
     7d4:	87 81       	ldd	r24, Z+7	; 0x07
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	98 2f       	mov	r25, r24
     7da:	88 27       	eor	r24, r24
     7dc:	26 81       	ldd	r18, Z+6	; 0x06
     7de:	82 2b       	or	r24, r18
     7e0:	9f 83       	std	Y+7, r25	; 0x07
     7e2:	8e 83       	std	Y+6, r24	; 0x06
     7e4:	81 85       	ldd	r24, Z+9	; 0x09
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	98 2f       	mov	r25, r24
     7ea:	88 27       	eor	r24, r24
     7ec:	20 85       	ldd	r18, Z+8	; 0x08
     7ee:	82 2b       	or	r24, r18
     7f0:	99 87       	std	Y+9, r25	; 0x09
     7f2:	88 87       	std	Y+8, r24	; 0x08
     7f4:	83 85       	ldd	r24, Z+11	; 0x0b
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	98 2f       	mov	r25, r24
     7fa:	88 27       	eor	r24, r24
     7fc:	22 85       	ldd	r18, Z+10	; 0x0a
     7fe:	82 2b       	or	r24, r18
     800:	9b 87       	std	Y+11, r25	; 0x0b
     802:	8a 87       	std	Y+10, r24	; 0x0a
     804:	85 85       	ldd	r24, Z+13	; 0x0d
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	98 2f       	mov	r25, r24
     80a:	88 27       	eor	r24, r24
     80c:	24 85       	ldd	r18, Z+12	; 0x0c
     80e:	82 2b       	or	r24, r18
     810:	9d 87       	std	Y+13, r25	; 0x0d
     812:	8c 87       	std	Y+12, r24	; 0x0c
     814:	87 85       	ldd	r24, Z+15	; 0x0f
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	98 2f       	mov	r25, r24
     81a:	88 27       	eor	r24, r24
     81c:	26 85       	ldd	r18, Z+14	; 0x0e
     81e:	82 2b       	or	r24, r18
     820:	9f 87       	std	Y+15, r25	; 0x0f
     822:	8e 87       	std	Y+14, r24	; 0x0e
     824:	81 89       	ldd	r24, Z+17	; 0x11
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	98 2f       	mov	r25, r24
     82a:	88 27       	eor	r24, r24
     82c:	20 89       	ldd	r18, Z+16	; 0x10
     82e:	82 2b       	or	r24, r18
     830:	99 8b       	std	Y+17, r25	; 0x11
     832:	88 8b       	std	Y+16, r24	; 0x10
     834:	83 89       	ldd	r24, Z+19	; 0x13
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	98 2f       	mov	r25, r24
     83a:	88 27       	eor	r24, r24
     83c:	22 89       	ldd	r18, Z+18	; 0x12
     83e:	82 2b       	or	r24, r18
     840:	9b 8b       	std	Y+19, r25	; 0x13
     842:	8a 8b       	std	Y+18, r24	; 0x12
     844:	85 89       	ldd	r24, Z+21	; 0x15
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	98 2f       	mov	r25, r24
     84a:	88 27       	eor	r24, r24
     84c:	24 89       	ldd	r18, Z+20	; 0x14
     84e:	82 2b       	or	r24, r18
     850:	9d 8b       	std	Y+21, r25	; 0x15
     852:	8c 8b       	std	Y+20, r24	; 0x14
     854:	87 89       	ldd	r24, Z+23	; 0x17
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	98 2f       	mov	r25, r24
     85a:	88 27       	eor	r24, r24
     85c:	26 89       	ldd	r18, Z+22	; 0x16
     85e:	82 2b       	or	r24, r18
     860:	9f 8b       	std	Y+23, r25	; 0x17
     862:	8e 8b       	std	Y+22, r24	; 0x16
     864:	80 8d       	ldd	r24, Z+24	; 0x18
     866:	88 8f       	std	Y+24, r24	; 0x18
     868:	82 8d       	ldd	r24, Z+26	; 0x1a
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	98 2f       	mov	r25, r24
     86e:	88 27       	eor	r24, r24
     870:	21 8d       	ldd	r18, Z+25	; 0x19
     872:	82 2b       	or	r24, r18
     874:	9a 8f       	std	Y+26, r25	; 0x1a
     876:	89 8f       	std	Y+25, r24	; 0x19
     878:	83 8d       	ldd	r24, Z+27	; 0x1b
     87a:	8b 8f       	std	Y+27, r24	; 0x1b
     87c:	84 8d       	ldd	r24, Z+28	; 0x1c
     87e:	20 e1       	ldi	r18, 0x10	; 16
     880:	82 9f       	mul	r24, r18
     882:	c0 01       	movw	r24, r0
     884:	11 24       	eor	r1, r1
     886:	25 8d       	ldd	r18, Z+29	; 0x1d
     888:	2f 70       	andi	r18, 0x0F	; 15
     88a:	82 2b       	or	r24, r18
     88c:	9d 8f       	std	Y+29, r25	; 0x1d
     88e:	8c 8f       	std	Y+28, r24	; 0x1c
     890:	86 8d       	ldd	r24, Z+30	; 0x1e
     892:	20 e1       	ldi	r18, 0x10	; 16
     894:	82 9f       	mul	r24, r18
     896:	c0 01       	movw	r24, r0
     898:	11 24       	eor	r1, r1
     89a:	25 8d       	ldd	r18, Z+29	; 0x1d
     89c:	22 95       	swap	r18
     89e:	2f 70       	andi	r18, 0x0F	; 15
     8a0:	82 2b       	or	r24, r18
     8a2:	9f 8f       	std	Y+31, r25	; 0x1f
     8a4:	8e 8f       	std	Y+30, r24	; 0x1e
     8a6:	87 8d       	ldd	r24, Z+31	; 0x1f
     8a8:	88 a3       	std	Y+32, r24	; 0x20
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <bme280_init>:
     8b2:	ef 92       	push	r14
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	00 d0       	rcall	.+0      	; 0x8be <bme280_init+0xc>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <bme280_init+0xe>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <bme280_init+0x10>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	92 ef       	ldi	r25, 0xF2	; 242
     8c8:	99 83       	std	Y+1, r25	; 0x01
     8ca:	8a 83       	std	Y+2, r24	; 0x02
     8cc:	85 ef       	ldi	r24, 0xF5	; 245
     8ce:	8b 83       	std	Y+3, r24	; 0x03
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	66 0f       	add	r22, r22
     8d4:	77 1f       	adc	r23, r23
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	80 e2       	ldi	r24, 0x20	; 32
     8dc:	48 9f       	mul	r20, r24
     8de:	a0 01       	movw	r20, r0
     8e0:	11 24       	eor	r1, r1
     8e2:	46 2b       	or	r20, r22
     8e4:	4c 83       	std	Y+4, r20	; 0x04
     8e6:	84 ef       	ldi	r24, 0xF4	; 244
     8e8:	8d 83       	std	Y+5, r24	; 0x05
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	22 0f       	add	r18, r18
     8ee:	33 1f       	adc	r19, r19
     8f0:	22 0f       	add	r18, r18
     8f2:	33 1f       	adc	r19, r19
     8f4:	80 e2       	ldi	r24, 0x20	; 32
     8f6:	08 9f       	mul	r16, r24
     8f8:	80 01       	movw	r16, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	02 2b       	or	r16, r18
     8fe:	0e 29       	or	r16, r14
     900:	0e 83       	std	Y+6, r16	; 0x06
     902:	60 ed       	ldi	r22, 0xD0	; 208
     904:	8c ee       	ldi	r24, 0xEC	; 236
     906:	0e 94 40 03 	call	0x680	; 0x680 <bme280_readbyte>
     90a:	80 36       	cpi	r24, 0x60	; 96
     90c:	79 f4       	brne	.+30     	; 0x92c <__stack+0x2d>
     90e:	0e 94 a4 03 	call	0x748	; 0x748 <bme280_reset>
     912:	46 e0       	ldi	r20, 0x06	; 6
     914:	be 01       	movw	r22, r28
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	8c ee       	ldi	r24, 0xEC	; 236
     91c:	0e 94 21 03 	call	0x642	; 0x642 <bme280_send_data>
     920:	8b e4       	ldi	r24, 0x4B	; 75
     922:	95 e0       	ldi	r25, 0x05	; 5
     924:	0e 94 c1 03 	call	0x782	; 0x782 <get_compens>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0x2f>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	26 96       	adiw	r28, 0x06	; 6
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ef 90       	pop	r14
     944:	08 95       	ret

00000946 <parse_temp_bme280>:
     946:	4f 92       	push	r4
     948:	5f 92       	push	r5
     94a:	6f 92       	push	r6
     94c:	7f 92       	push	r7
     94e:	8f 92       	push	r8
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	00 d0       	rcall	.+0      	; 0x968 <parse_temp_bme280+0x22>
     968:	1f 92       	push	r1
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	8c 01       	movw	r16, r24
     970:	19 82       	std	Y+1, r1	; 0x01
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	1b 82       	std	Y+3, r1	; 0x03
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	be 01       	movw	r22, r28
     97a:	6f 5f       	subi	r22, 0xFF	; 255
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	8a ef       	ldi	r24, 0xFA	; 250
     980:	0e 94 b9 03 	call	0x772	; 0x772 <read_raw_data_bme280>
     984:	c9 80       	ldd	r12, Y+1	; 0x01
     986:	d1 2c       	mov	r13, r1
     988:	e1 2c       	mov	r14, r1
     98a:	f1 2c       	mov	r15, r1
     98c:	0b 2e       	mov	r0, r27
     98e:	bc e0       	ldi	r27, 0x0C	; 12
     990:	cc 0c       	add	r12, r12
     992:	dd 1c       	adc	r13, r13
     994:	ee 1c       	adc	r14, r14
     996:	ff 1c       	adc	r15, r15
     998:	ba 95       	dec	r27
     99a:	d1 f7       	brne	.-12     	; 0x990 <parse_temp_bme280+0x4a>
     99c:	b0 2d       	mov	r27, r0
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	20 e1       	ldi	r18, 0x10	; 16
     9a2:	82 9f       	mul	r24, r18
     9a4:	c0 01       	movw	r24, r0
     9a6:	11 24       	eor	r1, r1
     9a8:	09 2e       	mov	r0, r25
     9aa:	00 0c       	add	r0, r0
     9ac:	aa 0b       	sbc	r26, r26
     9ae:	bb 0b       	sbc	r27, r27
     9b0:	c8 2a       	or	r12, r24
     9b2:	d9 2a       	or	r13, r25
     9b4:	ea 2a       	or	r14, r26
     9b6:	fb 2a       	or	r15, r27
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	82 95       	swap	r24
     9bc:	8f 70       	andi	r24, 0x0F	; 15
     9be:	c8 2a       	or	r12, r24
     9c0:	b7 01       	movw	r22, r14
     9c2:	a6 01       	movw	r20, r12
     9c4:	68 94       	set
     9c6:	12 f8       	bld	r1, 2
     9c8:	76 95       	lsr	r23
     9ca:	67 95       	ror	r22
     9cc:	57 95       	ror	r21
     9ce:	47 95       	ror	r20
     9d0:	16 94       	lsr	r1
     9d2:	d1 f7       	brne	.-12     	; 0x9c8 <parse_temp_bme280+0x82>
     9d4:	f8 01       	movw	r30, r16
     9d6:	40 80       	ld	r4, Z
     9d8:	51 80       	ldd	r5, Z+1	; 0x01
     9da:	61 2c       	mov	r6, r1
     9dc:	71 2c       	mov	r7, r1
     9de:	d3 01       	movw	r26, r6
     9e0:	c2 01       	movw	r24, r4
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	aa 1f       	adc	r26, r26
     9e8:	bb 1f       	adc	r27, r27
     9ea:	9a 01       	movw	r18, r20
     9ec:	ab 01       	movw	r20, r22
     9ee:	28 1b       	sub	r18, r24
     9f0:	39 0b       	sbc	r19, r25
     9f2:	4a 0b       	sbc	r20, r26
     9f4:	5b 0b       	sbc	r21, r27
     9f6:	a2 81       	ldd	r26, Z+2	; 0x02
     9f8:	b3 81       	ldd	r27, Z+3	; 0x03
     9fa:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__mulshisi3>
     9fe:	4b 01       	movw	r8, r22
     a00:	5c 01       	movw	r10, r24
     a02:	07 2e       	mov	r0, r23
     a04:	7b e0       	ldi	r23, 0x0B	; 11
     a06:	b6 94       	lsr	r11
     a08:	a7 94       	ror	r10
     a0a:	97 94       	ror	r9
     a0c:	87 94       	ror	r8
     a0e:	7a 95       	dec	r23
     a10:	d1 f7       	brne	.-12     	; 0xa06 <parse_temp_bme280+0xc0>
     a12:	70 2d       	mov	r23, r0
     a14:	d7 01       	movw	r26, r14
     a16:	c6 01       	movw	r24, r12
     a18:	68 94       	set
     a1a:	13 f8       	bld	r1, 3
     a1c:	b6 95       	lsr	r27
     a1e:	a7 95       	ror	r26
     a20:	97 95       	ror	r25
     a22:	87 95       	ror	r24
     a24:	16 94       	lsr	r1
     a26:	d1 f7       	brne	.-12     	; 0xa1c <parse_temp_bme280+0xd6>
     a28:	bc 01       	movw	r22, r24
     a2a:	cd 01       	movw	r24, r26
     a2c:	64 19       	sub	r22, r4
     a2e:	75 09       	sbc	r23, r5
     a30:	86 09       	sbc	r24, r6
     a32:	97 09       	sbc	r25, r7
     a34:	9b 01       	movw	r18, r22
     a36:	ac 01       	movw	r20, r24
     a38:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__mulsi3>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	01 2e       	mov	r0, r17
     a42:	1c e0       	ldi	r17, 0x0C	; 12
     a44:	56 95       	lsr	r21
     a46:	47 95       	ror	r20
     a48:	37 95       	ror	r19
     a4a:	27 95       	ror	r18
     a4c:	1a 95       	dec	r17
     a4e:	d1 f7       	brne	.-12     	; 0xa44 <parse_temp_bme280+0xfe>
     a50:	10 2d       	mov	r17, r0
     a52:	a4 81       	ldd	r26, Z+4	; 0x04
     a54:	b5 81       	ldd	r27, Z+5	; 0x05
     a56:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__mulshisi3>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	07 2e       	mov	r0, r23
     a60:	7e e0       	ldi	r23, 0x0E	; 14
     a62:	b6 95       	lsr	r27
     a64:	a7 95       	ror	r26
     a66:	97 95       	ror	r25
     a68:	87 95       	ror	r24
     a6a:	7a 95       	dec	r23
     a6c:	d1 f7       	brne	.-12     	; 0xa62 <parse_temp_bme280+0x11c>
     a6e:	70 2d       	mov	r23, r0
     a70:	88 0d       	add	r24, r8
     a72:	99 1d       	adc	r25, r9
     a74:	aa 1d       	adc	r26, r10
     a76:	bb 1d       	adc	r27, r11
     a78:	81 a3       	std	Z+33, r24	; 0x21
     a7a:	92 a3       	std	Z+34, r25	; 0x22
     a7c:	a3 a3       	std	Z+35, r26	; 0x23
     a7e:	b4 a3       	std	Z+36, r27	; 0x24
     a80:	8c 01       	movw	r16, r24
     a82:	9d 01       	movw	r18, r26
     a84:	00 0f       	add	r16, r16
     a86:	11 1f       	adc	r17, r17
     a88:	22 1f       	adc	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	00 0f       	add	r16, r16
     a8e:	11 1f       	adc	r17, r17
     a90:	22 1f       	adc	r18, r18
     a92:	33 1f       	adc	r19, r19
     a94:	80 0f       	add	r24, r16
     a96:	91 1f       	adc	r25, r17
     a98:	a2 1f       	adc	r26, r18
     a9a:	b3 1f       	adc	r27, r19
     a9c:	80 58       	subi	r24, 0x80	; 128
     a9e:	9f 4f       	sbci	r25, 0xFF	; 255
     aa0:	af 4f       	sbci	r26, 0xFF	; 255
     aa2:	bf 4f       	sbci	r27, 0xFF	; 255
     aa4:	69 2f       	mov	r22, r25
     aa6:	7a 2f       	mov	r23, r26
     aa8:	8b 2f       	mov	r24, r27
     aaa:	99 27       	eor	r25, r25
     aac:	87 fd       	sbrc	r24, 7
     aae:	9a 95       	dec	r25
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	7f 90       	pop	r7
     ad0:	6f 90       	pop	r6
     ad2:	5f 90       	pop	r5
     ad4:	4f 90       	pop	r4
     ad6:	08 95       	ret

00000ad8 <parse_press_bme280>:
     ad8:	2f 92       	push	r2
     ada:	3f 92       	push	r3
     adc:	4f 92       	push	r4
     ade:	5f 92       	push	r5
     ae0:	6f 92       	push	r6
     ae2:	7f 92       	push	r7
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	a8 97       	sbiw	r28, 0x28	; 40
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	4c 01       	movw	r8, r24
     b0e:	19 82       	std	Y+1, r1	; 0x01
     b10:	1a 82       	std	Y+2, r1	; 0x02
     b12:	1b 82       	std	Y+3, r1	; 0x03
     b14:	1c 82       	std	Y+4, r1	; 0x04
     b16:	1d 82       	std	Y+5, r1	; 0x05
     b18:	1e 82       	std	Y+6, r1	; 0x06
     b1a:	1f 82       	std	Y+7, r1	; 0x07
     b1c:	18 86       	std	Y+8, r1	; 0x08
     b1e:	19 86       	std	Y+9, r1	; 0x09
     b20:	1a 86       	std	Y+10, r1	; 0x0a
     b22:	1b 86       	std	Y+11, r1	; 0x0b
     b24:	1c 86       	std	Y+12, r1	; 0x0c
     b26:	1d 86       	std	Y+13, r1	; 0x0d
     b28:	1e 86       	std	Y+14, r1	; 0x0e
     b2a:	1f 86       	std	Y+15, r1	; 0x0f
     b2c:	18 8a       	std	Y+16, r1	; 0x10
     b2e:	19 8a       	std	Y+17, r1	; 0x11
     b30:	1a 8a       	std	Y+18, r1	; 0x12
     b32:	1b 8a       	std	Y+19, r1	; 0x13
     b34:	1c 8a       	std	Y+20, r1	; 0x14
     b36:	1d 8a       	std	Y+21, r1	; 0x15
     b38:	1e 8a       	std	Y+22, r1	; 0x16
     b3a:	1f 8a       	std	Y+23, r1	; 0x17
     b3c:	18 8e       	std	Y+24, r1	; 0x18
     b3e:	19 8e       	std	Y+25, r1	; 0x19
     b40:	1a 8e       	std	Y+26, r1	; 0x1a
     b42:	1b 8e       	std	Y+27, r1	; 0x1b
     b44:	1c 8e       	std	Y+28, r1	; 0x1c
     b46:	1d 8e       	std	Y+29, r1	; 0x1d
     b48:	1e 8e       	std	Y+30, r1	; 0x1e
     b4a:	1f 8e       	std	Y+31, r1	; 0x1f
     b4c:	43 e0       	ldi	r20, 0x03	; 3
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	87 ef       	ldi	r24, 0xF7	; 247
     b56:	0e 94 b9 03 	call	0x772	; 0x772 <read_raw_data_bme280>
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	07 2e       	mov	r0, r23
     b64:	7c e0       	ldi	r23, 0x0C	; 12
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	7a 95       	dec	r23
     b70:	d1 f7       	brne	.-12     	; 0xb66 <parse_press_bme280+0x8e>
     b72:	70 2d       	mov	r23, r0
     b74:	4a 81       	ldd	r20, Y+2	; 0x02
     b76:	00 e1       	ldi	r16, 0x10	; 16
     b78:	40 9f       	mul	r20, r16
     b7a:	a0 01       	movw	r20, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	05 2e       	mov	r0, r21
     b80:	00 0c       	add	r0, r0
     b82:	66 0b       	sbc	r22, r22
     b84:	77 0b       	sbc	r23, r23
     b86:	84 2b       	or	r24, r20
     b88:	95 2b       	or	r25, r21
     b8a:	a6 2b       	or	r26, r22
     b8c:	b7 2b       	or	r27, r23
     b8e:	2b 81       	ldd	r18, Y+3	; 0x03
     b90:	22 95       	swap	r18
     b92:	2f 70       	andi	r18, 0x0F	; 15
     b94:	82 2b       	or	r24, r18
     b96:	4c 81       	ldd	r20, Y+4	; 0x04
     b98:	5d 81       	ldd	r21, Y+5	; 0x05
     b9a:	6e 81       	ldd	r22, Y+6	; 0x06
     b9c:	7f 81       	ldd	r23, Y+7	; 0x07
     b9e:	84 2b       	or	r24, r20
     ba0:	95 2b       	or	r25, r21
     ba2:	a6 2b       	or	r26, r22
     ba4:	b7 2b       	or	r27, r23
     ba6:	8c 83       	std	Y+4, r24	; 0x04
     ba8:	9d 83       	std	Y+5, r25	; 0x05
     baa:	ae 83       	std	Y+6, r26	; 0x06
     bac:	bf 83       	std	Y+7, r27	; 0x07
     bae:	f4 01       	movw	r30, r8
     bb0:	81 a1       	ldd	r24, Z+33	; 0x21
     bb2:	92 a1       	ldd	r25, Z+34	; 0x22
     bb4:	a3 a1       	ldd	r26, Z+35	; 0x23
     bb6:	b4 a1       	ldd	r27, Z+36	; 0x24
     bb8:	2c 01       	movw	r4, r24
     bba:	3d 01       	movw	r6, r26
     bbc:	77 0c       	add	r7, r7
     bbe:	44 08       	sbc	r4, r4
     bc0:	54 2c       	mov	r5, r4
     bc2:	32 01       	movw	r6, r4
     bc4:	28 2f       	mov	r18, r24
     bc6:	39 2f       	mov	r19, r25
     bc8:	4a 2f       	mov	r20, r26
     bca:	5b 2f       	mov	r21, r27
     bcc:	64 2d       	mov	r22, r4
     bce:	74 2d       	mov	r23, r4
     bd0:	84 2d       	mov	r24, r4
     bd2:	94 2d       	mov	r25, r4
     bd4:	34 5f       	subi	r19, 0xF4	; 244
     bd6:	41 40       	sbci	r20, 0x01	; 1
     bd8:	51 09       	sbc	r21, r1
     bda:	61 09       	sbc	r22, r1
     bdc:	71 09       	sbc	r23, r1
     bde:	81 09       	sbc	r24, r1
     be0:	91 09       	sbc	r25, r1
     be2:	28 87       	std	Y+8, r18	; 0x08
     be4:	39 87       	std	Y+9, r19	; 0x09
     be6:	4a 87       	std	Y+10, r20	; 0x0a
     be8:	5b 87       	std	Y+11, r21	; 0x0b
     bea:	6c 87       	std	Y+12, r22	; 0x0c
     bec:	7d 87       	std	Y+13, r23	; 0x0d
     bee:	8e 87       	std	Y+14, r24	; 0x0e
     bf0:	9f 87       	std	Y+15, r25	; 0x0f
     bf2:	28 85       	ldd	r18, Y+8	; 0x08
     bf4:	39 85       	ldd	r19, Y+9	; 0x09
     bf6:	4a 85       	ldd	r20, Y+10	; 0x0a
     bf8:	5b 85       	ldd	r21, Y+11	; 0x0b
     bfa:	6c 85       	ldd	r22, Y+12	; 0x0c
     bfc:	7d 85       	ldd	r23, Y+13	; 0x0d
     bfe:	8e 85       	ldd	r24, Y+14	; 0x0e
     c00:	9f 85       	ldd	r25, Y+15	; 0x0f
     c02:	a8 84       	ldd	r10, Y+8	; 0x08
     c04:	b9 84       	ldd	r11, Y+9	; 0x09
     c06:	ca 84       	ldd	r12, Y+10	; 0x0a
     c08:	db 84       	ldd	r13, Y+11	; 0x0b
     c0a:	ec 84       	ldd	r14, Y+12	; 0x0c
     c0c:	fd 84       	ldd	r15, Y+13	; 0x0d
     c0e:	0e 85       	ldd	r16, Y+14	; 0x0e
     c10:	1f 85       	ldd	r17, Y+15	; 0x0f
     c12:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     c16:	d4 01       	movw	r26, r8
     c18:	51 96       	adiw	r26, 0x11	; 17
     c1a:	bc 90       	ld	r11, X
     c1c:	51 97       	sbiw	r26, 0x11	; 17
     c1e:	50 96       	adiw	r26, 0x10	; 16
     c20:	ac 90       	ld	r10, X
     c22:	1b 2d       	mov	r17, r11
     c24:	11 0f       	add	r17, r17
     c26:	11 0b       	sbc	r17, r17
     c28:	c1 2e       	mov	r12, r17
     c2a:	d1 2e       	mov	r13, r17
     c2c:	e1 2e       	mov	r14, r17
     c2e:	f1 2e       	mov	r15, r17
     c30:	01 2f       	mov	r16, r17
     c32:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     c36:	28 8b       	std	Y+16, r18	; 0x10
     c38:	39 8b       	std	Y+17, r19	; 0x11
     c3a:	4a 8b       	std	Y+18, r20	; 0x12
     c3c:	5b 8b       	std	Y+19, r21	; 0x13
     c3e:	6c 8b       	std	Y+20, r22	; 0x14
     c40:	7d 8b       	std	Y+21, r23	; 0x15
     c42:	8e 8b       	std	Y+22, r24	; 0x16
     c44:	9f 8b       	std	Y+23, r25	; 0x17
     c46:	f4 01       	movw	r30, r8
     c48:	37 85       	ldd	r19, Z+15	; 0x0f
     c4a:	26 85       	ldd	r18, Z+14	; 0x0e
     c4c:	93 2f       	mov	r25, r19
     c4e:	99 0f       	add	r25, r25
     c50:	99 0b       	sbc	r25, r25
     c52:	a8 84       	ldd	r10, Y+8	; 0x08
     c54:	b9 84       	ldd	r11, Y+9	; 0x09
     c56:	ca 84       	ldd	r12, Y+10	; 0x0a
     c58:	db 84       	ldd	r13, Y+11	; 0x0b
     c5a:	ec 84       	ldd	r14, Y+12	; 0x0c
     c5c:	fd 84       	ldd	r15, Y+13	; 0x0d
     c5e:	0e 85       	ldd	r16, Y+14	; 0x0e
     c60:	1f 85       	ldd	r17, Y+15	; 0x0f
     c62:	49 2f       	mov	r20, r25
     c64:	59 2f       	mov	r21, r25
     c66:	69 2f       	mov	r22, r25
     c68:	79 2f       	mov	r23, r25
     c6a:	89 2f       	mov	r24, r25
     c6c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     c70:	01 e1       	ldi	r16, 0x11	; 17
     c72:	0e 94 00 18 	call	0x3000	; 0x3000 <__ashldi3>
     c76:	a8 88       	ldd	r10, Y+16	; 0x10
     c78:	b9 88       	ldd	r11, Y+17	; 0x11
     c7a:	ca 88       	ldd	r12, Y+18	; 0x12
     c7c:	db 88       	ldd	r13, Y+19	; 0x13
     c7e:	ec 88       	ldd	r14, Y+20	; 0x14
     c80:	fd 88       	ldd	r15, Y+21	; 0x15
     c82:	0e 89       	ldd	r16, Y+22	; 0x16
     c84:	1f 89       	ldd	r17, Y+23	; 0x17
     c86:	0e 94 37 18 	call	0x306e	; 0x306e <__adddi3>
     c8a:	28 8b       	std	Y+16, r18	; 0x10
     c8c:	39 8b       	std	Y+17, r19	; 0x11
     c8e:	4a 8b       	std	Y+18, r20	; 0x12
     c90:	5b 8b       	std	Y+19, r21	; 0x13
     c92:	6c 8b       	std	Y+20, r22	; 0x14
     c94:	7d 8b       	std	Y+21, r23	; 0x15
     c96:	8e 8b       	std	Y+22, r24	; 0x16
     c98:	9f 8b       	std	Y+23, r25	; 0x17
     c9a:	d4 01       	movw	r26, r8
     c9c:	1d 96       	adiw	r26, 0x0d	; 13
     c9e:	3c 91       	ld	r19, X
     ca0:	1d 97       	sbiw	r26, 0x0d	; 13
     ca2:	1c 96       	adiw	r26, 0x0c	; 12
     ca4:	2c 91       	ld	r18, X
     ca6:	93 2f       	mov	r25, r19
     ca8:	99 0f       	add	r25, r25
     caa:	99 0b       	sbc	r25, r25
     cac:	49 2f       	mov	r20, r25
     cae:	59 2f       	mov	r21, r25
     cb0:	69 2f       	mov	r22, r25
     cb2:	79 2f       	mov	r23, r25
     cb4:	89 2f       	mov	r24, r25
     cb6:	03 e2       	ldi	r16, 0x23	; 35
     cb8:	0e 94 00 18 	call	0x3000	; 0x3000 <__ashldi3>
     cbc:	a8 88       	ldd	r10, Y+16	; 0x10
     cbe:	b9 88       	ldd	r11, Y+17	; 0x11
     cc0:	ca 88       	ldd	r12, Y+18	; 0x12
     cc2:	db 88       	ldd	r13, Y+19	; 0x13
     cc4:	ec 88       	ldd	r14, Y+20	; 0x14
     cc6:	fd 88       	ldd	r15, Y+21	; 0x15
     cc8:	0e 89       	ldd	r16, Y+22	; 0x16
     cca:	1f 89       	ldd	r17, Y+23	; 0x17
     ccc:	0e 94 37 18 	call	0x306e	; 0x306e <__adddi3>
     cd0:	28 8b       	std	Y+16, r18	; 0x10
     cd2:	39 8b       	std	Y+17, r19	; 0x11
     cd4:	4a 8b       	std	Y+18, r20	; 0x12
     cd6:	5b 8b       	std	Y+19, r21	; 0x13
     cd8:	6c 8b       	std	Y+20, r22	; 0x14
     cda:	7d 8b       	std	Y+21, r23	; 0x15
     cdc:	8e 8b       	std	Y+22, r24	; 0x16
     cde:	9f 8b       	std	Y+23, r25	; 0x17
     ce0:	28 85       	ldd	r18, Y+8	; 0x08
     ce2:	39 85       	ldd	r19, Y+9	; 0x09
     ce4:	4a 85       	ldd	r20, Y+10	; 0x0a
     ce6:	5b 85       	ldd	r21, Y+11	; 0x0b
     ce8:	6c 85       	ldd	r22, Y+12	; 0x0c
     cea:	7d 85       	ldd	r23, Y+13	; 0x0d
     cec:	8e 85       	ldd	r24, Y+14	; 0x0e
     cee:	9f 85       	ldd	r25, Y+15	; 0x0f
     cf0:	a8 84       	ldd	r10, Y+8	; 0x08
     cf2:	b9 84       	ldd	r11, Y+9	; 0x09
     cf4:	ca 84       	ldd	r12, Y+10	; 0x0a
     cf6:	db 84       	ldd	r13, Y+11	; 0x0b
     cf8:	ec 84       	ldd	r14, Y+12	; 0x0c
     cfa:	fd 84       	ldd	r15, Y+13	; 0x0d
     cfc:	0e 85       	ldd	r16, Y+14	; 0x0e
     cfe:	1f 85       	ldd	r17, Y+15	; 0x0f
     d00:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     d04:	f4 01       	movw	r30, r8
     d06:	b3 84       	ldd	r11, Z+11	; 0x0b
     d08:	a2 84       	ldd	r10, Z+10	; 0x0a
     d0a:	1b 2d       	mov	r17, r11
     d0c:	11 0f       	add	r17, r17
     d0e:	11 0b       	sbc	r17, r17
     d10:	c1 2e       	mov	r12, r17
     d12:	d1 2e       	mov	r13, r17
     d14:	e1 2e       	mov	r14, r17
     d16:	f1 2e       	mov	r15, r17
     d18:	01 2f       	mov	r16, r17
     d1a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     d1e:	08 e0       	ldi	r16, 0x08	; 8
     d20:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
     d24:	22 2e       	mov	r2, r18
     d26:	33 2e       	mov	r3, r19
     d28:	44 2e       	mov	r4, r20
     d2a:	55 2e       	mov	r5, r21
     d2c:	66 2e       	mov	r6, r22
     d2e:	77 2e       	mov	r7, r23
     d30:	88 a3       	std	Y+32, r24	; 0x20
     d32:	98 a7       	std	Y+40, r25	; 0x28
     d34:	f4 01       	movw	r30, r8
     d36:	31 85       	ldd	r19, Z+9	; 0x09
     d38:	20 85       	ldd	r18, Z+8	; 0x08
     d3a:	93 2f       	mov	r25, r19
     d3c:	99 0f       	add	r25, r25
     d3e:	99 0b       	sbc	r25, r25
     d40:	a8 84       	ldd	r10, Y+8	; 0x08
     d42:	b9 84       	ldd	r11, Y+9	; 0x09
     d44:	ca 84       	ldd	r12, Y+10	; 0x0a
     d46:	db 84       	ldd	r13, Y+11	; 0x0b
     d48:	ec 84       	ldd	r14, Y+12	; 0x0c
     d4a:	fd 84       	ldd	r15, Y+13	; 0x0d
     d4c:	0e 85       	ldd	r16, Y+14	; 0x0e
     d4e:	1f 85       	ldd	r17, Y+15	; 0x0f
     d50:	49 2f       	mov	r20, r25
     d52:	59 2f       	mov	r21, r25
     d54:	69 2f       	mov	r22, r25
     d56:	79 2f       	mov	r23, r25
     d58:	89 2f       	mov	r24, r25
     d5a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     d5e:	0c e0       	ldi	r16, 0x0C	; 12
     d60:	0e 94 00 18 	call	0x3000	; 0x3000 <__ashldi3>
     d64:	a2 2e       	mov	r10, r18
     d66:	b3 2e       	mov	r11, r19
     d68:	c4 2e       	mov	r12, r20
     d6a:	d5 2e       	mov	r13, r21
     d6c:	e6 2e       	mov	r14, r22
     d6e:	f7 2e       	mov	r15, r23
     d70:	08 2f       	mov	r16, r24
     d72:	19 2f       	mov	r17, r25
     d74:	22 2d       	mov	r18, r2
     d76:	33 2d       	mov	r19, r3
     d78:	44 2d       	mov	r20, r4
     d7a:	55 2d       	mov	r21, r5
     d7c:	66 2d       	mov	r22, r6
     d7e:	77 2d       	mov	r23, r7
     d80:	88 a1       	ldd	r24, Y+32	; 0x20
     d82:	98 a5       	ldd	r25, Y+40	; 0x28
     d84:	0e 94 37 18 	call	0x306e	; 0x306e <__adddi3>
     d88:	28 87       	std	Y+8, r18	; 0x08
     d8a:	39 87       	std	Y+9, r19	; 0x09
     d8c:	4a 87       	std	Y+10, r20	; 0x0a
     d8e:	5b 87       	std	Y+11, r21	; 0x0b
     d90:	6c 87       	std	Y+12, r22	; 0x0c
     d92:	7d 87       	std	Y+13, r23	; 0x0d
     d94:	8e 87       	std	Y+14, r24	; 0x0e
     d96:	9f 87       	std	Y+15, r25	; 0x0f
     d98:	28 85       	ldd	r18, Y+8	; 0x08
     d9a:	39 85       	ldd	r19, Y+9	; 0x09
     d9c:	4a 85       	ldd	r20, Y+10	; 0x0a
     d9e:	5b 85       	ldd	r21, Y+11	; 0x0b
     da0:	6c 85       	ldd	r22, Y+12	; 0x0c
     da2:	7d 85       	ldd	r23, Y+13	; 0x0d
     da4:	8e 85       	ldd	r24, Y+14	; 0x0e
     da6:	9f 85       	ldd	r25, Y+15	; 0x0f
     da8:	70 58       	subi	r23, 0x80	; 128
     daa:	8f 4f       	sbci	r24, 0xFF	; 255
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	d4 01       	movw	r26, r8
     db0:	16 96       	adiw	r26, 0x06	; 6
     db2:	ed 91       	ld	r30, X+
     db4:	fc 91       	ld	r31, X
     db6:	17 97       	sbiw	r26, 0x07	; 7
     db8:	5f 01       	movw	r10, r30
     dba:	c1 2c       	mov	r12, r1
     dbc:	d1 2c       	mov	r13, r1
     dbe:	e1 2c       	mov	r14, r1
     dc0:	f1 2c       	mov	r15, r1
     dc2:	87 01       	movw	r16, r14
     dc4:	e8 a3       	std	Y+32, r30	; 0x20
     dc6:	b9 a2       	std	Y+33, r11	; 0x21
     dc8:	ca a2       	std	Y+34, r12	; 0x22
     dca:	db a2       	std	Y+35, r13	; 0x23
     dcc:	ec a2       	std	Y+36, r14	; 0x24
     dce:	fd a2       	std	Y+37, r15	; 0x25
     dd0:	0e a3       	std	Y+38, r16	; 0x26
     dd2:	1f a3       	std	Y+39, r17	; 0x27
     dd4:	c1 2c       	mov	r12, r1
     dd6:	d1 2c       	mov	r13, r1
     dd8:	e1 2c       	mov	r14, r1
     dda:	f1 2c       	mov	r15, r1
     ddc:	00 e0       	ldi	r16, 0x00	; 0
     dde:	10 e0       	ldi	r17, 0x00	; 0
     de0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     de4:	01 e2       	ldi	r16, 0x21	; 33
     de6:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
     dea:	28 87       	std	Y+8, r18	; 0x08
     dec:	39 87       	std	Y+9, r19	; 0x09
     dee:	4a 87       	std	Y+10, r20	; 0x0a
     df0:	5b 87       	std	Y+11, r21	; 0x0b
     df2:	6c 87       	std	Y+12, r22	; 0x0c
     df4:	7d 87       	std	Y+13, r23	; 0x0d
     df6:	8e 87       	std	Y+14, r24	; 0x0e
     df8:	9f 87       	std	Y+15, r25	; 0x0f
     dfa:	28 85       	ldd	r18, Y+8	; 0x08
     dfc:	39 85       	ldd	r19, Y+9	; 0x09
     dfe:	4a 85       	ldd	r20, Y+10	; 0x0a
     e00:	5b 85       	ldd	r21, Y+11	; 0x0b
     e02:	6c 85       	ldd	r22, Y+12	; 0x0c
     e04:	7d 85       	ldd	r23, Y+13	; 0x0d
     e06:	8e 85       	ldd	r24, Y+14	; 0x0e
     e08:	9f 85       	ldd	r25, Y+15	; 0x0f
     e0a:	a0 e0       	ldi	r26, 0x00	; 0
     e0c:	0e 94 49 18 	call	0x3092	; 0x3092 <__cmpdi2_s8>
     e10:	09 f4       	brne	.+2      	; 0xe14 <parse_press_bme280+0x33c>
     e12:	23 c1       	rjmp	.+582    	; 0x105a <parse_press_bme280+0x582>
     e14:	4c 81       	ldd	r20, Y+4	; 0x04
     e16:	5d 81       	ldd	r21, Y+5	; 0x05
     e18:	6e 81       	ldd	r22, Y+6	; 0x06
     e1a:	7f 81       	ldd	r23, Y+7	; 0x07
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a0 e1       	ldi	r26, 0x10	; 16
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	84 1b       	sub	r24, r20
     e26:	95 0b       	sbc	r25, r21
     e28:	a6 0b       	sbc	r26, r22
     e2a:	b7 0b       	sbc	r27, r23
     e2c:	ac 01       	movw	r20, r24
     e2e:	bd 01       	movw	r22, r26
     e30:	77 0f       	add	r23, r23
     e32:	44 0b       	sbc	r20, r20
     e34:	54 2f       	mov	r21, r20
     e36:	ba 01       	movw	r22, r20
     e38:	88 8f       	std	Y+24, r24	; 0x18
     e3a:	99 8f       	std	Y+25, r25	; 0x19
     e3c:	aa 8f       	std	Y+26, r26	; 0x1a
     e3e:	bb 8f       	std	Y+27, r27	; 0x1b
     e40:	4c 8f       	std	Y+28, r20	; 0x1c
     e42:	4d 8f       	std	Y+29, r20	; 0x1d
     e44:	4e 8f       	std	Y+30, r20	; 0x1e
     e46:	4f 8f       	std	Y+31, r20	; 0x1f
     e48:	28 8d       	ldd	r18, Y+24	; 0x18
     e4a:	39 8d       	ldd	r19, Y+25	; 0x19
     e4c:	4a 8d       	ldd	r20, Y+26	; 0x1a
     e4e:	5b 8d       	ldd	r21, Y+27	; 0x1b
     e50:	6c 8d       	ldd	r22, Y+28	; 0x1c
     e52:	7d 8d       	ldd	r23, Y+29	; 0x1d
     e54:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e56:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e58:	0f e1       	ldi	r16, 0x1F	; 31
     e5a:	0e 94 00 18 	call	0x3000	; 0x3000 <__ashldi3>
     e5e:	a8 88       	ldd	r10, Y+16	; 0x10
     e60:	b9 88       	ldd	r11, Y+17	; 0x11
     e62:	ca 88       	ldd	r12, Y+18	; 0x12
     e64:	db 88       	ldd	r13, Y+19	; 0x13
     e66:	ec 88       	ldd	r14, Y+20	; 0x14
     e68:	fd 88       	ldd	r15, Y+21	; 0x15
     e6a:	0e 89       	ldd	r16, Y+22	; 0x16
     e6c:	1f 89       	ldd	r17, Y+23	; 0x17
     e6e:	0e 94 40 18 	call	0x3080	; 0x3080 <__subdi3>
     e72:	0f 2e       	mov	r0, r31
     e74:	f5 e3       	ldi	r31, 0x35	; 53
     e76:	af 2e       	mov	r10, r31
     e78:	f0 2d       	mov	r31, r0
     e7a:	0f 2e       	mov	r0, r31
     e7c:	fc e0       	ldi	r31, 0x0C	; 12
     e7e:	bf 2e       	mov	r11, r31
     e80:	f0 2d       	mov	r31, r0
     e82:	c1 2c       	mov	r12, r1
     e84:	d1 2c       	mov	r13, r1
     e86:	e1 2c       	mov	r14, r1
     e88:	f1 2c       	mov	r15, r1
     e8a:	00 e0       	ldi	r16, 0x00	; 0
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     e92:	a8 84       	ldd	r10, Y+8	; 0x08
     e94:	b9 84       	ldd	r11, Y+9	; 0x09
     e96:	ca 84       	ldd	r12, Y+10	; 0x0a
     e98:	db 84       	ldd	r13, Y+11	; 0x0b
     e9a:	ec 84       	ldd	r14, Y+12	; 0x0c
     e9c:	fd 84       	ldd	r15, Y+13	; 0x0d
     e9e:	0e 85       	ldd	r16, Y+14	; 0x0e
     ea0:	1f 85       	ldd	r17, Y+15	; 0x0f
     ea2:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__divdi3>
     ea6:	28 8f       	std	Y+24, r18	; 0x18
     ea8:	39 8f       	std	Y+25, r19	; 0x19
     eaa:	4a 8f       	std	Y+26, r20	; 0x1a
     eac:	5b 8f       	std	Y+27, r21	; 0x1b
     eae:	6c 8f       	std	Y+28, r22	; 0x1c
     eb0:	7d 8f       	std	Y+29, r23	; 0x1d
     eb2:	8e 8f       	std	Y+30, r24	; 0x1e
     eb4:	9f 8f       	std	Y+31, r25	; 0x1f
     eb6:	d4 01       	movw	r26, r8
     eb8:	57 96       	adiw	r26, 0x17	; 23
     eba:	fc 91       	ld	r31, X
     ebc:	57 97       	sbiw	r26, 0x17	; 23
     ebe:	56 96       	adiw	r26, 0x16	; 22
     ec0:	7c 90       	ld	r7, X
     ec2:	ef 2f       	mov	r30, r31
     ec4:	ee 0f       	add	r30, r30
     ec6:	ee 0b       	sbc	r30, r30
     ec8:	28 8d       	ldd	r18, Y+24	; 0x18
     eca:	39 8d       	ldd	r19, Y+25	; 0x19
     ecc:	4a 8d       	ldd	r20, Y+26	; 0x1a
     ece:	5b 8d       	ldd	r21, Y+27	; 0x1b
     ed0:	6c 8d       	ldd	r22, Y+28	; 0x1c
     ed2:	7d 8d       	ldd	r23, Y+29	; 0x1d
     ed4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ed8:	0d e0       	ldi	r16, 0x0D	; 13
     eda:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
     ede:	a2 2e       	mov	r10, r18
     ee0:	b3 2e       	mov	r11, r19
     ee2:	c4 2e       	mov	r12, r20
     ee4:	d5 2e       	mov	r13, r21
     ee6:	e6 2e       	mov	r14, r22
     ee8:	f7 2e       	mov	r15, r23
     eea:	08 2f       	mov	r16, r24
     eec:	19 2f       	mov	r17, r25
     eee:	27 2d       	mov	r18, r7
     ef0:	3f 2f       	mov	r19, r31
     ef2:	4e 2f       	mov	r20, r30
     ef4:	5e 2f       	mov	r21, r30
     ef6:	6e 2f       	mov	r22, r30
     ef8:	7e 2f       	mov	r23, r30
     efa:	8e 2f       	mov	r24, r30
     efc:	9e 2f       	mov	r25, r30
     efe:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     f02:	42 2e       	mov	r4, r18
     f04:	53 2e       	mov	r5, r19
     f06:	64 2e       	mov	r6, r20
     f08:	75 2e       	mov	r7, r21
     f0a:	b6 2f       	mov	r27, r22
     f0c:	a7 2f       	mov	r26, r23
     f0e:	f8 2f       	mov	r31, r24
     f10:	e9 2f       	mov	r30, r25
     f12:	28 8d       	ldd	r18, Y+24	; 0x18
     f14:	39 8d       	ldd	r19, Y+25	; 0x19
     f16:	4a 8d       	ldd	r20, Y+26	; 0x1a
     f18:	5b 8d       	ldd	r21, Y+27	; 0x1b
     f1a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     f1c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     f1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f20:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f22:	0d e0       	ldi	r16, 0x0D	; 13
     f24:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
     f28:	a2 2e       	mov	r10, r18
     f2a:	b3 2e       	mov	r11, r19
     f2c:	c4 2e       	mov	r12, r20
     f2e:	d5 2e       	mov	r13, r21
     f30:	e6 2e       	mov	r14, r22
     f32:	f7 2e       	mov	r15, r23
     f34:	08 2f       	mov	r16, r24
     f36:	19 2f       	mov	r17, r25
     f38:	24 2d       	mov	r18, r4
     f3a:	35 2d       	mov	r19, r5
     f3c:	46 2d       	mov	r20, r6
     f3e:	57 2d       	mov	r21, r7
     f40:	6b 2f       	mov	r22, r27
     f42:	7a 2f       	mov	r23, r26
     f44:	8f 2f       	mov	r24, r31
     f46:	9e 2f       	mov	r25, r30
     f48:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     f4c:	09 e1       	ldi	r16, 0x19	; 25
     f4e:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
     f52:	28 87       	std	Y+8, r18	; 0x08
     f54:	39 87       	std	Y+9, r19	; 0x09
     f56:	4a 87       	std	Y+10, r20	; 0x0a
     f58:	5b 87       	std	Y+11, r21	; 0x0b
     f5a:	6c 87       	std	Y+12, r22	; 0x0c
     f5c:	7d 87       	std	Y+13, r23	; 0x0d
     f5e:	8e 87       	std	Y+14, r24	; 0x0e
     f60:	9f 87       	std	Y+15, r25	; 0x0f
     f62:	f4 01       	movw	r30, r8
     f64:	35 89       	ldd	r19, Z+21	; 0x15
     f66:	24 89       	ldd	r18, Z+20	; 0x14
     f68:	93 2f       	mov	r25, r19
     f6a:	99 0f       	add	r25, r25
     f6c:	99 0b       	sbc	r25, r25
     f6e:	a8 8c       	ldd	r10, Y+24	; 0x18
     f70:	b9 8c       	ldd	r11, Y+25	; 0x19
     f72:	ca 8c       	ldd	r12, Y+26	; 0x1a
     f74:	db 8c       	ldd	r13, Y+27	; 0x1b
     f76:	ec 8c       	ldd	r14, Y+28	; 0x1c
     f78:	fd 8c       	ldd	r15, Y+29	; 0x1d
     f7a:	0e 8d       	ldd	r16, Y+30	; 0x1e
     f7c:	1f 8d       	ldd	r17, Y+31	; 0x1f
     f7e:	49 2f       	mov	r20, r25
     f80:	59 2f       	mov	r21, r25
     f82:	69 2f       	mov	r22, r25
     f84:	79 2f       	mov	r23, r25
     f86:	89 2f       	mov	r24, r25
     f88:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
     f8c:	03 e1       	ldi	r16, 0x13	; 19
     f8e:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
     f92:	28 8b       	std	Y+16, r18	; 0x10
     f94:	39 8b       	std	Y+17, r19	; 0x11
     f96:	4a 8b       	std	Y+18, r20	; 0x12
     f98:	5b 8b       	std	Y+19, r21	; 0x13
     f9a:	6c 8b       	std	Y+20, r22	; 0x14
     f9c:	7d 8b       	std	Y+21, r23	; 0x15
     f9e:	8e 8b       	std	Y+22, r24	; 0x16
     fa0:	9f 8b       	std	Y+23, r25	; 0x17
     fa2:	28 8d       	ldd	r18, Y+24	; 0x18
     fa4:	39 8d       	ldd	r19, Y+25	; 0x19
     fa6:	4a 8d       	ldd	r20, Y+26	; 0x1a
     fa8:	5b 8d       	ldd	r21, Y+27	; 0x1b
     faa:	6c 8d       	ldd	r22, Y+28	; 0x1c
     fac:	7d 8d       	ldd	r23, Y+29	; 0x1d
     fae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fb2:	a8 84       	ldd	r10, Y+8	; 0x08
     fb4:	b9 84       	ldd	r11, Y+9	; 0x09
     fb6:	ca 84       	ldd	r12, Y+10	; 0x0a
     fb8:	db 84       	ldd	r13, Y+11	; 0x0b
     fba:	ec 84       	ldd	r14, Y+12	; 0x0c
     fbc:	fd 84       	ldd	r15, Y+13	; 0x0d
     fbe:	0e 85       	ldd	r16, Y+14	; 0x0e
     fc0:	1f 85       	ldd	r17, Y+15	; 0x0f
     fc2:	0e 94 37 18 	call	0x306e	; 0x306e <__adddi3>
     fc6:	a8 88       	ldd	r10, Y+16	; 0x10
     fc8:	b9 88       	ldd	r11, Y+17	; 0x11
     fca:	ca 88       	ldd	r12, Y+18	; 0x12
     fcc:	db 88       	ldd	r13, Y+19	; 0x13
     fce:	ec 88       	ldd	r14, Y+20	; 0x14
     fd0:	fd 88       	ldd	r15, Y+21	; 0x15
     fd2:	0e 89       	ldd	r16, Y+22	; 0x16
     fd4:	1f 89       	ldd	r17, Y+23	; 0x17
     fd6:	0e 94 37 18 	call	0x306e	; 0x306e <__adddi3>
     fda:	08 e0       	ldi	r16, 0x08	; 8
     fdc:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
     fe0:	42 2e       	mov	r4, r18
     fe2:	53 2e       	mov	r5, r19
     fe4:	64 2e       	mov	r6, r20
     fe6:	75 2e       	mov	r7, r21
     fe8:	b6 2f       	mov	r27, r22
     fea:	a7 2f       	mov	r26, r23
     fec:	38 2e       	mov	r3, r24
     fee:	29 2e       	mov	r2, r25
     ff0:	f4 01       	movw	r30, r8
     ff2:	33 89       	ldd	r19, Z+19	; 0x13
     ff4:	22 89       	ldd	r18, Z+18	; 0x12
     ff6:	93 2f       	mov	r25, r19
     ff8:	99 0f       	add	r25, r25
     ffa:	99 0b       	sbc	r25, r25
     ffc:	49 2f       	mov	r20, r25
     ffe:	59 2f       	mov	r21, r25
    1000:	69 2f       	mov	r22, r25
    1002:	79 2f       	mov	r23, r25
    1004:	89 2f       	mov	r24, r25
    1006:	04 e0       	ldi	r16, 0x04	; 4
    1008:	0e 94 00 18 	call	0x3000	; 0x3000 <__ashldi3>
    100c:	a2 2e       	mov	r10, r18
    100e:	b3 2e       	mov	r11, r19
    1010:	c4 2e       	mov	r12, r20
    1012:	d5 2e       	mov	r13, r21
    1014:	e6 2e       	mov	r14, r22
    1016:	f7 2e       	mov	r15, r23
    1018:	08 2f       	mov	r16, r24
    101a:	19 2f       	mov	r17, r25
    101c:	24 2d       	mov	r18, r4
    101e:	35 2d       	mov	r19, r5
    1020:	46 2d       	mov	r20, r6
    1022:	57 2d       	mov	r21, r7
    1024:	6b 2f       	mov	r22, r27
    1026:	7a 2f       	mov	r23, r26
    1028:	83 2d       	mov	r24, r3
    102a:	92 2d       	mov	r25, r2
    102c:	0e 94 37 18 	call	0x306e	; 0x306e <__adddi3>
    1030:	28 8f       	std	Y+24, r18	; 0x18
    1032:	39 8f       	std	Y+25, r19	; 0x19
    1034:	4a 8f       	std	Y+26, r20	; 0x1a
    1036:	5b 8f       	std	Y+27, r21	; 0x1b
    1038:	6c 8f       	std	Y+28, r22	; 0x1c
    103a:	7d 8f       	std	Y+29, r23	; 0x1d
    103c:	8e 8f       	std	Y+30, r24	; 0x1e
    103e:	9f 8f       	std	Y+31, r25	; 0x1f
    1040:	58 8d       	ldd	r21, Y+24	; 0x18
    1042:	49 8d       	ldd	r20, Y+25	; 0x19
    1044:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1046:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1048:	8c 8d       	ldd	r24, Y+28	; 0x1c
    104a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    104c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    104e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1050:	65 2f       	mov	r22, r21
    1052:	74 2f       	mov	r23, r20
    1054:	83 2f       	mov	r24, r19
    1056:	92 2f       	mov	r25, r18
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <parse_press_bme280+0x58a>
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a8 96       	adiw	r28, 0x28	; 40
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	bf 90       	pop	r11
    1080:	af 90       	pop	r10
    1082:	9f 90       	pop	r9
    1084:	8f 90       	pop	r8
    1086:	7f 90       	pop	r7
    1088:	6f 90       	pop	r6
    108a:	5f 90       	pop	r5
    108c:	4f 90       	pop	r4
    108e:	3f 90       	pop	r3
    1090:	2f 90       	pop	r2
    1092:	08 95       	ret

00001094 <parse_hum_bme280>:
    1094:	2f 92       	push	r2
    1096:	3f 92       	push	r3
    1098:	4f 92       	push	r4
    109a:	5f 92       	push	r5
    109c:	6f 92       	push	r6
    109e:	7f 92       	push	r7
    10a0:	8f 92       	push	r8
    10a2:	9f 92       	push	r9
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	6b 97       	sbiw	r28, 0x1b	; 27
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	4c 01       	movw	r8, r24
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    10cc:	19 82       	std	Y+1, r1	; 0x01
    10ce:	42 e0       	ldi	r20, 0x02	; 2
    10d0:	be 01       	movw	r22, r28
    10d2:	6f 5f       	subi	r22, 0xFF	; 255
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	8d ef       	ldi	r24, 0xFD	; 253
    10d8:	0e 94 b9 03 	call	0x772	; 0x772 <read_raw_data_bme280>
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	98 2f       	mov	r25, r24
    10e2:	88 27       	eor	r24, r24
    10e4:	2a 81       	ldd	r18, Y+2	; 0x02
    10e6:	82 2b       	or	r24, r18
    10e8:	a0 e0       	ldi	r26, 0x00	; 0
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	f4 01       	movw	r30, r8
    10ee:	41 a0       	ldd	r4, Z+33	; 0x21
    10f0:	52 a0       	ldd	r5, Z+34	; 0x22
    10f2:	63 a0       	ldd	r6, Z+35	; 0x23
    10f4:	74 a0       	ldd	r7, Z+36	; 0x24
    10f6:	fc e2       	ldi	r31, 0x2C	; 44
    10f8:	5f 1a       	sub	r5, r31
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	6f 0a       	sbc	r6, r31
    10fe:	71 08       	sbc	r7, r1
    1100:	93 01       	movw	r18, r6
    1102:	82 01       	movw	r16, r4
    1104:	33 0f       	add	r19, r19
    1106:	00 0b       	sbc	r16, r16
    1108:	10 2f       	mov	r17, r16
    110a:	98 01       	movw	r18, r16
    110c:	0b 83       	std	Y+3, r16	; 0x03
    110e:	1c 83       	std	Y+4, r17	; 0x04
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	3e 83       	std	Y+6, r19	; 0x06
    1114:	07 2e       	mov	r0, r23
    1116:	7e e0       	ldi	r23, 0x0E	; 14
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	aa 1f       	adc	r26, r26
    111e:	bb 1f       	adc	r27, r27
    1120:	7a 95       	dec	r23
    1122:	d1 f7       	brne	.-12     	; 0x1118 <parse_hum_bme280+0x84>
    1124:	70 2d       	mov	r23, r0
    1126:	f4 01       	movw	r30, r8
    1128:	44 8d       	ldd	r20, Z+28	; 0x1c
    112a:	55 8d       	ldd	r21, Z+29	; 0x1d
    112c:	05 2e       	mov	r0, r21
    112e:	00 0c       	add	r0, r0
    1130:	66 0b       	sbc	r22, r22
    1132:	77 0b       	sbc	r23, r23
    1134:	03 2e       	mov	r0, r19
    1136:	34 e1       	ldi	r19, 0x14	; 20
    1138:	44 0f       	add	r20, r20
    113a:	55 1f       	adc	r21, r21
    113c:	66 1f       	adc	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	3a 95       	dec	r19
    1142:	d1 f7       	brne	.-12     	; 0x1138 <parse_hum_bme280+0xa4>
    1144:	30 2d       	mov	r19, r0
    1146:	8c 01       	movw	r16, r24
    1148:	9d 01       	movw	r18, r26
    114a:	04 1b       	sub	r16, r20
    114c:	15 0b       	sbc	r17, r21
    114e:	26 0b       	sbc	r18, r22
    1150:	37 0b       	sbc	r19, r23
    1152:	0f 83       	std	Y+7, r16	; 0x07
    1154:	18 87       	std	Y+8, r17	; 0x08
    1156:	29 87       	std	Y+9, r18	; 0x09
    1158:	3a 87       	std	Y+10, r19	; 0x0a
    115a:	37 8d       	ldd	r19, Z+31	; 0x1f
    115c:	26 8d       	ldd	r18, Z+30	; 0x1e
    115e:	93 2f       	mov	r25, r19
    1160:	99 0f       	add	r25, r25
    1162:	99 0b       	sbc	r25, r25
    1164:	a4 2c       	mov	r10, r4
    1166:	b5 2c       	mov	r11, r5
    1168:	c6 2c       	mov	r12, r6
    116a:	d7 2c       	mov	r13, r7
    116c:	eb 80       	ldd	r14, Y+3	; 0x03
    116e:	fe 2c       	mov	r15, r14
    1170:	0e 2d       	mov	r16, r14
    1172:	1e 2d       	mov	r17, r14
    1174:	49 2f       	mov	r20, r25
    1176:	59 2f       	mov	r21, r25
    1178:	69 2f       	mov	r22, r25
    117a:	79 2f       	mov	r23, r25
    117c:	89 2f       	mov	r24, r25
    117e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    1182:	a2 2e       	mov	r10, r18
    1184:	b3 2e       	mov	r11, r19
    1186:	c4 2e       	mov	r12, r20
    1188:	d5 2e       	mov	r13, r21
    118a:	e6 2e       	mov	r14, r22
    118c:	f7 2e       	mov	r15, r23
    118e:	08 2f       	mov	r16, r24
    1190:	19 2f       	mov	r17, r25
    1192:	4f 81       	ldd	r20, Y+7	; 0x07
    1194:	58 85       	ldd	r21, Y+8	; 0x08
    1196:	69 85       	ldd	r22, Y+9	; 0x09
    1198:	7a 85       	ldd	r23, Y+10	; 0x0a
    119a:	9a 01       	movw	r18, r20
    119c:	ab 01       	movw	r20, r22
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	cb 01       	movw	r24, r22
    11a4:	38 87       	std	Y+8, r19	; 0x08
    11a6:	49 87       	std	Y+9, r20	; 0x09
    11a8:	5a 87       	std	Y+10, r21	; 0x0a
    11aa:	6b 87       	std	Y+11, r22	; 0x0b
    11ac:	7c 87       	std	Y+12, r23	; 0x0c
    11ae:	8d 87       	std	Y+13, r24	; 0x0d
    11b0:	9e 87       	std	Y+14, r25	; 0x0e
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 40 18 	call	0x3080	; 0x3080 <__subdi3>
    11be:	30 5c       	subi	r19, 0xC0	; 192
    11c0:	4f 4f       	sbci	r20, 0xFF	; 255
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	6f 4f       	sbci	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ca:	9f 4f       	sbci	r25, 0xFF	; 255
    11cc:	0f e0       	ldi	r16, 0x0F	; 15
    11ce:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    11d2:	2f 83       	std	Y+7, r18	; 0x07
    11d4:	3f 87       	std	Y+15, r19	; 0x0f
    11d6:	48 8b       	std	Y+16, r20	; 0x10
    11d8:	59 8b       	std	Y+17, r21	; 0x11
    11da:	6a 8b       	std	Y+18, r22	; 0x12
    11dc:	7b 8b       	std	Y+19, r23	; 0x13
    11de:	8c 8b       	std	Y+20, r24	; 0x14
    11e0:	9d 8b       	std	Y+21, r25	; 0x15
    11e2:	d4 01       	movw	r26, r8
    11e4:	90 96       	adiw	r26, 0x20	; 32
    11e6:	2c 91       	ld	r18, X
    11e8:	92 2f       	mov	r25, r18
    11ea:	99 0f       	add	r25, r25
    11ec:	99 0b       	sbc	r25, r25
    11ee:	a4 2c       	mov	r10, r4
    11f0:	b5 2c       	mov	r11, r5
    11f2:	c6 2c       	mov	r12, r6
    11f4:	d7 2c       	mov	r13, r7
    11f6:	eb 80       	ldd	r14, Y+3	; 0x03
    11f8:	fe 2c       	mov	r15, r14
    11fa:	0e 2d       	mov	r16, r14
    11fc:	1e 2d       	mov	r17, r14
    11fe:	39 2f       	mov	r19, r25
    1200:	49 2f       	mov	r20, r25
    1202:	59 2f       	mov	r21, r25
    1204:	69 2f       	mov	r22, r25
    1206:	79 2f       	mov	r23, r25
    1208:	89 2f       	mov	r24, r25
    120a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    120e:	0a e0       	ldi	r16, 0x0A	; 10
    1210:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    1214:	22 2e       	mov	r2, r18
    1216:	33 2e       	mov	r3, r19
    1218:	4e 8b       	std	Y+22, r20	; 0x16
    121a:	5f 8b       	std	Y+23, r21	; 0x17
    121c:	68 8f       	std	Y+24, r22	; 0x18
    121e:	79 8f       	std	Y+25, r23	; 0x19
    1220:	8a 8f       	std	Y+26, r24	; 0x1a
    1222:	9b 8f       	std	Y+27, r25	; 0x1b
    1224:	f4 01       	movw	r30, r8
    1226:	23 8d       	ldd	r18, Z+27	; 0x1b
    1228:	fe 2c       	mov	r15, r14
    122a:	0e 2d       	mov	r16, r14
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    123e:	0b e0       	ldi	r16, 0x0B	; 11
    1240:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    1244:	30 58       	subi	r19, 0x80	; 128
    1246:	4f 4f       	sbci	r20, 0xFF	; 255
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
    124a:	6f 4f       	sbci	r22, 0xFF	; 255
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	8f 4f       	sbci	r24, 0xFF	; 255
    1250:	9f 4f       	sbci	r25, 0xFF	; 255
    1252:	a2 2e       	mov	r10, r18
    1254:	b3 2e       	mov	r11, r19
    1256:	c4 2e       	mov	r12, r20
    1258:	d5 2e       	mov	r13, r21
    125a:	e6 2e       	mov	r14, r22
    125c:	f7 2e       	mov	r15, r23
    125e:	08 2f       	mov	r16, r24
    1260:	19 2f       	mov	r17, r25
    1262:	22 2d       	mov	r18, r2
    1264:	33 2d       	mov	r19, r3
    1266:	4e 89       	ldd	r20, Y+22	; 0x16
    1268:	5f 89       	ldd	r21, Y+23	; 0x17
    126a:	68 8d       	ldd	r22, Y+24	; 0x18
    126c:	79 8d       	ldd	r23, Y+25	; 0x19
    126e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1270:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1272:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    1276:	0a e0       	ldi	r16, 0x0A	; 10
    1278:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    127c:	40 5e       	subi	r20, 0xE0	; 224
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	6f 4f       	sbci	r22, 0xFF	; 255
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	8f 4f       	sbci	r24, 0xFF	; 255
    1286:	9f 4f       	sbci	r25, 0xFF	; 255
    1288:	a2 2e       	mov	r10, r18
    128a:	b3 2e       	mov	r11, r19
    128c:	19 2f       	mov	r17, r25
    128e:	d4 01       	movw	r26, r8
    1290:	5a 96       	adiw	r26, 0x1a	; 26
    1292:	3c 91       	ld	r19, X
    1294:	5a 97       	sbiw	r26, 0x1a	; 26
    1296:	59 96       	adiw	r26, 0x19	; 25
    1298:	2c 91       	ld	r18, X
    129a:	93 2f       	mov	r25, r19
    129c:	99 0f       	add	r25, r25
    129e:	99 0b       	sbc	r25, r25
    12a0:	c4 2e       	mov	r12, r20
    12a2:	d5 2e       	mov	r13, r21
    12a4:	e6 2e       	mov	r14, r22
    12a6:	f7 2e       	mov	r15, r23
    12a8:	08 2f       	mov	r16, r24
    12aa:	49 2f       	mov	r20, r25
    12ac:	59 2f       	mov	r21, r25
    12ae:	69 2f       	mov	r22, r25
    12b0:	79 2f       	mov	r23, r25
    12b2:	89 2f       	mov	r24, r25
    12b4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    12b8:	30 5e       	subi	r19, 0xE0	; 224
    12ba:	4f 4f       	sbci	r20, 0xFF	; 255
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	6f 4f       	sbci	r22, 0xFF	; 255
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	0e e0       	ldi	r16, 0x0E	; 14
    12c8:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    12cc:	a2 2e       	mov	r10, r18
    12ce:	b3 2e       	mov	r11, r19
    12d0:	c4 2e       	mov	r12, r20
    12d2:	d5 2e       	mov	r13, r21
    12d4:	e6 2e       	mov	r14, r22
    12d6:	f7 2e       	mov	r15, r23
    12d8:	08 2f       	mov	r16, r24
    12da:	19 2f       	mov	r17, r25
    12dc:	2f 81       	ldd	r18, Y+7	; 0x07
    12de:	3f 85       	ldd	r19, Y+15	; 0x0f
    12e0:	48 89       	ldd	r20, Y+16	; 0x10
    12e2:	59 89       	ldd	r21, Y+17	; 0x11
    12e4:	6a 89       	ldd	r22, Y+18	; 0x12
    12e6:	7b 89       	ldd	r23, Y+19	; 0x13
    12e8:	8c 89       	ldd	r24, Y+20	; 0x14
    12ea:	9d 89       	ldd	r25, Y+21	; 0x15
    12ec:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    12f0:	22 2e       	mov	r2, r18
    12f2:	33 2e       	mov	r3, r19
    12f4:	44 2e       	mov	r4, r20
    12f6:	55 2e       	mov	r5, r21
    12f8:	66 2e       	mov	r6, r22
    12fa:	77 2e       	mov	r7, r23
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	9f 83       	std	Y+7, r25	; 0x07
    1300:	0f e0       	ldi	r16, 0x0F	; 15
    1302:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    1306:	a2 2e       	mov	r10, r18
    1308:	b3 2e       	mov	r11, r19
    130a:	c4 2e       	mov	r12, r20
    130c:	d5 2e       	mov	r13, r21
    130e:	e6 2e       	mov	r14, r22
    1310:	f7 2e       	mov	r15, r23
    1312:	08 2f       	mov	r16, r24
    1314:	19 2f       	mov	r17, r25
    1316:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    131a:	07 e0       	ldi	r16, 0x07	; 7
    131c:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    1320:	a2 2e       	mov	r10, r18
    1322:	19 2f       	mov	r17, r25
    1324:	f4 01       	movw	r30, r8
    1326:	20 8d       	ldd	r18, Z+24	; 0x18
    1328:	92 2f       	mov	r25, r18
    132a:	99 0f       	add	r25, r25
    132c:	99 0b       	sbc	r25, r25
    132e:	b3 2e       	mov	r11, r19
    1330:	c4 2e       	mov	r12, r20
    1332:	d5 2e       	mov	r13, r21
    1334:	e6 2e       	mov	r14, r22
    1336:	f7 2e       	mov	r15, r23
    1338:	08 2f       	mov	r16, r24
    133a:	39 2f       	mov	r19, r25
    133c:	49 2f       	mov	r20, r25
    133e:	59 2f       	mov	r21, r25
    1340:	69 2f       	mov	r22, r25
    1342:	79 2f       	mov	r23, r25
    1344:	89 2f       	mov	r24, r25
    1346:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muldi3>
    134a:	04 e0       	ldi	r16, 0x04	; 4
    134c:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    1350:	a2 2e       	mov	r10, r18
    1352:	b3 2e       	mov	r11, r19
    1354:	c4 2e       	mov	r12, r20
    1356:	d5 2e       	mov	r13, r21
    1358:	e6 2e       	mov	r14, r22
    135a:	f7 2e       	mov	r15, r23
    135c:	08 2f       	mov	r16, r24
    135e:	19 2f       	mov	r17, r25
    1360:	22 2d       	mov	r18, r2
    1362:	33 2d       	mov	r19, r3
    1364:	44 2d       	mov	r20, r4
    1366:	55 2d       	mov	r21, r5
    1368:	66 2d       	mov	r22, r6
    136a:	77 2d       	mov	r23, r7
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9f 81       	ldd	r25, Y+7	; 0x07
    1370:	0e 94 40 18 	call	0x3080	; 0x3080 <__subdi3>
    1374:	d2 2e       	mov	r13, r18
    1376:	e3 2e       	mov	r14, r19
    1378:	f4 2e       	mov	r15, r20
    137a:	05 2f       	mov	r16, r21
    137c:	16 2f       	mov	r17, r22
    137e:	b7 2f       	mov	r27, r23
    1380:	f8 2f       	mov	r31, r24
    1382:	e9 2f       	mov	r30, r25
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	0e 94 49 18 	call	0x3092	; 0x3092 <__cmpdi2_s8>
    138a:	44 f4       	brge	.+16     	; 0x139c <parse_hum_bme280+0x308>
    138c:	d1 2c       	mov	r13, r1
    138e:	e1 2c       	mov	r14, r1
    1390:	f1 2c       	mov	r15, r1
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	e0 e0       	ldi	r30, 0x00	; 0
    139c:	6d 2c       	mov	r6, r13
    139e:	7e 2c       	mov	r7, r14
    13a0:	8f 2c       	mov	r8, r15
    13a2:	90 2e       	mov	r9, r16
    13a4:	a1 2e       	mov	r10, r17
    13a6:	bb 2e       	mov	r11, r27
    13a8:	cf 2e       	mov	r12, r31
    13aa:	ae 2f       	mov	r26, r30
    13ac:	2d 2d       	mov	r18, r13
    13ae:	3e 2d       	mov	r19, r14
    13b0:	4f 2d       	mov	r20, r15
    13b2:	50 2f       	mov	r21, r16
    13b4:	61 2f       	mov	r22, r17
    13b6:	7b 2f       	mov	r23, r27
    13b8:	8f 2f       	mov	r24, r31
    13ba:	9e 2f       	mov	r25, r30
    13bc:	21 15       	cp	r18, r1
    13be:	31 05       	cpc	r19, r1
    13c0:	41 05       	cpc	r20, r1
    13c2:	59 41       	sbci	r21, 0x19	; 25
    13c4:	61 05       	cpc	r22, r1
    13c6:	71 05       	cpc	r23, r1
    13c8:	81 05       	cpc	r24, r1
    13ca:	91 05       	cpc	r25, r1
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <parse_hum_bme280+0x352>
    13ce:	5c f0       	brlt	.+22     	; 0x13e6 <parse_hum_bme280+0x352>
    13d0:	61 2c       	mov	r6, r1
    13d2:	71 2c       	mov	r7, r1
    13d4:	81 2c       	mov	r8, r1
    13d6:	0f 2e       	mov	r0, r31
    13d8:	f9 e1       	ldi	r31, 0x19	; 25
    13da:	9f 2e       	mov	r9, r31
    13dc:	f0 2d       	mov	r31, r0
    13de:	a1 2c       	mov	r10, r1
    13e0:	b1 2c       	mov	r11, r1
    13e2:	c1 2c       	mov	r12, r1
    13e4:	a0 e0       	ldi	r26, 0x00	; 0
    13e6:	26 2d       	mov	r18, r6
    13e8:	37 2d       	mov	r19, r7
    13ea:	48 2d       	mov	r20, r8
    13ec:	59 2d       	mov	r21, r9
    13ee:	6a 2d       	mov	r22, r10
    13f0:	7b 2d       	mov	r23, r11
    13f2:	8c 2d       	mov	r24, r12
    13f4:	9a 2f       	mov	r25, r26
    13f6:	0c e0       	ldi	r16, 0x0C	; 12
    13f8:	0e 94 19 18 	call	0x3032	; 0x3032 <__ashrdi3>
    13fc:	62 2f       	mov	r22, r18
    13fe:	73 2f       	mov	r23, r19
    1400:	84 2f       	mov	r24, r20
    1402:	95 2f       	mov	r25, r21
    1404:	6b 96       	adiw	r28, 0x1b	; 27
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	9f 90       	pop	r9
    1426:	8f 90       	pop	r8
    1428:	7f 90       	pop	r7
    142a:	6f 90       	pop	r6
    142c:	5f 90       	pop	r5
    142e:	4f 90       	pop	r4
    1430:	3f 90       	pop	r3
    1432:	2f 90       	pop	r2
    1434:	08 95       	ret

00001436 <update_bme280>:

//заводим любой таймер, настраиваем на нужную частоту прерываний и взводим флаг обновления данных в прерывании
//конкретно здесь используется прерывание таймера 0 по каналу А, которое обслуживает энкодер и кнопку
void update_bme280(void){
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	64 97       	sbiw	r28, 0x14	; 20
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
	char string[20];
	if(update_bme280_flag){
    145a:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <update_bme280_flag>
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <update_bme280+0x2e>
    1462:	87 c0       	rjmp	.+270    	; 0x1572 <update_bme280+0x13c>
		sprintf(string,"temp        %0.1fC",(float)parse_temp_bme280(&comp_bme280)/100);
    1464:	8b e4       	ldi	r24, 0x4B	; 75
    1466:	95 e0       	ldi	r25, 0x05	; 5
    1468:	0e 94 a3 04 	call	0x946	; 0x946 <parse_temp_bme280>
    146c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__floatsisf>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	48 ec       	ldi	r20, 0xC8	; 200
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	0e 94 bf 14 	call	0x297e	; 0x297e <__divsf3>
    147c:	9f 93       	push	r25
    147e:	8f 93       	push	r24
    1480:	7f 93       	push	r23
    1482:	6f 93       	push	r22
    1484:	8d ee       	ldi	r24, 0xED	; 237
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	9f 93       	push	r25
    148a:	8f 93       	push	r24
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	5c 01       	movw	r10, r24
    1492:	9f 93       	push	r25
    1494:	8f 93       	push	r24
    1496:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
		draw_string(0,50,string,0,BACKGROUND_COLOR,CYAN,TinyFont);
    149a:	0f 2e       	mov	r0, r31
    149c:	fa e7       	ldi	r31, 0x7A	; 122
    149e:	cf 2e       	mov	r12, r31
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	df 2e       	mov	r13, r31
    14a4:	f0 2d       	mov	r31, r0
    14a6:	0f 2e       	mov	r0, r31
    14a8:	ee 24       	eor	r14, r14
    14aa:	ea 94       	dec	r14
    14ac:	ff e7       	ldi	r31, 0x7F	; 127
    14ae:	ff 2e       	mov	r15, r31
    14b0:	f0 2d       	mov	r31, r0
    14b2:	00 e0       	ldi	r16, 0x00	; 0
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	a5 01       	movw	r20, r10
    14ba:	62 e3       	ldi	r22, 0x32	; 50
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
		sprintf(string,"hum         %0.1f%%",(float)parse_hum_bme280(&comp_bme280)/1024);
    14c6:	8b e4       	ldi	r24, 0x4B	; 75
    14c8:	95 e0       	ldi	r25, 0x05	; 5
    14ca:	0e 94 4a 08 	call	0x1094	; 0x1094 <parse_hum_bme280>
    14ce:	0e 94 67 15 	call	0x2ace	; 0x2ace <__floatunsisf>
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	5a e3       	ldi	r21, 0x3A	; 58
    14da:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__mulsf3>
    14de:	9f 93       	push	r25
    14e0:	8f 93       	push	r24
    14e2:	7f 93       	push	r23
    14e4:	6f 93       	push	r22
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	9f 93       	push	r25
    14ec:	8f 93       	push	r24
    14ee:	bf 92       	push	r11
    14f0:	af 92       	push	r10
    14f2:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
		draw_string(0,60,string,0,BACKGROUND_COLOR,RED,TinyFont);
    14f6:	0f 2e       	mov	r0, r31
    14f8:	e1 2c       	mov	r14, r1
    14fa:	f8 ef       	ldi	r31, 0xF8	; 248
    14fc:	ff 2e       	mov	r15, r31
    14fe:	f0 2d       	mov	r31, r0
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	a5 01       	movw	r20, r10
    1504:	6c e3       	ldi	r22, 0x3C	; 60
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
		sprintf(string,"press       %umm",(uint16_t)(parse_press_bme280(&comp_bme280)/256/133.3));
    1510:	8b e4       	ldi	r24, 0x4B	; 75
    1512:	95 e0       	ldi	r25, 0x05	; 5
    1514:	0e 94 6c 05 	call	0xad8	; 0xad8 <parse_press_bme280>
    1518:	67 2f       	mov	r22, r23
    151a:	78 2f       	mov	r23, r24
    151c:	89 2f       	mov	r24, r25
    151e:	99 27       	eor	r25, r25
    1520:	0e 94 67 15 	call	0x2ace	; 0x2ace <__floatunsisf>
    1524:	2d ec       	ldi	r18, 0xCD	; 205
    1526:	3c e4       	ldi	r19, 0x4C	; 76
    1528:	45 e0       	ldi	r20, 0x05	; 5
    152a:	53 e4       	ldi	r21, 0x43	; 67
    152c:	0e 94 bf 14 	call	0x297e	; 0x297e <__divsf3>
    1530:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__fixunssfsi>
    1534:	7f 93       	push	r23
    1536:	6f 93       	push	r22
    1538:	84 e1       	ldi	r24, 0x14	; 20
    153a:	92 e0       	ldi	r25, 0x02	; 2
    153c:	9f 93       	push	r25
    153e:	8f 93       	push	r24
    1540:	bf 92       	push	r11
    1542:	af 92       	push	r10
    1544:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
		draw_string(0,70,string,0,BACKGROUND_COLOR,YELLOW,TinyFont);
    1548:	0f 2e       	mov	r0, r31
    154a:	f0 ee       	ldi	r31, 0xE0	; 224
    154c:	ef 2e       	mov	r14, r31
    154e:	ff 24       	eor	r15, r15
    1550:	fa 94       	dec	r15
    1552:	f0 2d       	mov	r31, r0
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	a5 01       	movw	r20, r10
    1558:	66 e4       	ldi	r22, 0x46	; 70
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
		update_bme280_flag=0;
    1564:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <update_bme280_flag>
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
	}
}
    1572:	64 96       	adiw	r28, 0x14	; 20
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	bf 90       	pop	r11
    1590:	af 90       	pop	r10
    1592:	08 95       	ret

00001594 <enc_ports_init>:
volatile uint8_t	adc_conv=0;  
volatile uint8_t	update_bme280_flag=0;                                                           //переменная, которую будем юзать для всяких отсчетов


 void enc_ports_init(void){
	 CLEAR_BIT(ENCODER_DDR,(1<<ENC_CLK)|(1<<ENC_DT)|(1<<ENC_BUTTON));								//на вход ножки энкодера и кнопка энкодера
    1594:	8a b1       	in	r24, 0x0a	; 10
    1596:	83 7e       	andi	r24, 0xE3	; 227
    1598:	8a b9       	out	0x0a, r24	; 10
	 SET_BIT(ENCODER_PORT,(1<<ENC_BUTTON));															//подтяжка энкодера и кнопки энкодера
    159a:	8b b1       	in	r24, 0x0b	; 11
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	8b b9       	out	0x0b, r24	; 11
	 
	 CLEAR_BIT(BUTTON_DDR,(1<<BUTTON));
    15a0:	8a b1       	in	r24, 0x0a	; 10
    15a2:	8f 77       	andi	r24, 0x7F	; 127
    15a4:	8a b9       	out	0x0a, r24	; 10
	 SET_BIT(BUTTON_PORT,(1<<BUTTON));
    15a6:	8b b1       	in	r24, 0x0b	; 11
    15a8:	80 68       	ori	r24, 0x80	; 128
    15aa:	8b b9       	out	0x0b, r24	; 11
													
	 SET_BIT(LED1_DDR,(1<<LED1));																	//ножка светодиода на выход 
    15ac:	8a b1       	in	r24, 0x0a	; 10
    15ae:	82 60       	ori	r24, 0x02	; 2
    15b0:	8a b9       	out	0x0a, r24	; 10
	 LED1_ON;																						//логический нуль на ножке светодиода
    15b2:	8b b1       	in	r24, 0x0b	; 11
    15b4:	82 60       	ori	r24, 0x02	; 2
    15b6:	8b b9       	out	0x0b, r24	; 11
	 
	 SET_BIT(LED0_DDR,(1<<LED0));																	//ножка светодиода на выход
    15b8:	8a b1       	in	r24, 0x0a	; 10
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	8a b9       	out	0x0a, r24	; 10
	 LED0_ON;																						//логический нуль на ножке светодиода
    15be:	8b b1       	in	r24, 0x0b	; 11
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	8b b9       	out	0x0b, r24	; 11
    15c4:	08 95       	ret

000015c6 <timer0_init>:
}

 /*инициализация канала А таймера 0*/
 void timer0_init(){ 
	 encoder_state|=(1<<ENC_DT)|(1<<ENC_CLK);
    15c6:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <encoder_state>
    15ca:	8c 60       	ori	r24, 0x0C	; 12
    15cc:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <encoder_state>
	 TCNT0=0;																						//на всякий случай пишем в счетный регистр 0
    15d0:	16 bc       	out	0x26, r1	; 38
	 SET_BIT(TCCR0A,(1<<WGM01));																	//сброс значения в  счетном регистре при совпадении со значением в регистре сравнения 
    15d2:	84 b5       	in	r24, 0x24	; 36
    15d4:	82 60       	ori	r24, 0x02	; 2
    15d6:	84 bd       	out	0x24, r24	; 36
	 SET_BIT(TCCR0B,(1<<CS02|1<<CS00));																		//делитель 1024; 16000000/1024=15625 тиков в секунду
    15d8:	85 b5       	in	r24, 0x25	; 37
    15da:	85 60       	ori	r24, 0x05	; 5
    15dc:	85 bd       	out	0x25, r24	; 37
	 OCR0A=61;																						// 15625/125=125, где 125 - частота опроса(возникновения прерывания при совпадении)
    15de:	8d e3       	ldi	r24, 0x3D	; 61
    15e0:	87 bd       	out	0x27, r24	; 39
	SET_BIT(TIMSK0,(1<<OCIE0A));																		//разрешаем прерывания при совпадении
    15e2:	ee e6       	ldi	r30, 0x6E	; 110
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	82 60       	ori	r24, 0x02	; 2
    15ea:	80 83       	st	Z, r24
    15ec:	08 95       	ret

000015ee <__vector_14>:
 }
 
 ISR(TIMER0_COMPA_vect){
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
	static uint8_t count_enc_but = 0;																//счетчики
    static uint8_t count_but = 0;
	newState=(ENCODER_PIN&encoder_state)>>2;
    15fc:	99 b1       	in	r25, 0x09	; 9
    15fe:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <encoder_state>
    1602:	89 23       	and	r24, r25
    1604:	86 95       	lsr	r24
    1606:	86 95       	lsr	r24
    1608:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <newState>
	if(newState!=oldState){
    160c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <newState>
    1610:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1614:	98 17       	cp	r25, r24
    1616:	09 f4       	brne	.+2      	; 0x161a <__vector_14+0x2c>
    1618:	59 c0       	rjmp	.+178    	; 0x16cc <__vector_14+0xde>
		switch(oldState){
    161a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	c9 f0       	breq	.+50     	; 0x1654 <__vector_14+0x66>
    1622:	28 f0       	brcs	.+10     	; 0x162e <__vector_14+0x40>
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	49 f1       	breq	.+82     	; 0x167a <__vector_14+0x8c>
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	d1 f1       	breq	.+116    	; 0x16a0 <__vector_14+0xb2>
    162c:	4b c0       	rjmp	.+150    	; 0x16c4 <__vector_14+0xd6>
			 case 0:
				if(newState == 2) upState++;
    162e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	29 f4       	brne	.+10     	; 0x1640 <__vector_14+0x52>
    1636:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <upState>
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <upState>
				if(newState == 1) downState++;
    1640:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	f1 f5       	brne	.+124    	; 0x16c4 <__vector_14+0xd6>
    1648:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <downState>
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <downState>
    1652:	38 c0       	rjmp	.+112    	; 0x16c4 <__vector_14+0xd6>
				break;
			 case 1:
				if(newState == 0) upState++;
    1654:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    1658:	81 11       	cpse	r24, r1
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <__vector_14+0x78>
    165c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <upState>
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <upState>
				if(newState == 3) downState++;
    1666:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    166a:	83 30       	cpi	r24, 0x03	; 3
    166c:	59 f5       	brne	.+86     	; 0x16c4 <__vector_14+0xd6>
    166e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <downState>
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <downState>
    1678:	25 c0       	rjmp	.+74     	; 0x16c4 <__vector_14+0xd6>
				break;
			 case 2:
				if(newState == 3) upState++;
    167a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	29 f4       	brne	.+10     	; 0x168c <__vector_14+0x9e>
    1682:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <upState>
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <upState>
				if(newState == 0) downState++;
    168c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    1690:	81 11       	cpse	r24, r1
    1692:	18 c0       	rjmp	.+48     	; 0x16c4 <__vector_14+0xd6>
    1694:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <downState>
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <downState>
    169e:	12 c0       	rjmp	.+36     	; 0x16c4 <__vector_14+0xd6>
				break;
			 case 3:
				if(newState == 1) upState++;
    16a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	29 f4       	brne	.+10     	; 0x16b2 <__vector_14+0xc4>
    16a8:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <upState>
    16ac:	8f 5f       	subi	r24, 0xFF	; 255
    16ae:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <upState>
				if(newState == 2) downState++;
    16b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <__vector_14+0xd6>
    16ba:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <downState>
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <downState>
				break;
			 
		 }
		 oldState=newState;
    16c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <newState>
    16c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	 }
	//обработка кнопки энкодера
	 if(!READ_BIT(ENCODER_PIN,(1<<ENC_BUTTON))){										
    16cc:	4c 99       	sbic	0x09, 4	; 9
    16ce:	07 c0       	rjmp	.+14     	; 0x16de <__vector_14+0xf0>
		if(count_enc_but < 255) {
    16d0:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <count_enc_but.1655>
    16d4:	8f 3f       	cpi	r24, 0xFF	; 255
    16d6:	19 f0       	breq	.+6      	; 0x16de <__vector_14+0xf0>
		 count_enc_but++;
    16d8:	8f 5f       	subi	r24, 0xFF	; 255
    16da:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <count_enc_but.1655>
		}
	}
	  if(count_enc_but>LONG_TIMEOUT ) {																//длинное нажатие
    16de:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <count_enc_but.1655>
    16e2:	87 39       	cpi	r24, 0x97	; 151
    16e4:	38 f0       	brcs	.+14     	; 0x16f4 <__vector_14+0x106>
		 if(READ_BIT(ENCODER_PIN,(1<<ENC_BUTTON))){
    16e6:	4c 9b       	sbis	0x09, 4	; 9
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <__vector_14+0x106>
			longpress_enc_but=1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <longpress_enc_but>
			 count_enc_but=0;
    16f0:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <count_enc_but.1655>
		 }
	  }
	  if(count_enc_but>0 && count_enc_but<LONG_TIMEOUT) {											//короткое нажатие
    16f4:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <count_enc_but.1655>
    16f8:	81 50       	subi	r24, 0x01	; 1
    16fa:	85 39       	cpi	r24, 0x95	; 149
    16fc:	38 f4       	brcc	.+14     	; 0x170c <__vector_14+0x11e>
		  if(READ_BIT(ENCODER_PIN,(1<<ENC_BUTTON))) {
    16fe:	4c 9b       	sbis	0x09, 4	; 9
    1700:	05 c0       	rjmp	.+10     	; 0x170c <__vector_14+0x11e>
			  shortpress_enc_but=1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <shortpress_enc_but>
			  count_enc_but=0;
    1708:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <count_enc_but.1655>
		  }
	  }
	 //обработка отдельной кнопки
	 if(!READ_BIT(BUTTON_PIN,(1<<BUTTON))){												
    170c:	4f 99       	sbic	0x09, 7	; 9
    170e:	07 c0       	rjmp	.+14     	; 0x171e <__vector_14+0x130>
		if(count_but < 255) {
    1710:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <count_but.1656>
    1714:	8f 3f       	cpi	r24, 0xFF	; 255
    1716:	19 f0       	breq	.+6      	; 0x171e <__vector_14+0x130>
		count_but++;
    1718:	8f 5f       	subi	r24, 0xFF	; 255
    171a:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <count_but.1656>
		}
	}
	if(count_but>0 && count_but< LONG_TIMEOUT) {									//короткое нажатие
    171e:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <count_but.1656>
    1722:	81 50       	subi	r24, 0x01	; 1
    1724:	85 39       	cpi	r24, 0x95	; 149
    1726:	38 f4       	brcc	.+14     	; 0x1736 <__vector_14+0x148>
		if(READ_BIT(BUTTON_PIN,(1<<BUTTON))) {
    1728:	4f 9b       	sbis	0x09, 7	; 9
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <__vector_14+0x148>
			shortpress_but=1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <shortpress_but>
			count_but=0;
    1732:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <count_but.1656>
		}
	}
	if(count_but >LONG_TIMEOUT ) {													 //длинное нажатие
    1736:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <count_but.1656>
    173a:	87 39       	cpi	r24, 0x97	; 151
    173c:	38 f0       	brcs	.+14     	; 0x174c <__vector_14+0x15e>
		if(READ_BIT(BUTTON_PIN,(1<<BUTTON))){
    173e:	4f 9b       	sbis	0x09, 7	; 9
    1740:	05 c0       	rjmp	.+10     	; 0x174c <__vector_14+0x15e>
			longpress_but=1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <longpress_but>
			count_but=0;
    1748:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <count_but.1656>
		}
	}
	adc_conv++;
    174c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <adc_conv>
    1750:	8f 5f       	subi	r24, 0xFF	; 255
    1752:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <adc_conv>
	//SET_BIT(ADCSRA,1<<ADIF);
	//ADCSRA |= (1 << ADSC);
	!adc_conv?adc_conv_flag=1:0;
    1756:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <adc_conv>
    175a:	81 11       	cpse	r24, r1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <__vector_14+0x176>
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <adc_conv_flag>
	adc_conv==125?update_bme280_flag=1:update_bme280_flag;
    1764:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <adc_conv>
    1768:	8d 37       	cpi	r24, 0x7D	; 125
    176a:	21 f4       	brne	.+8      	; 0x1774 <__vector_14+0x186>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <update_bme280_flag>
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <__vector_14+0x18a>
    1774:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <update_bme280_flag>
 }
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <i2c_init>:
#include "i2c.h"

uint8_t scanned_addr[10]={0,};

void i2c_init(void){
	WRITE_REG(TWBR, F_CPU/F_I2C/2 - 8);
    1786:	8c e0       	ldi	r24, 0x0C	; 12
    1788:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    178c:	08 95       	ret

0000178e <start_cond>:
}

uint8_t start_cond(void){
	uint8_t status=0;
	SET_BIT(TWCR,(1<<TWINT)|(1<<TWSTA)|(1<<TWEN));									//условие старта
    178e:	ec eb       	ldi	r30, 0xBC	; 188
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	84 6a       	ori	r24, 0xA4	; 164
    1796:	80 83       	st	Z, r24
	while(!READ_BIT(TWCR,(1<<TWINT))){												//ожидаем установки флага TWINT, что будет означать начало передачи
    1798:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    179c:	88 23       	and	r24, r24
    179e:	e4 f7       	brge	.-8      	; 0x1798 <start_cond+0xa>
		//	 while_delay=adc_conv;
		//	if(adc_conv-while_delay>30) return START_ERROR;                             //если во время ожидания превышено время, то выходим из функции(чтобы не висло)
	};
	status=TWSR&0xF8;
    17a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    17a4:	88 7f       	andi	r24, 0xF8	; 248
	if ((status == 0x08)|(status == 0x10))											//проверка битов старта или рестарта регистра статуса TWSR
    17a6:	21 e0       	ldi	r18, 0x01	; 1
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	09 f0       	breq	.+2      	; 0x17ae <start_cond+0x20>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	80 31       	cpi	r24, 0x10	; 16
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <start_cond+0x28>
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	92 2b       	or	r25, r18
    17b8:	11 f0       	breq	.+4      	; 0x17be <start_cond+0x30>
	return START_ERROR;
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	08 95       	ret
	else
	return SUCCESS;
    17be:	80 e0       	ldi	r24, 0x00	; 0
	
}
    17c0:	08 95       	ret

000017c2 <i2c_sendbyte>:

uint8_t i2c_sendbyte(uint8_t byte){
	WRITE_REG(TWDR,byte);
    17c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	WRITE_REG(TWCR,(1<<TWINT) | (1<<TWEN));											//запускаем передачу
    17c6:	84 e8       	ldi	r24, 0x84	; 132
    17c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!READ_BIT(TWCR,(1<<TWINT))){												//ожидаем установки флага TWINT, что будет означать начало передачи
    17cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    17d0:	88 23       	and	r24, r24
    17d2:	e4 f7       	brge	.-8      	; 0x17cc <i2c_sendbyte+0xa>
		//	 while_delay=adc_conv;
		//	if(adc_conv-while_delay>30) return SEND_ERROR;
	};
	uint8_t status = TWSR & 0xF8;													// Считывание кода статуса
    17d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    17d8:	88 7f       	andi	r24, 0xF8	; 248
	if ((status == 0x18) | (status == 0x28) | (status == 0x40))						// Проверка кода статуса (передача SLA+W, пакета данных, SLA+R)
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	88 31       	cpi	r24, 0x18	; 24
    17de:	09 f0       	breq	.+2      	; 0x17e2 <i2c_sendbyte+0x20>
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	88 32       	cpi	r24, 0x28	; 40
    17e6:	09 f0       	breq	.+2      	; 0x17ea <i2c_sendbyte+0x28>
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	92 2b       	or	r25, r18
    17ec:	21 e0       	ldi	r18, 0x01	; 1
    17ee:	80 34       	cpi	r24, 0x40	; 64
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <i2c_sendbyte+0x32>
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	91 11       	cpse	r25, r1
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <i2c_sendbyte+0x3a>
    17f8:	22 23       	and	r18, r18
    17fa:	11 f0       	breq	.+4      	; 0x1800 <i2c_sendbyte+0x3e>
	return ACK;
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	08 95       	ret
	else
	return NACK;
    1800:	85 e0       	ldi	r24, 0x05	; 5
}
    1802:	08 95       	ret

00001804 <stop_cond>:


void stop_cond(void){
	SET_BIT(TWCR,(1<<TWINT)|(1<<TWSTO)|(1<<TWEN));
    1804:	ec eb       	ldi	r30, 0xBC	; 188
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	84 69       	ori	r24, 0x94	; 148
    180c:	80 83       	st	Z, r24
    180e:	08 95       	ret

00001810 <i2c_readbyte>:
}

uint8_t i2c_readbyte(uint8_t nack_status){											//nack_status определяет, что будем отправлять слейву после приема байта-nack или ack
	if (nack_status == ACK)
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	31 f4       	brne	.+12     	; 0x1820 <i2c_readbyte+0x10>
	MODIFY_REG(TWCR,0xC4,(1<<TWINT|1<<TWEN|1<<TWEA));
    1814:	ec eb       	ldi	r30, 0xBC	; 188
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	84 6c       	ori	r24, 0xC4	; 196
    181c:	80 83       	st	Z, r24
    181e:	06 c0       	rjmp	.+12     	; 0x182c <i2c_readbyte+0x1c>
	else
	MODIFY_REG(TWCR,0xC4,(1<<TWINT|1<<TWEN));										//снюхиваем байт и передаем NACK(если забирая последний байт у слева не сказать ему NACK, то он продолжит удерживать линию и дальнейшая работа с шиной станет невозможна)
    1820:	ec eb       	ldi	r30, 0xBC	; 188
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8b 73       	andi	r24, 0x3B	; 59
    1828:	84 68       	ori	r24, 0x84	; 132
    182a:	80 83       	st	Z, r24
	while(!READ_BIT(TWCR,(1<<TWINT))){												//ожидаем установки флага TWINT, что будет означать начало передачи
    182c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1830:	88 23       	and	r24, r24
    1832:	e4 f7       	brge	.-8      	; 0x182c <i2c_readbyte+0x1c>
		//	while_delay=adc_conv;
		//	if(adc_conv-while_delay>30) return SEND_ERROR;                              //если во время ожидания превышено время, то выходим из функции
	};
	return TWDR;
    1834:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
    1838:	08 95       	ret

0000183a <main>:
uint8_t pwm_value=50;
uint8_t enc=0,prev_enc=0;

int main(void)
{
	enc_ports_init();
    183a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <enc_ports_init>
	timer0_init();
    183e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <timer0_init>
	st7735_ports_init();
    1842:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <st7735_ports_init>
	spi_master_init();
    1846:	0e 94 69 10 	call	0x20d2	; 0x20d2 <spi_master_init>
    st7735_init();
    184a:	0e 94 c3 10 	call	0x2186	; 0x2186 <st7735_init>
	background(BACKGROUND_COLOR);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <background>
	sei();
    1856:	78 94       	sei
	uart_init();
    1858:	0e 94 04 14 	call	0x2808	; 0x2808 <uart_init>
	ADC_init();
    185c:	0e 94 49 02 	call	0x492	; 0x492 <ADC_init>
	i2c_init();
    1860:	0e 94 c3 0b 	call	0x1786	; 0x1786 <i2c_init>
	bme280_init(over_1,filter_off,standby_1000,over_1,over_1,normal_mode);
    1864:	0f 2e       	mov	r0, r31
    1866:	f3 e0       	ldi	r31, 0x03	; 3
    1868:	ef 2e       	mov	r14, r31
    186a:	f0 2d       	mov	r31, r0
    186c:	01 e0       	ldi	r16, 0x01	; 1
    186e:	21 e0       	ldi	r18, 0x01	; 1
    1870:	45 e0       	ldi	r20, 0x05	; 5
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	0e 94 59 04 	call	0x8b2	; 0x8b2 <bme280_init>
	tim1A_init();
    187a:	0e 94 20 10 	call	0x2040	; 0x2040 <tim1A_init>
	pwm1A_start(50);
    187e:	82 e3       	ldi	r24, 0x32	; 50
    1880:	0e 94 39 10 	call	0x2072	; 0x2072 <pwm1A_start>
	mpu6050_init();
    1884:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <mpu6050_init>
	
	//print_string("HELLO WORLD\r\n");
	//print_bme280_coef();
  	draw_string(0,40,"bme280_id",0,BACKGROUND_COLOR,RED,TinyFont);
    1888:	0f 2e       	mov	r0, r31
    188a:	fa e7       	ldi	r31, 0x7A	; 122
    188c:	cf 2e       	mov	r12, r31
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	df 2e       	mov	r13, r31
    1892:	f0 2d       	mov	r31, r0
    1894:	0f 2e       	mov	r0, r31
    1896:	e1 2c       	mov	r14, r1
    1898:	f8 ef       	ldi	r31, 0xF8	; 248
    189a:	ff 2e       	mov	r15, r31
    189c:	f0 2d       	mov	r31, r0
    189e:	00 e0       	ldi	r16, 0x00	; 0
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	45 e2       	ldi	r20, 0x25	; 37
    18a6:	52 e0       	ldi	r21, 0x02	; 2
    18a8:	68 e2       	ldi	r22, 0x28	; 40
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
	draw_hexnumber(100,40,bme280_readbyte(BME280_ADDR, ID),0,BACKGROUND_COLOR,RED,TinyFont);
    18b4:	60 ed       	ldi	r22, 0xD0	; 208
    18b6:	8c ee       	ldi	r24, 0xEC	; 236
    18b8:	0e 94 40 03 	call	0x680	; 0x680 <bme280_readbyte>
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	56 01       	movw	r10, r12
    18c6:	0f 2e       	mov	r0, r31
    18c8:	c1 2c       	mov	r12, r1
    18ca:	f8 ef       	ldi	r31, 0xF8	; 248
    18cc:	df 2e       	mov	r13, r31
    18ce:	f0 2d       	mov	r31, r0
    18d0:	e1 2c       	mov	r14, r1
    18d2:	f1 2c       	mov	r15, r1
    18d4:	68 e2       	ldi	r22, 0x28	; 40
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	84 e6       	ldi	r24, 0x64	; 100
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 51 13 	call	0x26a2	; 0x26a2 <draw_hexnumber>
	draw_string(0,20,"mpu6050",0,BACKGROUND_COLOR,RED,TinyFont);
    18e0:	65 01       	movw	r12, r10
    18e2:	0f 2e       	mov	r0, r31
    18e4:	e1 2c       	mov	r14, r1
    18e6:	f8 ef       	ldi	r31, 0xF8	; 248
    18e8:	ff 2e       	mov	r15, r31
    18ea:	f0 2d       	mov	r31, r0
    18ec:	00 e0       	ldi	r16, 0x00	; 0
    18ee:	10 e0       	ldi	r17, 0x00	; 0
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	4f e2       	ldi	r20, 0x2F	; 47
    18f4:	52 e0       	ldi	r21, 0x02	; 2
    18f6:	64 e1       	ldi	r22, 0x14	; 20
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
	draw_hexnumber(100,20,whoami(),0,BACKGROUND_COLOR,RED,TinyFont);
    1902:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <whoami>
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	0f 2e       	mov	r0, r31
    1910:	c1 2c       	mov	r12, r1
    1912:	f8 ef       	ldi	r31, 0xF8	; 248
    1914:	df 2e       	mov	r13, r31
    1916:	f0 2d       	mov	r31, r0
    1918:	e1 2c       	mov	r14, r1
    191a:	f1 2c       	mov	r15, r1
    191c:	64 e1       	ldi	r22, 0x14	; 20
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	84 e6       	ldi	r24, 0x64	; 100
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 51 13 	call	0x26a2	; 0x26a2 <draw_hexnumber>
	
	//i2c_scanner(scanned_addr);
    while (1) 
    {
		pwm1A_start(pwm_value);
    1928:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pwm_value>
    192c:	0e 94 39 10 	call	0x2072	; 0x2072 <pwm1A_start>
		pwm_value>100?pwm_value=100:0;
    1930:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pwm_value>
    1934:	85 36       	cpi	r24, 0x65	; 101
    1936:	18 f0       	brcs	.+6      	; 0x193e <main+0x104>
    1938:	84 e6       	ldi	r24, 0x64	; 100
    193a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pwm_value>
		draw_string(0,00,"backlight",0,BACKGROUND_COLOR,RED,TinyFont);
    193e:	0f 2e       	mov	r0, r31
    1940:	fa e7       	ldi	r31, 0x7A	; 122
    1942:	cf 2e       	mov	r12, r31
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	df 2e       	mov	r13, r31
    1948:	f0 2d       	mov	r31, r0
    194a:	0f 2e       	mov	r0, r31
    194c:	e1 2c       	mov	r14, r1
    194e:	f8 ef       	ldi	r31, 0xF8	; 248
    1950:	ff 2e       	mov	r15, r31
    1952:	f0 2d       	mov	r31, r0
    1954:	00 e0       	ldi	r16, 0x00	; 0
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	47 e3       	ldi	r20, 0x37	; 55
    195c:	52 e0       	ldi	r21, 0x02	; 2
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
		draw_number(100,00,pwm_value,0,BACKGROUND_COLOR,WHITE,TinyFont);
    196a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pwm_value>
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	56 01       	movw	r10, r12
    1976:	cc 24       	eor	r12, r12
    1978:	ca 94       	dec	r12
    197a:	dc 2c       	mov	r13, r12
    197c:	e1 2c       	mov	r14, r1
    197e:	f1 2c       	mov	r15, r1
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	84 e6       	ldi	r24, 0x64	; 100
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <draw_number>

	if(adc_conv_flag){
    198c:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <adc_conv_flag>
    1990:	88 23       	and	r24, r24
    1992:	09 f4       	brne	.+2      	; 0x1996 <main+0x15c>
    1994:	6b c0       	rjmp	.+214    	; 0x1a6c <main+0x232>
		ema_filter_array(ADC_data,255,ALFHA);
    1996:	2d ec       	ldi	r18, 0xCD	; 205
    1998:	3c ec       	ldi	r19, 0xCC	; 204
    199a:	4c ec       	ldi	r20, 0xCC	; 204
    199c:	5d e3       	ldi	r21, 0x3D	; 61
    199e:	6f ef       	ldi	r22, 0xFF	; 255
    19a0:	8b e2       	ldi	r24, 0x2B	; 43
    19a2:	93 e0       	ldi	r25, 0x03	; 3
    19a4:	0e 94 c1 02 	call	0x582	; 0x582 <ema_filter_array>
		uint16_t dt=ADC_average(ADC_data);
    19a8:	8b e2       	ldi	r24, 0x2B	; 43
    19aa:	93 e0       	ldi	r25, 0x03	; 3
    19ac:	0e 94 68 02 	call	0x4d0	; 0x4d0 <ADC_average>
    19b0:	ec 01       	movw	r28, r24
		float voltage=(dt*4.51)/1024;
    19b2:	bc 01       	movw	r22, r24
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 67 15 	call	0x2ace	; 0x2ace <__floatunsisf>
    19bc:	2c ee       	ldi	r18, 0xEC	; 236
    19be:	31 e5       	ldi	r19, 0x51	; 81
    19c0:	40 e9       	ldi	r20, 0x90	; 144
    19c2:	50 e4       	ldi	r21, 0x40	; 64
    19c4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__mulsf3>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5a e3       	ldi	r21, 0x3A	; 58
    19d0:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__mulsf3>
    19d4:	2b 01       	movw	r4, r22
    19d6:	3c 01       	movw	r6, r24
		draw_string(0,10,"voltage",0,BACKGROUND_COLOR,RED,TinyFont);
    19d8:	65 01       	movw	r12, r10
    19da:	0f 2e       	mov	r0, r31
    19dc:	e1 2c       	mov	r14, r1
    19de:	f8 ef       	ldi	r31, 0xF8	; 248
    19e0:	ff 2e       	mov	r15, r31
    19e2:	f0 2d       	mov	r31, r0
    19e4:	00 e0       	ldi	r16, 0x00	; 0
    19e6:	10 e0       	ldi	r17, 0x00	; 0
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	41 e4       	ldi	r20, 0x41	; 65
    19ec:	52 e0       	ldi	r21, 0x02	; 2
    19ee:	6a e0       	ldi	r22, 0x0A	; 10
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
		draw_float_number(100,10,voltage,"%0.1f",0,BACKGROUND_COLOR,MAGENTA,TinyFont);
    19fa:	45 01       	movw	r8, r10
    19fc:	0f 2e       	mov	r0, r31
    19fe:	ff e1       	ldi	r31, 0x1F	; 31
    1a00:	af 2e       	mov	r10, r31
    1a02:	f8 ef       	ldi	r31, 0xF8	; 248
    1a04:	bf 2e       	mov	r11, r31
    1a06:	f0 2d       	mov	r31, r0
    1a08:	c1 2c       	mov	r12, r1
    1a0a:	d1 2c       	mov	r13, r1
    1a0c:	e1 2c       	mov	r14, r1
    1a0e:	09 e4       	ldi	r16, 0x49	; 73
    1a10:	12 e0       	ldi	r17, 0x02	; 2
    1a12:	a3 01       	movw	r20, r6
    1a14:	92 01       	movw	r18, r4
    1a16:	6a e0       	ldi	r22, 0x0A	; 10
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	84 e6       	ldi	r24, 0x64	; 100
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 ab 13 	call	0x2756	; 0x2756 <draw_float_number>
		draw_string(132,10,"v",0,BACKGROUND_COLOR,MAGENTA,TinyFont);
    1a22:	64 01       	movw	r12, r8
    1a24:	0f 2e       	mov	r0, r31
    1a26:	ff e1       	ldi	r31, 0x1F	; 31
    1a28:	ef 2e       	mov	r14, r31
    1a2a:	f8 ef       	ldi	r31, 0xF8	; 248
    1a2c:	ff 2e       	mov	r15, r31
    1a2e:	f0 2d       	mov	r31, r0
    1a30:	00 e0       	ldi	r16, 0x00	; 0
    1a32:	10 e0       	ldi	r17, 0x00	; 0
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	4f e4       	ldi	r20, 0x4F	; 79
    1a38:	52 e0       	ldi	r21, 0x02	; 2
    1a3a:	6a e0       	ldi	r22, 0x0A	; 10
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	84 e8       	ldi	r24, 0x84	; 132
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
		print_string("ADC_value ");
    1a46:	81 e5       	ldi	r24, 0x51	; 81
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
		print_number(dt);
    1a4e:	ce 01       	movw	r24, r28
    1a50:	0e 94 24 14 	call	0x2848	; 0x2848 <print_number>
		print_string("\r\n");
    1a54:	89 ea       	ldi	r24, 0xA9	; 169
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
		mpu6050_ready_data(&mpu6050_dt);
    1a5c:	8a e9       	ldi	r24, 0x9A	; 154
    1a5e:	95 e0       	ldi	r25, 0x05	; 5
    1a60:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <mpu6050_ready_data>
		print_mpu6050_data();
    1a64:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <print_mpu6050_data>
		adc_conv_flag=0;
    1a68:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <adc_conv_flag>
	}
    update_bme280();
    1a6c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <update_bme280>
	draw_string(0,30,"mpu_temp",0,BACKGROUND_COLOR,RED,TinyFont);
    1a70:	0f 2e       	mov	r0, r31
    1a72:	fa e7       	ldi	r31, 0x7A	; 122
    1a74:	cf 2e       	mov	r12, r31
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	df 2e       	mov	r13, r31
    1a7a:	f0 2d       	mov	r31, r0
    1a7c:	0f 2e       	mov	r0, r31
    1a7e:	e1 2c       	mov	r14, r1
    1a80:	f8 ef       	ldi	r31, 0xF8	; 248
    1a82:	ff 2e       	mov	r15, r31
    1a84:	f0 2d       	mov	r31, r0
    1a86:	00 e0       	ldi	r16, 0x00	; 0
    1a88:	10 e0       	ldi	r17, 0x00	; 0
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	4c e5       	ldi	r20, 0x5C	; 92
    1a8e:	52 e0       	ldi	r21, 0x02	; 2
    1a90:	6e e1       	ldi	r22, 0x1E	; 30
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
	draw_float_number(100,30,mpu6050_temp(),"%.1f",0,BACKGROUND_COLOR,WHITE,TinyFont);
    1a9c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <mpu6050_temp>
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	46 01       	movw	r8, r12
    1aa6:	aa 24       	eor	r10, r10
    1aa8:	aa 94       	dec	r10
    1aaa:	ba 2c       	mov	r11, r10
    1aac:	c1 2c       	mov	r12, r1
    1aae:	d1 2c       	mov	r13, r1
    1ab0:	e1 2c       	mov	r14, r1
    1ab2:	05 e6       	ldi	r16, 0x65	; 101
    1ab4:	12 e0       	ldi	r17, 0x02	; 2
    1ab6:	6e e1       	ldi	r22, 0x1E	; 30
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	84 e6       	ldi	r24, 0x64	; 100
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 ab 13 	call	0x2756	; 0x2756 <draw_float_number>
	
	if(enc-prev_enc>0){
    1ac2:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <enc>
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <prev_enc>
    1acc:	82 1b       	sub	r24, r18
    1ace:	91 09       	sbc	r25, r1
    1ad0:	18 16       	cp	r1, r24
    1ad2:	19 06       	cpc	r1, r25
    1ad4:	74 f4       	brge	.+28     	; 0x1af2 <main+0x2b8>
		print_string("clockwise ");
    1ad6:	81 e7       	ldi	r24, 0x71	; 113
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
		print_number(enc);
    1ade:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <enc>
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 24 14 	call	0x2848	; 0x2848 <print_number>
		print_string("\r\n");
    1ae8:	89 ea       	ldi	r24, 0xA9	; 169
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <main+0x2d6>
	} else if(enc-prev_enc<0){
    1af2:	99 23       	and	r25, r25
    1af4:	6c f4       	brge	.+26     	; 0x1b10 <main+0x2d6>
			print_string("counterclockwise ");
    1af6:	8a e6       	ldi	r24, 0x6A	; 106
    1af8:	92 e0       	ldi	r25, 0x02	; 2
    1afa:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
			print_number(enc);
    1afe:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <enc>
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 24 14 	call	0x2848	; 0x2848 <print_number>
			print_string("\r\n");
    1b08:	89 ea       	ldi	r24, 0xA9	; 169
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
		}
	prev_enc=enc;
    1b10:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <enc>
    1b14:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <prev_enc>
	
	if(shortpress_but){
    1b18:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <shortpress_but>
    1b1c:	81 11       	cpse	r24, r1
		shortpress_but=0;
    1b1e:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <shortpress_but>
	}
		
	if(shortpress_enc_but){
    1b22:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <shortpress_enc_but>
    1b26:	88 23       	and	r24, r24
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <main+0x2f8>
		pwm1A_stop();
    1b2a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <pwm1A_stop>
		shortpress_enc_but=0;
    1b2e:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <shortpress_enc_but>
	}
		
	if(upState>=2){
    1b32:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <upState>
    1b36:	82 30       	cpi	r24, 0x02	; 2
    1b38:	70 f0       	brcs	.+28     	; 0x1b56 <main+0x31c>
		pwm_value++;
    1b3a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pwm_value>
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pwm_value>
		enc++;
    1b44:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <enc>
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <enc>
		upState=0;
    1b4e:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <upState>
		downState=0;
    1b52:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <downState>
	}
		
	if(downState>=2){
    1b56:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <downState>
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	08 f4       	brcc	.+2      	; 0x1b60 <main+0x326>
    1b5e:	e4 ce       	rjmp	.-568    	; 0x1928 <main+0xee>
		pwm_value--;
    1b60:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pwm_value>
    1b64:	81 50       	subi	r24, 0x01	; 1
    1b66:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pwm_value>
		enc--;
    1b6a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <enc>
    1b6e:	81 50       	subi	r24, 0x01	; 1
    1b70:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <enc>
		downState=0;
    1b74:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <downState>
		upState=0;
    1b78:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <upState>
    1b7c:	d5 ce       	rjmp	.-598    	; 0x1928 <main+0xee>

00001b7e <mpu6050_readbyte>:
#include "mpu6050.h"

mpu6050_data mpu6050_dt;
mpu6050_data mpu6050_ready_dt;
 
uint8_t mpu6050_readbyte(uint8_t dev_addr, uint8_t reg){
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	c8 2f       	mov	r28, r24
    1b84:	d6 2f       	mov	r29, r22
	uint8_t byte=0;
	start_cond();
    1b86:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
	i2c_sendbyte(dev_addr);
    1b8a:	8c 2f       	mov	r24, r28
    1b8c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	i2c_sendbyte(reg);
    1b90:	8d 2f       	mov	r24, r29
    1b92:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	start_cond();
    1b96:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
	i2c_sendbyte(dev_addr|REQUEST_READ);
    1b9a:	8c 2f       	mov	r24, r28
    1b9c:	81 60       	ori	r24, 0x01	; 1
    1b9e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	byte=i2c_readbyte(NACK);
    1ba2:	85 e0       	ldi	r24, 0x05	; 5
    1ba4:	0e 94 08 0c 	call	0x1810	; 0x1810 <i2c_readbyte>
    1ba8:	c8 2f       	mov	r28, r24
	stop_cond();
    1baa:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_cond>
	return byte;
}
    1bae:	8c 2f       	mov	r24, r28
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <mpu6050_sendbyte>:

uint8_t mpu6050_sendbyte(uint8_t dev_addr, uint8_t reg,uint8_t data){
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	18 2f       	mov	r17, r24
    1bbe:	d6 2f       	mov	r29, r22
    1bc0:	c4 2f       	mov	r28, r20
	start_cond();
    1bc2:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
	i2c_sendbyte(dev_addr);
    1bc6:	81 2f       	mov	r24, r17
    1bc8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	i2c_sendbyte(reg);
    1bcc:	8d 2f       	mov	r24, r29
    1bce:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	i2c_sendbyte(data);
    1bd2:	8c 2f       	mov	r24, r28
    1bd4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	stop_cond();
    1bd8:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_cond>
	return SUCCESS;
}
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	08 95       	ret

00001be6 <mpu6050_init>:

void mpu6050_init(void){
	mpu6050_sendbyte(MPU6050_ADDR,CONFIG_ACCEL,AFS_SEL_0);
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	6c e1       	ldi	r22, 0x1C	; 28
    1bea:	80 ed       	ldi	r24, 0xD0	; 208
    1bec:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <mpu6050_sendbyte>
	mpu6050_sendbyte(MPU6050_ADDR,CONFIG_GYRO,FS_SEL_0);
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	6b e1       	ldi	r22, 0x1B	; 27
    1bf4:	80 ed       	ldi	r24, 0xD0	; 208
    1bf6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <mpu6050_sendbyte>
	mpu6050_sendbyte(MPU6050_ADDR,PWR_MGMNT,0x00);
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	6b e6       	ldi	r22, 0x6B	; 107
    1bfe:	80 ed       	ldi	r24, 0xD0	; 208
    1c00:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <mpu6050_sendbyte>
    1c04:	08 95       	ret

00001c06 <whoami>:
}

uint8_t whoami(void){
	return mpu6050_readbyte(MPU6050_ADDR,WHO_AM_I);
    1c06:	65 e7       	ldi	r22, 0x75	; 117
    1c08:	80 ed       	ldi	r24, 0xD0	; 208
    1c0a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <mpu6050_readbyte>
}
    1c0e:	08 95       	ret

00001c10 <twos_complement_convert>:
		value = ~value;
		value++;
		return -(int16_t)value;
	}
	return (int16_t)value;
}
    1c10:	08 95       	ret

00001c12 <mpu6050_readdata>:


uint8_t mpu6050_readdata(uint8_t dev_addr, uint8_t reg,uint8_t *data,uint8_t num_bytes){
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	c8 2f       	mov	r28, r24
    1c1e:	f6 2e       	mov	r15, r22
    1c20:	8a 01       	movw	r16, r20
    1c22:	d2 2f       	mov	r29, r18
	uint8_t status=0;
	int16_t sum=0; 
	start_cond();
    1c24:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
	status=i2c_sendbyte(dev_addr|REQUEST_WRITE);
    1c28:	8c 2f       	mov	r24, r28
    1c2a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	if(status!=ACK)return ERROR;
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	f1 f5       	brne	.+124    	; 0x1cae <mpu6050_readdata+0x9c>
	status=i2c_sendbyte(reg);
    1c32:	8f 2d       	mov	r24, r15
    1c34:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	if(status!=ACK)return ERROR;
    1c38:	84 30       	cpi	r24, 0x04	; 4
    1c3a:	d9 f5       	brne	.+118    	; 0x1cb2 <mpu6050_readdata+0xa0>
	start_cond();
    1c3c:	0e 94 c7 0b 	call	0x178e	; 0x178e <start_cond>
	status=i2c_sendbyte(dev_addr|REQUEST_READ);
    1c40:	8c 2f       	mov	r24, r28
    1c42:	81 60       	ori	r24, 0x01	; 1
    1c44:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <i2c_sendbyte>
	if(status!=ACK)return ERROR;
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	a9 f5       	brne	.+106    	; 0x1cb6 <mpu6050_readdata+0xa4>
    1c4c:	c0 e0       	ldi	r28, 0x00	; 0
    1c4e:	18 c0       	rjmp	.+48     	; 0x1c80 <mpu6050_readdata+0x6e>
	for (uint8_t cntr = 0; cntr < num_bytes; cntr++) {
		if (cntr < num_bytes - 1) {
    1c50:	2c 2f       	mov	r18, r28
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	8d 2f       	mov	r24, r29
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	28 17       	cp	r18, r24
    1c5c:	39 07       	cpc	r19, r25
    1c5e:	44 f4       	brge	.+16     	; 0x1c70 <mpu6050_readdata+0x5e>
			*(data+cntr) = i2c_readbyte(ACK);								// Отправляем ACK для всех, кроме последнего байта
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	0e 94 08 0c 	call	0x1810	; 0x1810 <i2c_readbyte>
    1c66:	f8 01       	movw	r30, r16
    1c68:	ec 0f       	add	r30, r28
    1c6a:	f1 1d       	adc	r31, r1
    1c6c:	80 83       	st	Z, r24
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <mpu6050_readdata+0x6c>
			} else {
			*(data+cntr)= i2c_readbyte(NACK);								// Отправляем NACK для последнего байта
    1c70:	85 e0       	ldi	r24, 0x05	; 5
    1c72:	0e 94 08 0c 	call	0x1810	; 0x1810 <i2c_readbyte>
    1c76:	f8 01       	movw	r30, r16
    1c78:	ec 0f       	add	r30, r28
    1c7a:	f1 1d       	adc	r31, r1
    1c7c:	80 83       	st	Z, r24
	status=i2c_sendbyte(reg);
	if(status!=ACK)return ERROR;
	start_cond();
	status=i2c_sendbyte(dev_addr|REQUEST_READ);
	if(status!=ACK)return ERROR;
	for (uint8_t cntr = 0; cntr < num_bytes; cntr++) {
    1c7e:	cf 5f       	subi	r28, 0xFF	; 255
    1c80:	cd 17       	cp	r28, r29
    1c82:	30 f3       	brcs	.-52     	; 0x1c50 <mpu6050_readdata+0x3e>
			*(data+cntr) = i2c_readbyte(ACK);								// Отправляем ACK для всех, кроме последнего байта
			} else {
			*(data+cntr)= i2c_readbyte(NACK);								// Отправляем NACK для последнего байта
		}
	}
	stop_cond();
    1c84:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_cond>
	for(uint8_t i=0;i<num_bytes;i++)sum+=data[i];
    1c88:	80 e0       	ldi	r24, 0x00	; 0
}


uint8_t mpu6050_readdata(uint8_t dev_addr, uint8_t reg,uint8_t *data,uint8_t num_bytes){
	uint8_t status=0;
	int16_t sum=0; 
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
			} else {
			*(data+cntr)= i2c_readbyte(NACK);								// Отправляем NACK для последнего байта
		}
	}
	stop_cond();
	for(uint8_t i=0;i<num_bytes;i++)sum+=data[i];
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <mpu6050_readdata+0x8c>
    1c90:	f8 01       	movw	r30, r16
    1c92:	e8 0f       	add	r30, r24
    1c94:	f1 1d       	adc	r31, r1
    1c96:	90 81       	ld	r25, Z
    1c98:	29 0f       	add	r18, r25
    1c9a:	31 1d       	adc	r19, r1
    1c9c:	8f 5f       	subi	r24, 0xFF	; 255
    1c9e:	8d 17       	cp	r24, r29
    1ca0:	b8 f3       	brcs	.-18     	; 0x1c90 <mpu6050_readdata+0x7e>
	!sum?mpu6050_init():0;
    1ca2:	23 2b       	or	r18, r19
    1ca4:	51 f4       	brne	.+20     	; 0x1cba <mpu6050_readdata+0xa8>
    1ca6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <mpu6050_init>
	return SUCCESS;
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	07 c0       	rjmp	.+14     	; 0x1cbc <mpu6050_readdata+0xaa>
uint8_t mpu6050_readdata(uint8_t dev_addr, uint8_t reg,uint8_t *data,uint8_t num_bytes){
	uint8_t status=0;
	int16_t sum=0; 
	start_cond();
	status=i2c_sendbyte(dev_addr|REQUEST_WRITE);
	if(status!=ACK)return ERROR;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <mpu6050_readdata+0xaa>
	status=i2c_sendbyte(reg);
	if(status!=ACK)return ERROR;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	03 c0       	rjmp	.+6      	; 0x1cbc <mpu6050_readdata+0xaa>
	start_cond();
	status=i2c_sendbyte(dev_addr|REQUEST_READ);
	if(status!=ACK)return ERROR;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <mpu6050_readdata+0xaa>
		}
	}
	stop_cond();
	for(uint8_t i=0;i<num_bytes;i++)sum+=data[i];
	!sum?mpu6050_init():0;
	return SUCCESS;
    1cba:	80 e0       	ldi	r24, 0x00	; 0
}
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	ff 90       	pop	r15
    1cc6:	08 95       	ret

00001cc8 <read_raw_data_mpu6050>:

uint8_t read_raw_data_mpu6050(uint8_t start_addr, uint8_t *data,  uint8_t num_bytes){
    1cc8:	24 2f       	mov	r18, r20
	mpu6050_readdata(MPU6050_ADDR, start_addr, data, num_bytes);
    1cca:	ab 01       	movw	r20, r22
    1ccc:	68 2f       	mov	r22, r24
    1cce:	80 ed       	ldi	r24, 0xD0	; 208
    1cd0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <mpu6050_readdata>
	return SUCCESS;
}
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	08 95       	ret

00001cd8 <convert_accel>:

int16_t convert_accel(int16_t raw, uint8_t range) {
	switch(range) {
    1cd8:	61 30       	cpi	r22, 0x01	; 1
    1cda:	99 f0       	breq	.+38     	; 0x1d02 <convert_accel+0x2a>
    1cdc:	28 f0       	brcs	.+10     	; 0x1ce8 <convert_accel+0x10>
    1cde:	62 30       	cpi	r22, 0x02	; 2
    1ce0:	f9 f0       	breq	.+62     	; 0x1d20 <convert_accel+0x48>
    1ce2:	63 30       	cpi	r22, 0x03	; 3
    1ce4:	59 f1       	breq	.+86     	; 0x1d3c <convert_accel+0x64>
    1ce6:	37 c0       	rjmp	.+110    	; 0x1d56 <convert_accel+0x7e>
		case 0: return raw/16384;
    1ce8:	9c 01       	movw	r18, r24
    1cea:	99 23       	and	r25, r25
    1cec:	14 f4       	brge	.+4      	; 0x1cf2 <convert_accel+0x1a>
    1cee:	21 50       	subi	r18, 0x01	; 1
    1cf0:	30 4c       	sbci	r19, 0xC0	; 192
    1cf2:	33 0f       	add	r19, r19
    1cf4:	22 0b       	sbc	r18, r18
    1cf6:	33 0f       	add	r19, r19
    1cf8:	32 2f       	mov	r19, r18
    1cfa:	22 1f       	adc	r18, r18
    1cfc:	82 2f       	mov	r24, r18
    1cfe:	93 2f       	mov	r25, r19
    1d00:	08 95       	ret
		case 1: return raw/8192;
    1d02:	9c 01       	movw	r18, r24
    1d04:	99 23       	and	r25, r25
    1d06:	14 f4       	brge	.+4      	; 0x1d0c <convert_accel+0x34>
    1d08:	21 50       	subi	r18, 0x01	; 1
    1d0a:	30 4e       	sbci	r19, 0xE0	; 224
    1d0c:	83 2f       	mov	r24, r19
    1d0e:	85 95       	asr	r24
    1d10:	85 95       	asr	r24
    1d12:	85 95       	asr	r24
    1d14:	85 95       	asr	r24
    1d16:	85 95       	asr	r24
    1d18:	93 2f       	mov	r25, r19
    1d1a:	99 0f       	add	r25, r25
    1d1c:	99 0b       	sbc	r25, r25
    1d1e:	08 95       	ret
		case 2: return raw/4096;
    1d20:	9c 01       	movw	r18, r24
    1d22:	99 23       	and	r25, r25
    1d24:	14 f4       	brge	.+4      	; 0x1d2a <convert_accel+0x52>
    1d26:	21 50       	subi	r18, 0x01	; 1
    1d28:	30 4f       	sbci	r19, 0xF0	; 240
    1d2a:	83 2f       	mov	r24, r19
    1d2c:	85 95       	asr	r24
    1d2e:	85 95       	asr	r24
    1d30:	85 95       	asr	r24
    1d32:	85 95       	asr	r24
    1d34:	93 2f       	mov	r25, r19
    1d36:	99 0f       	add	r25, r25
    1d38:	99 0b       	sbc	r25, r25
    1d3a:	08 95       	ret
		case 3: return raw/2048;
    1d3c:	9c 01       	movw	r18, r24
    1d3e:	99 23       	and	r25, r25
    1d40:	14 f4       	brge	.+4      	; 0x1d46 <convert_accel+0x6e>
    1d42:	21 50       	subi	r18, 0x01	; 1
    1d44:	38 4f       	sbci	r19, 0xF8	; 248
    1d46:	83 2f       	mov	r24, r19
    1d48:	85 95       	asr	r24
    1d4a:	85 95       	asr	r24
    1d4c:	85 95       	asr	r24
    1d4e:	93 2f       	mov	r25, r19
    1d50:	99 0f       	add	r25, r25
    1d52:	99 0b       	sbc	r25, r25
    1d54:	08 95       	ret
		default: return 0.0;
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    1d5a:	08 95       	ret

00001d5c <convert_gyro>:


int16_t convert_gyro(int16_t raw, uint8_t range) {
	switch(range) {
    1d5c:	61 30       	cpi	r22, 0x01	; 1
    1d5e:	b1 f0       	breq	.+44     	; 0x1d8c <convert_gyro+0x30>
    1d60:	28 f0       	brcs	.+10     	; 0x1d6c <convert_gyro+0x10>
    1d62:	62 30       	cpi	r22, 0x02	; 2
    1d64:	19 f1       	breq	.+70     	; 0x1dac <convert_gyro+0x50>
    1d66:	63 30       	cpi	r22, 0x03	; 3
    1d68:	89 f1       	breq	.+98     	; 0x1dcc <convert_gyro+0x70>
    1d6a:	40 c0       	rjmp	.+128    	; 0x1dec <convert_gyro+0x90>
		case 0: return raw/131.0;
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	99 0f       	add	r25, r25
    1d70:	88 0b       	sbc	r24, r24
    1d72:	99 0b       	sbc	r25, r25
    1d74:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__floatsisf>
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	43 e0       	ldi	r20, 0x03	; 3
    1d7e:	53 e4       	ldi	r21, 0x43	; 67
    1d80:	0e 94 bf 14 	call	0x297e	; 0x297e <__divsf3>
    1d84:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__fixsfsi>
    1d88:	cb 01       	movw	r24, r22
    1d8a:	08 95       	ret
		case 1: return raw/65.0;
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	99 0f       	add	r25, r25
    1d90:	88 0b       	sbc	r24, r24
    1d92:	99 0b       	sbc	r25, r25
    1d94:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__floatsisf>
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	42 e8       	ldi	r20, 0x82	; 130
    1d9e:	52 e4       	ldi	r21, 0x42	; 66
    1da0:	0e 94 bf 14 	call	0x297e	; 0x297e <__divsf3>
    1da4:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__fixsfsi>
    1da8:	cb 01       	movw	r24, r22
    1daa:	08 95       	ret
		case 2: return raw/33.0;
    1dac:	bc 01       	movw	r22, r24
    1dae:	99 0f       	add	r25, r25
    1db0:	88 0b       	sbc	r24, r24
    1db2:	99 0b       	sbc	r25, r25
    1db4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__floatsisf>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	44 e0       	ldi	r20, 0x04	; 4
    1dbe:	52 e4       	ldi	r21, 0x42	; 66
    1dc0:	0e 94 bf 14 	call	0x297e	; 0x297e <__divsf3>
    1dc4:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__fixsfsi>
    1dc8:	cb 01       	movw	r24, r22
    1dca:	08 95       	ret
		case 3: return raw/16.4;
    1dcc:	bc 01       	movw	r22, r24
    1dce:	99 0f       	add	r25, r25
    1dd0:	88 0b       	sbc	r24, r24
    1dd2:	99 0b       	sbc	r25, r25
    1dd4:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__floatsisf>
    1dd8:	23 e3       	ldi	r18, 0x33	; 51
    1dda:	33 e3       	ldi	r19, 0x33	; 51
    1ddc:	43 e8       	ldi	r20, 0x83	; 131
    1dde:	51 e4       	ldi	r21, 0x41	; 65
    1de0:	0e 94 bf 14 	call	0x297e	; 0x297e <__divsf3>
    1de4:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__fixsfsi>
    1de8:	cb 01       	movw	r24, r22
    1dea:	08 95       	ret
		default: return 0;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    1df0:	08 95       	ret

00001df2 <mpu6050_ready_data>:

uint8_t mpu6050_ready_data(mpu6050_data *dt){
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	8c 01       	movw	r16, r24
	static uint8_t raw_data[14] = {0};
	read_raw_data_mpu6050(ACCEL_XOUT_H, raw_data, 14);
    1dfc:	4e e0       	ldi	r20, 0x0E	; 14
    1dfe:	6e e7       	ldi	r22, 0x7E	; 126
    1e00:	75 e0       	ldi	r23, 0x05	; 5
    1e02:	8b e3       	ldi	r24, 0x3B	; 59
    1e04:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <read_raw_data_mpu6050>
    dt->accel_xout=convert_accel(twos_complement_convert(raw_data[0]<<8|raw_data[1]),0);
    1e08:	ce e7       	ldi	r28, 0x7E	; 126
    1e0a:	d5 e0       	ldi	r29, 0x05	; 5
    1e0c:	88 81       	ld	r24, Y
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	98 2f       	mov	r25, r24
    1e12:	88 27       	eor	r24, r24
    1e14:	29 81       	ldd	r18, Y+1	; 0x01
    1e16:	82 2b       	or	r24, r18
    1e18:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <twos_complement_convert>
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <convert_accel>
    1e22:	f8 01       	movw	r30, r16
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
	dt->accel_yout=convert_accel(twos_complement_convert(raw_data[2]<<8|raw_data[3]),0);
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	88 27       	eor	r24, r24
    1e30:	2b 81       	ldd	r18, Y+3	; 0x03
    1e32:	82 2b       	or	r24, r18
    1e34:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <twos_complement_convert>
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <convert_accel>
    1e3e:	f8 01       	movw	r30, r16
    1e40:	93 83       	std	Z+3, r25	; 0x03
    1e42:	82 83       	std	Z+2, r24	; 0x02
	dt->accel_zout=convert_accel(twos_complement_convert(raw_data[4]<<8|raw_data[5]),0);
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	98 2f       	mov	r25, r24
    1e4a:	88 27       	eor	r24, r24
    1e4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e4e:	82 2b       	or	r24, r18
    1e50:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <twos_complement_convert>
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <convert_accel>
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	95 83       	std	Z+5, r25	; 0x05
    1e5e:	84 83       	std	Z+4, r24	; 0x04
	dt->temp_out=(int16_t)raw_data[6]<<8|(int8_t)raw_data[7];
    1e60:	8e 81       	ldd	r24, Y+6	; 0x06
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	38 2f       	mov	r19, r24
    1e66:	22 27       	eor	r18, r18
    1e68:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6a:	08 2e       	mov	r0, r24
    1e6c:	00 0c       	add	r0, r0
    1e6e:	99 0b       	sbc	r25, r25
    1e70:	82 2b       	or	r24, r18
    1e72:	93 2b       	or	r25, r19
    1e74:	97 83       	std	Z+7, r25	; 0x07
    1e76:	86 83       	std	Z+6, r24	; 0x06
	dt->gyro_xout=convert_gyro(twos_complement_convert(raw_data[0]<<8|raw_data[1]),0);
    1e78:	88 81       	ld	r24, Y
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	88 27       	eor	r24, r24
    1e80:	29 81       	ldd	r18, Y+1	; 0x01
    1e82:	82 2b       	or	r24, r18
    1e84:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <twos_complement_convert>
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <convert_gyro>
    1e8e:	f8 01       	movw	r30, r16
    1e90:	91 87       	std	Z+9, r25	; 0x09
    1e92:	80 87       	std	Z+8, r24	; 0x08
	dt->gyro_yout=convert_gyro(twos_complement_convert(raw_data[2]<<8|raw_data[3]),0);
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	98 2f       	mov	r25, r24
    1e9a:	88 27       	eor	r24, r24
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	82 2b       	or	r24, r18
    1ea0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <twos_complement_convert>
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <convert_gyro>
    1eaa:	f8 01       	movw	r30, r16
    1eac:	93 87       	std	Z+11, r25	; 0x0b
    1eae:	82 87       	std	Z+10, r24	; 0x0a
	dt->gyro_zout=convert_gyro(twos_complement_convert(raw_data[4]<<8|raw_data[5]),0);
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	88 27       	eor	r24, r24
    1eb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1eba:	82 2b       	or	r24, r18
    1ebc:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <twos_complement_convert>
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <convert_gyro>
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	95 87       	std	Z+13, r25	; 0x0d
    1eca:	84 87       	std	Z+12, r24	; 0x0c
	return SUCCESS;
}
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <mpu6050_temp>:


float mpu6050_temp(void){
	return (float)(mpu6050_dt.temp_out/340+36.53);
    1ed8:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <mpu6050_dt+0x6>
    1edc:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <mpu6050_dt+0x7>
    1ee0:	64 e5       	ldi	r22, 0x54	; 84
    1ee2:	71 e0       	ldi	r23, 0x01	; 1
    1ee4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__divmodhi4>
    1ee8:	07 2e       	mov	r0, r23
    1eea:	00 0c       	add	r0, r0
    1eec:	88 0b       	sbc	r24, r24
    1eee:	99 0b       	sbc	r25, r25
    1ef0:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__floatsisf>
    1ef4:	28 eb       	ldi	r18, 0xB8	; 184
    1ef6:	3e e1       	ldi	r19, 0x1E	; 30
    1ef8:	42 e1       	ldi	r20, 0x12	; 18
    1efa:	52 e4       	ldi	r21, 0x42	; 66
    1efc:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__addsf3>
}
    1f00:	08 95       	ret

00001f02 <print_mpu6050_data>:

void print_mpu6050_data(void){
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	64 97       	sbiw	r28, 0x14	; 20
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
	char str1[20];
	sprintf(str1, "accel_xout: %d\r\n", mpu6050_dt.accel_xout);
    1f1e:	0f 2e       	mov	r0, r31
    1f20:	fa e9       	ldi	r31, 0x9A	; 154
    1f22:	ef 2e       	mov	r14, r31
    1f24:	f5 e0       	ldi	r31, 0x05	; 5
    1f26:	ff 2e       	mov	r15, r31
    1f28:	f0 2d       	mov	r31, r0
    1f2a:	f7 01       	movw	r30, r14
    1f2c:	81 81       	ldd	r24, Z+1	; 0x01
    1f2e:	8f 93       	push	r24
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 93       	push	r24
    1f34:	8c e7       	ldi	r24, 0x7C	; 124
    1f36:	92 e0       	ldi	r25, 0x02	; 2
    1f38:	9f 93       	push	r25
    1f3a:	8f 93       	push	r24
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	0f 5f       	subi	r16, 0xFF	; 255
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	1f 93       	push	r17
    1f44:	0f 93       	push	r16
    1f46:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(str1);
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
	sprintf(str1, "accel_yout: %d\r\n", mpu6050_dt.accel_yout);
    1f50:	f7 01       	movw	r30, r14
    1f52:	83 81       	ldd	r24, Z+3	; 0x03
    1f54:	8f 93       	push	r24
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	8f 93       	push	r24
    1f5a:	8d e8       	ldi	r24, 0x8D	; 141
    1f5c:	92 e0       	ldi	r25, 0x02	; 2
    1f5e:	9f 93       	push	r25
    1f60:	8f 93       	push	r24
    1f62:	1f 93       	push	r17
    1f64:	0f 93       	push	r16
    1f66:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(str1);
    1f6a:	c8 01       	movw	r24, r16
    1f6c:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
	sprintf(str1, "accel_zout: %d\r\n", mpu6050_dt.accel_zout);
    1f70:	f7 01       	movw	r30, r14
    1f72:	85 81       	ldd	r24, Z+5	; 0x05
    1f74:	8f 93       	push	r24
    1f76:	84 81       	ldd	r24, Z+4	; 0x04
    1f78:	8f 93       	push	r24
    1f7a:	8e e9       	ldi	r24, 0x9E	; 158
    1f7c:	92 e0       	ldi	r25, 0x02	; 2
    1f7e:	9f 93       	push	r25
    1f80:	8f 93       	push	r24
    1f82:	1f 93       	push	r17
    1f84:	0f 93       	push	r16
    1f86:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(str1);
    1f8a:	c8 01       	movw	r24, r16
    1f8c:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
	sprintf(str1, "gyro_xout: %d\r\n", mpu6050_dt.gyro_xout);
    1f90:	f7 01       	movw	r30, r14
    1f92:	81 85       	ldd	r24, Z+9	; 0x09
    1f94:	8f 93       	push	r24
    1f96:	80 85       	ldd	r24, Z+8	; 0x08
    1f98:	8f 93       	push	r24
    1f9a:	8f ea       	ldi	r24, 0xAF	; 175
    1f9c:	92 e0       	ldi	r25, 0x02	; 2
    1f9e:	9f 93       	push	r25
    1fa0:	8f 93       	push	r24
    1fa2:	1f 93       	push	r17
    1fa4:	0f 93       	push	r16
    1fa6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(str1);
    1faa:	c8 01       	movw	r24, r16
    1fac:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
	sprintf(str1, "gyro_yout: %d\r\n", mpu6050_dt.gyro_yout);
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	83 85       	ldd	r24, Z+11	; 0x0b
    1fb4:	8f 93       	push	r24
    1fb6:	82 85       	ldd	r24, Z+10	; 0x0a
    1fb8:	8f 93       	push	r24
    1fba:	8f eb       	ldi	r24, 0xBF	; 191
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	9f 93       	push	r25
    1fc0:	8f 93       	push	r24
    1fc2:	1f 93       	push	r17
    1fc4:	0f 93       	push	r16
    1fc6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(str1);
    1fca:	c8 01       	movw	r24, r16
    1fcc:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
	sprintf(str1, "gyro_zout: %d\r\n", mpu6050_dt.gyro_zout);
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	85 85       	ldd	r24, Z+13	; 0x0d
    1fd4:	8f 93       	push	r24
    1fd6:	84 85       	ldd	r24, Z+12	; 0x0c
    1fd8:	8f 93       	push	r24
    1fda:	8f ec       	ldi	r24, 0xCF	; 207
    1fdc:	92 e0       	ldi	r25, 0x02	; 2
    1fde:	9f 93       	push	r25
    1fe0:	8f 93       	push	r24
    1fe2:	1f 93       	push	r17
    1fe4:	0f 93       	push	r16
    1fe6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(str1);
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
	sprintf(str1, "temp_out: %d\r\n", mpu6050_dt.temp_out);
    1ffa:	f7 01       	movw	r30, r14
    1ffc:	87 81       	ldd	r24, Z+7	; 0x07
    1ffe:	8f 93       	push	r24
    2000:	86 81       	ldd	r24, Z+6	; 0x06
    2002:	8f 93       	push	r24
    2004:	8f ed       	ldi	r24, 0xDF	; 223
    2006:	92 e0       	ldi	r25, 0x02	; 2
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	1f 93       	push	r17
    200e:	0f 93       	push	r16
    2010:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(str1);
    2014:	c8 01       	movw	r24, r16
    2016:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	64 96       	adiw	r28, 0x14	; 20
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	08 95       	ret

00002040 <tim1A_init>:
	
}

 long map(long x, long in_min, long in_max, long out_min, long out_max){
	 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 }
    2040:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    2044:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    2048:	8e e3       	ldi	r24, 0x3E	; 62
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    2050:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    2054:	e0 e8       	ldi	r30, 0x80	; 128
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8f 73       	andi	r24, 0x3F	; 63
    205c:	80 68       	ori	r24, 0x80	; 128
    205e:	80 83       	st	Z, r24
    2060:	80 81       	ld	r24, Z
    2062:	82 60       	ori	r24, 0x02	; 2
    2064:	80 83       	st	Z, r24
    2066:	e1 e8       	ldi	r30, 0x81	; 129
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	88 61       	ori	r24, 0x18	; 24
    206e:	80 83       	st	Z, r24
    2070:	08 95       	ret

00002072 <pwm1A_start>:

void pwm1A_start(uint8_t duty){
	duty>100?duty=100:0;
    2072:	85 36       	cpi	r24, 0x65	; 101
    2074:	08 f0       	brcs	.+2      	; 0x2078 <pwm1A_start+0x6>
    2076:	84 e6       	ldi	r24, 0x64	; 100
	WRITE_REG(OCR1A,(FREQ_VALUE*duty)/100);
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	ae e3       	ldi	r26, 0x3E	; 62
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2084:	24 e6       	ldi	r18, 0x64	; 100
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__udivmodsi4>
    2090:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2094:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	SET_BIT(TCCR1A,(1<<WGM11));                                           
    2098:	e0 e8       	ldi	r30, 0x80	; 128
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	82 60       	ori	r24, 0x02	; 2
    20a0:	80 83       	st	Z, r24
	SET_BIT(TCCR1B,(1<<WGM12|1<<WGM13));
    20a2:	e1 e8       	ldi	r30, 0x81	; 129
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	88 61       	ori	r24, 0x18	; 24
    20aa:	80 83       	st	Z, r24
	MODIFY_REG(TCCR1B,RESET_DIVIDER,(1<<CS12));                                 
    20ac:	80 81       	ld	r24, Z
    20ae:	88 7f       	andi	r24, 0xF8	; 248
    20b0:	84 60       	ori	r24, 0x04	; 4
    20b2:	80 83       	st	Z, r24
    20b4:	08 95       	ret

000020b6 <pwm1A_stop>:
}

void pwm1A_stop(void){
	MODIFY_REG(TCCR1B,RESET_DIVIDER,0x00); 
    20b6:	e1 e8       	ldi	r30, 0x81	; 129
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	88 7f       	andi	r24, 0xF8	; 248
    20be:	80 83       	st	Z, r24
	CLEAR_BIT(TCCR1A,(1<<WGM11));                                           //FAST PWM
    20c0:	a0 e8       	ldi	r26, 0x80	; 128
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	8c 91       	ld	r24, X
    20c6:	8d 7f       	andi	r24, 0xFD	; 253
    20c8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,(1<<WGM12|1<<WGM13));                             
    20ca:	80 81       	ld	r24, Z
    20cc:	87 7e       	andi	r24, 0xE7	; 231
    20ce:	80 83       	st	Z, r24
    20d0:	08 95       	ret

000020d2 <spi_master_init>:
#include "spi.h"

void spi_master_init(void){
	SET_BIT(SPI_DDR,(1<<DATA|1<<CLOCK));
    20d2:	84 b1       	in	r24, 0x04	; 4
    20d4:	88 62       	ori	r24, 0x28	; 40
    20d6:	84 b9       	out	0x04, r24	; 4
	CLEAR_BIT(SPCR,1<<SPR0|1<<SPR1);
    20d8:	8c b5       	in	r24, 0x2c	; 44
    20da:	8c 7f       	andi	r24, 0xFC	; 252
    20dc:	8c bd       	out	0x2c, r24	; 44
	SET_BIT(SPSR,1<<SPI2X);      // fck/2  16000000/2=8МГц
    20de:	8d b5       	in	r24, 0x2d	; 45
    20e0:	81 60       	ori	r24, 0x01	; 1
    20e2:	8d bd       	out	0x2d, r24	; 45
	SET_BIT(SPCR,(1<<SPE|1<<MSTR)); 
    20e4:	8c b5       	in	r24, 0x2c	; 44
    20e6:	80 65       	ori	r24, 0x50	; 80
    20e8:	8c bd       	out	0x2c, r24	; 44
    20ea:	08 95       	ret

000020ec <spi_sendbyte>:
	
}

void spi_sendbyte(uint8_t byte){
	SPDR = byte;
    20ec:	8e bd       	out	0x2e, r24	; 46
	while(!READ_BIT(SPSR,(1<<SPIF)));
    20ee:	0d b4       	in	r0, 0x2d	; 45
    20f0:	07 fe       	sbrs	r0, 7
    20f2:	fd cf       	rjmp	.-6      	; 0x20ee <spi_sendbyte+0x2>
}
    20f4:	08 95       	ret

000020f6 <st7735_ports_init>:
			y0--;
			f += 2 * (x0 - y0) + 1;
		} else{
			 f += 2 * x0 + 1; }
	}
}
    20f6:	84 b1       	in	r24, 0x04	; 4
    20f8:	82 60       	ori	r24, 0x02	; 2
    20fa:	84 b9       	out	0x04, r24	; 4
    20fc:	84 b1       	in	r24, 0x04	; 4
    20fe:	84 60       	ori	r24, 0x04	; 4
    2100:	84 b9       	out	0x04, r24	; 4
    2102:	84 b1       	in	r24, 0x04	; 4
    2104:	80 61       	ori	r24, 0x10	; 16
    2106:	84 b9       	out	0x04, r24	; 4
    2108:	84 b1       	in	r24, 0x04	; 4
    210a:	81 60       	ori	r24, 0x01	; 1
    210c:	84 b9       	out	0x04, r24	; 4
    210e:	08 95       	ret

00002110 <send_command>:
    2110:	95 b1       	in	r25, 0x05	; 5
    2112:	9b 7f       	andi	r25, 0xFB	; 251
    2114:	95 b9       	out	0x05, r25	; 5
    2116:	0e 94 76 10 	call	0x20ec	; 0x20ec <spi_sendbyte>
    211a:	08 95       	ret

0000211c <send_data>:
    211c:	95 b1       	in	r25, 0x05	; 5
    211e:	94 60       	ori	r25, 0x04	; 4
    2120:	95 b9       	out	0x05, r25	; 5
    2122:	0e 94 76 10 	call	0x20ec	; 0x20ec <spi_sendbyte>
    2126:	08 95       	ret

00002128 <st7735_multiply_send>:
    2128:	8f 92       	push	r8
    212a:	9f 92       	push	r9
    212c:	af 92       	push	r10
    212e:	bf 92       	push	r11
    2130:	cf 92       	push	r12
    2132:	df 92       	push	r13
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	ec 01       	movw	r28, r24
    213e:	4a 01       	movw	r8, r20
    2140:	5b 01       	movw	r10, r22
    2142:	85 b1       	in	r24, 0x05	; 5
    2144:	84 60       	ori	r24, 0x04	; 4
    2146:	85 b9       	out	0x05, r24	; 5
    2148:	c1 2c       	mov	r12, r1
    214a:	d1 2c       	mov	r13, r1
    214c:	76 01       	movw	r14, r12
    214e:	0b c0       	rjmp	.+22     	; 0x2166 <st7735_multiply_send+0x3e>
    2150:	fe 01       	movw	r30, r28
    2152:	ec 0d       	add	r30, r12
    2154:	fd 1d       	adc	r31, r13
    2156:	80 81       	ld	r24, Z
    2158:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	c8 1a       	sub	r12, r24
    2160:	d8 0a       	sbc	r13, r24
    2162:	e8 0a       	sbc	r14, r24
    2164:	f8 0a       	sbc	r15, r24
    2166:	c8 14       	cp	r12, r8
    2168:	d9 04       	cpc	r13, r9
    216a:	ea 04       	cpc	r14, r10
    216c:	fb 04       	cpc	r15, r11
    216e:	80 f3       	brcs	.-32     	; 0x2150 <st7735_multiply_send+0x28>
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	df 90       	pop	r13
    217a:	cf 90       	pop	r12
    217c:	bf 90       	pop	r11
    217e:	af 90       	pop	r10
    2180:	9f 90       	pop	r9
    2182:	8f 90       	pop	r8
    2184:	08 95       	ret

00002186 <st7735_init>:
    2186:	85 b1       	in	r24, 0x05	; 5
    2188:	8e 7f       	andi	r24, 0xFE	; 254
    218a:	85 b9       	out	0x05, r24	; 5
    218c:	85 b1       	in	r24, 0x05	; 5
    218e:	80 61       	ori	r24, 0x10	; 16
    2190:	85 b9       	out	0x05, r24	; 5
    2192:	8f e1       	ldi	r24, 0x1F	; 31
    2194:	9e e4       	ldi	r25, 0x4E	; 78
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <st7735_init+0x10>
    219a:	00 c0       	rjmp	.+0      	; 0x219c <st7735_init+0x16>
    219c:	00 00       	nop
    219e:	85 b1       	in	r24, 0x05	; 5
    21a0:	8f 7e       	andi	r24, 0xEF	; 239
    21a2:	85 b9       	out	0x05, r24	; 5
    21a4:	8f e1       	ldi	r24, 0x1F	; 31
    21a6:	9e e4       	ldi	r25, 0x4E	; 78
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <st7735_init+0x22>
    21ac:	00 c0       	rjmp	.+0      	; 0x21ae <st7735_init+0x28>
    21ae:	00 00       	nop
    21b0:	85 b1       	in	r24, 0x05	; 5
    21b2:	80 61       	ori	r24, 0x10	; 16
    21b4:	85 b9       	out	0x05, r24	; 5
    21b6:	8f e1       	ldi	r24, 0x1F	; 31
    21b8:	9e e4       	ldi	r25, 0x4E	; 78
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <st7735_init+0x34>
    21be:	00 c0       	rjmp	.+0      	; 0x21c0 <st7735_init+0x3a>
    21c0:	00 00       	nop
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    21c8:	9f ef       	ldi	r25, 0xFF	; 255
    21ca:	22 e5       	ldi	r18, 0x52	; 82
    21cc:	87 e0       	ldi	r24, 0x07	; 7
    21ce:	91 50       	subi	r25, 0x01	; 1
    21d0:	20 40       	sbci	r18, 0x00	; 0
    21d2:	80 40       	sbci	r24, 0x00	; 0
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <st7735_init+0x48>
    21d6:	00 c0       	rjmp	.+0      	; 0x21d8 <st7735_init+0x52>
    21d8:	00 00       	nop
    21da:	81 e1       	ldi	r24, 0x11	; 17
    21dc:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    21e0:	9f ef       	ldi	r25, 0xFF	; 255
    21e2:	29 e6       	ldi	r18, 0x69	; 105
    21e4:	88 e1       	ldi	r24, 0x18	; 24
    21e6:	91 50       	subi	r25, 0x01	; 1
    21e8:	20 40       	sbci	r18, 0x00	; 0
    21ea:	80 40       	sbci	r24, 0x00	; 0
    21ec:	e1 f7       	brne	.-8      	; 0x21e6 <st7735_init+0x60>
    21ee:	00 c0       	rjmp	.+0      	; 0x21f0 <st7735_init+0x6a>
    21f0:	00 00       	nop
    21f2:	81 eb       	ldi	r24, 0xB1	; 177
    21f4:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    21f8:	43 e0       	ldi	r20, 0x03	; 3
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	81 e2       	ldi	r24, 0x21	; 33
    2202:	93 e0       	ldi	r25, 0x03	; 3
    2204:	0e 94 94 10 	call	0x2128	; 0x2128 <st7735_multiply_send>
    2208:	84 eb       	ldi	r24, 0xB4	; 180
    220a:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    220e:	87 e0       	ldi	r24, 0x07	; 7
    2210:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    2214:	80 ec       	ldi	r24, 0xC0	; 192
    2216:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    221a:	43 e0       	ldi	r20, 0x03	; 3
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	8e e1       	ldi	r24, 0x1E	; 30
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	0e 94 94 10 	call	0x2128	; 0x2128 <st7735_multiply_send>
    222a:	85 ec       	ldi	r24, 0xC5	; 197
    222c:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    2230:	8e e0       	ldi	r24, 0x0E	; 14
    2232:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    2236:	81 e2       	ldi	r24, 0x21	; 33
    2238:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    223c:	86 e3       	ldi	r24, 0x36	; 54
    223e:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    2242:	88 e6       	ldi	r24, 0x68	; 104
    2244:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    2248:	8a e3       	ldi	r24, 0x3A	; 58
    224a:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    224e:	85 e0       	ldi	r24, 0x05	; 5
    2250:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    2254:	80 ee       	ldi	r24, 0xE0	; 224
    2256:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    225a:	40 e1       	ldi	r20, 0x10	; 16
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	8e e0       	ldi	r24, 0x0E	; 14
    2264:	93 e0       	ldi	r25, 0x03	; 3
    2266:	0e 94 94 10 	call	0x2128	; 0x2128 <st7735_multiply_send>
    226a:	81 ee       	ldi	r24, 0xE1	; 225
    226c:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    2270:	40 e1       	ldi	r20, 0x10	; 16
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	8e ef       	ldi	r24, 0xFE	; 254
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	0e 94 94 10 	call	0x2128	; 0x2128 <st7735_multiply_send>
    2280:	83 e1       	ldi	r24, 0x13	; 19
    2282:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    2286:	8f e3       	ldi	r24, 0x3F	; 63
    2288:	9c e9       	ldi	r25, 0x9C	; 156
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <st7735_init+0x104>
    228e:	00 c0       	rjmp	.+0      	; 0x2290 <st7735_init+0x10a>
    2290:	00 00       	nop
    2292:	89 e2       	ldi	r24, 0x29	; 41
    2294:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    2298:	9f ef       	ldi	r25, 0xFF	; 255
    229a:	21 ee       	ldi	r18, 0xE1	; 225
    229c:	84 e0       	ldi	r24, 0x04	; 4
    229e:	91 50       	subi	r25, 0x01	; 1
    22a0:	20 40       	sbci	r18, 0x00	; 0
    22a2:	80 40       	sbci	r24, 0x00	; 0
    22a4:	e1 f7       	brne	.-8      	; 0x229e <st7735_init+0x118>
    22a6:	00 c0       	rjmp	.+0      	; 0x22a8 <st7735_init+0x122>
    22a8:	00 00       	nop
    22aa:	85 b1       	in	r24, 0x05	; 5
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	85 b9       	out	0x05, r24	; 5
    22b0:	08 95       	ret

000022b2 <setXY>:
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	ec 01       	movw	r28, r24
    22c4:	6b 01       	movw	r12, r22
    22c6:	7a 01       	movw	r14, r20
    22c8:	89 01       	movw	r16, r18
    22ca:	8b e2       	ldi	r24, 0x2B	; 43
    22cc:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    22d0:	c7 01       	movw	r24, r14
    22d2:	4a 96       	adiw	r24, 0x1a	; 26
    22d4:	89 2f       	mov	r24, r25
    22d6:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    22da:	8a e1       	ldi	r24, 0x1A	; 26
    22dc:	8e 0d       	add	r24, r14
    22de:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    22e2:	c7 01       	movw	r24, r14
    22e4:	80 0f       	add	r24, r16
    22e6:	91 1f       	adc	r25, r17
    22e8:	49 96       	adiw	r24, 0x19	; 25
    22ea:	89 2f       	mov	r24, r25
    22ec:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    22f0:	8e 2d       	mov	r24, r14
    22f2:	80 0f       	add	r24, r16
    22f4:	87 5e       	subi	r24, 0xE7	; 231
    22f6:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    22fa:	8a e2       	ldi	r24, 0x2A	; 42
    22fc:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    2300:	ce 01       	movw	r24, r28
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	89 2f       	mov	r24, r25
    2306:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    230a:	8c 2f       	mov	r24, r28
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    2312:	ce 01       	movw	r24, r28
    2314:	8c 0d       	add	r24, r12
    2316:	9d 1d       	adc	r25, r13
    2318:	89 2f       	mov	r24, r25
    231a:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    231e:	8c 2f       	mov	r24, r28
    2320:	8c 0d       	add	r24, r12
    2322:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ff 90       	pop	r15
    2330:	ef 90       	pop	r14
    2332:	df 90       	pop	r13
    2334:	cf 90       	pop	r12
    2336:	08 95       	ret

00002338 <draw_rect>:
    2338:	8f 92       	push	r8
    233a:	9f 92       	push	r9
    233c:	af 92       	push	r10
    233e:	bf 92       	push	r11
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	ea 01       	movw	r28, r20
    234e:	79 01       	movw	r14, r18
    2350:	25 b1       	in	r18, 0x05	; 5
    2352:	2e 7f       	andi	r18, 0xFE	; 254
    2354:	25 b9       	out	0x05, r18	; 5
    2356:	97 01       	movw	r18, r14
    2358:	ab 01       	movw	r20, r22
    235a:	be 01       	movw	r22, r28
    235c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <setXY>
    2360:	8c e2       	ldi	r24, 0x2C	; 44
    2362:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    2366:	85 b1       	in	r24, 0x05	; 5
    2368:	84 60       	ori	r24, 0x04	; 4
    236a:	85 b9       	out	0x05, r24	; 5
    236c:	81 2c       	mov	r8, r1
    236e:	91 2c       	mov	r9, r1
    2370:	54 01       	movw	r10, r8
    2372:	0b c0       	rjmp	.+22     	; 0x238a <draw_rect+0x52>
    2374:	81 2f       	mov	r24, r17
    2376:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    237a:	80 2f       	mov	r24, r16
    237c:	0e 94 8e 10 	call	0x211c	; 0x211c <send_data>
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	88 1a       	sub	r8, r24
    2384:	98 0a       	sbc	r9, r24
    2386:	a8 0a       	sbc	r10, r24
    2388:	b8 0a       	sbc	r11, r24
    238a:	ce 9d       	mul	r28, r14
    238c:	c0 01       	movw	r24, r0
    238e:	cf 9d       	mul	r28, r15
    2390:	90 0d       	add	r25, r0
    2392:	de 9d       	mul	r29, r14
    2394:	90 0d       	add	r25, r0
    2396:	11 24       	eor	r1, r1
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	88 16       	cp	r8, r24
    239e:	99 06       	cpc	r9, r25
    23a0:	aa 06       	cpc	r10, r26
    23a2:	bb 06       	cpc	r11, r27
    23a4:	38 f3       	brcs	.-50     	; 0x2374 <draw_rect+0x3c>
    23a6:	85 b1       	in	r24, 0x05	; 5
    23a8:	81 60       	ori	r24, 0x01	; 1
    23aa:	85 b9       	out	0x05, r24	; 5
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	bf 90       	pop	r11
    23ba:	af 90       	pop	r10
    23bc:	9f 90       	pop	r9
    23be:	8f 90       	pop	r8
    23c0:	08 95       	ret

000023c2 <background>:
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	8c 01       	movw	r16, r24
    23c8:	20 e5       	ldi	r18, 0x50	; 80
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 ea       	ldi	r20, 0xA0	; 160
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 9c 11 	call	0x2338	; 0x2338 <draw_rect>
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	08 95       	ret

000023e2 <draw_char>:
    23e2:	5f 92       	push	r5
    23e4:	6f 92       	push	r6
    23e6:	7f 92       	push	r7
    23e8:	8f 92       	push	r8
    23ea:	9f 92       	push	r9
    23ec:	af 92       	push	r10
    23ee:	bf 92       	push	r11
    23f0:	cf 92       	push	r12
    23f2:	df 92       	push	r13
    23f4:	ef 92       	push	r14
    23f6:	ff 92       	push	r15
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	c2 59       	subi	r28, 0x92	; 146
    2406:	d1 40       	sbci	r29, 0x01	; 1
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	db 01       	movw	r26, r22
    2414:	d2 2e       	mov	r13, r18
    2416:	c3 2e       	mov	r12, r19
    2418:	51 2e       	mov	r5, r17
    241a:	b7 01       	movw	r22, r14
    241c:	f7 01       	movw	r30, r14
    241e:	f4 90       	lpm	r15, Z
    2420:	f6 94       	lsr	r15
    2422:	f6 94       	lsr	r15
    2424:	f6 94       	lsr	r15
    2426:	32 96       	adiw	r30, 0x02	; 2
    2428:	e4 91       	lpm	r30, Z
    242a:	24 2f       	mov	r18, r20
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	2e 1b       	sub	r18, r30
    2430:	31 09       	sbc	r19, r1
    2432:	ab 01       	movw	r20, r22
    2434:	4f 5f       	subi	r20, 0xFF	; 255
    2436:	5f 4f       	sbci	r21, 0xFF	; 255
    2438:	fa 01       	movw	r30, r20
    243a:	e4 90       	lpm	r14, Z
    243c:	e2 9e       	mul	r14, r18
    243e:	f0 01       	movw	r30, r0
    2440:	e3 9e       	mul	r14, r19
    2442:	f0 0d       	add	r31, r0
    2444:	11 24       	eor	r1, r1
    2446:	fe 9e       	mul	r15, r30
    2448:	90 01       	movw	r18, r0
    244a:	ff 9e       	mul	r15, r31
    244c:	30 0d       	add	r19, r0
    244e:	11 24       	eor	r1, r1
    2450:	2c 5f       	subi	r18, 0xFC	; 252
    2452:	3f 4f       	sbci	r19, 0xFF	; 255
    2454:	3a 83       	std	Y+2, r19	; 0x02
    2456:	29 83       	std	Y+1, r18	; 0x01
    2458:	fa 01       	movw	r30, r20
    245a:	e4 90       	lpm	r14, Z
    245c:	fe 9c       	mul	r15, r14
    245e:	e0 2c       	mov	r14, r0
    2460:	11 24       	eor	r1, r1
    2462:	4e 01       	movw	r8, r28
    2464:	f3 e0       	ldi	r31, 0x03	; 3
    2466:	8f 0e       	add	r8, r31
    2468:	91 1c       	adc	r9, r1
    246a:	0f 2e       	mov	r0, r31
    246c:	f0 e9       	ldi	r31, 0x90	; 144
    246e:	af 2e       	mov	r10, r31
    2470:	bb 24       	eor	r11, r11
    2472:	b3 94       	inc	r11
    2474:	f0 2d       	mov	r31, r0
    2476:	f4 01       	movw	r30, r8
    2478:	95 01       	movw	r18, r10
    247a:	11 92       	st	Z+, r1
    247c:	21 50       	subi	r18, 0x01	; 1
    247e:	30 40       	sbci	r19, 0x00	; 0
    2480:	e1 f7       	brne	.-8      	; 0x247a <draw_char+0x98>
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	10 c0       	rjmp	.+32     	; 0x24a8 <draw_char+0xc6>
    2488:	e9 81       	ldd	r30, Y+1	; 0x01
    248a:	fa 81       	ldd	r31, Y+2	; 0x02
    248c:	e2 0f       	add	r30, r18
    248e:	f3 1f       	adc	r31, r19
    2490:	e6 0f       	add	r30, r22
    2492:	f7 1f       	adc	r31, r23
    2494:	b4 90       	lpm	r11, Z
    2496:	e3 e0       	ldi	r30, 0x03	; 3
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	ec 0f       	add	r30, r28
    249c:	fd 1f       	adc	r31, r29
    249e:	e2 0f       	add	r30, r18
    24a0:	f3 1f       	adc	r31, r19
    24a2:	b0 82       	st	Z, r11
    24a4:	2f 5f       	subi	r18, 0xFF	; 255
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	ae 2c       	mov	r10, r14
    24aa:	b1 2c       	mov	r11, r1
    24ac:	2a 15       	cp	r18, r10
    24ae:	3b 05       	cpc	r19, r11
    24b0:	58 f3       	brcs	.-42     	; 0x2488 <draw_char+0xa6>
    24b2:	25 b1       	in	r18, 0x05	; 5
    24b4:	2e 7f       	andi	r18, 0xFE	; 254
    24b6:	25 b9       	out	0x05, r18	; 5
    24b8:	fa 01       	movw	r30, r20
    24ba:	24 91       	lpm	r18, Z
    24bc:	44 91       	lpm	r20, Z
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	64 2f       	mov	r22, r20
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	ad 01       	movw	r20, r26
    24c6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <setXY>
    24ca:	8c e2       	ldi	r24, 0x2C	; 44
    24cc:	0e 94 88 10 	call	0x2110	; 0x2110 <send_command>
    24d0:	85 b1       	in	r24, 0x05	; 5
    24d2:	84 60       	ori	r24, 0x04	; 4
    24d4:	85 b9       	out	0x05, r24	; 5
    24d6:	81 2c       	mov	r8, r1
    24d8:	91 2c       	mov	r9, r1
    24da:	26 c0       	rjmp	.+76     	; 0x2528 <draw_char+0x146>
    24dc:	f4 01       	movw	r30, r8
    24de:	e6 0d       	add	r30, r6
    24e0:	f1 1d       	adc	r31, r1
    24e2:	23 e0       	ldi	r18, 0x03	; 3
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	2c 0f       	add	r18, r28
    24e8:	3d 1f       	adc	r19, r29
    24ea:	e2 0f       	add	r30, r18
    24ec:	f3 1f       	adc	r31, r19
    24ee:	70 80       	ld	r7, Z
    24f0:	10 e0       	ldi	r17, 0x00	; 0
    24f2:	11 c0       	rjmp	.+34     	; 0x2516 <draw_char+0x134>
    24f4:	77 20       	and	r7, r7
    24f6:	3c f4       	brge	.+14     	; 0x2506 <draw_char+0x124>
    24f8:	85 2d       	mov	r24, r5
    24fa:	0e 94 76 10 	call	0x20ec	; 0x20ec <spi_sendbyte>
    24fe:	80 2f       	mov	r24, r16
    2500:	0e 94 76 10 	call	0x20ec	; 0x20ec <spi_sendbyte>
    2504:	06 c0       	rjmp	.+12     	; 0x2512 <draw_char+0x130>
    2506:	8c 2d       	mov	r24, r12
    2508:	0e 94 76 10 	call	0x20ec	; 0x20ec <spi_sendbyte>
    250c:	8d 2d       	mov	r24, r13
    250e:	0e 94 76 10 	call	0x20ec	; 0x20ec <spi_sendbyte>
    2512:	77 0c       	add	r7, r7
    2514:	1f 5f       	subi	r17, 0xFF	; 255
    2516:	18 30       	cpi	r17, 0x08	; 8
    2518:	68 f3       	brcs	.-38     	; 0x24f4 <draw_char+0x112>
    251a:	63 94       	inc	r6
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <draw_char+0x13e>
    251e:	61 2c       	mov	r6, r1
    2520:	6f 14       	cp	r6, r15
    2522:	e0 f2       	brcs	.-72     	; 0x24dc <draw_char+0xfa>
    2524:	8f 0c       	add	r8, r15
    2526:	91 1c       	adc	r9, r1
    2528:	8a 14       	cp	r8, r10
    252a:	9b 04       	cpc	r9, r11
    252c:	c0 f3       	brcs	.-16     	; 0x251e <draw_char+0x13c>
    252e:	85 b1       	in	r24, 0x05	; 5
    2530:	81 60       	ori	r24, 0x01	; 1
    2532:	85 b9       	out	0x05, r24	; 5
    2534:	ce 56       	subi	r28, 0x6E	; 110
    2536:	de 4f       	sbci	r29, 0xFE	; 254
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	df 90       	pop	r13
    2550:	cf 90       	pop	r12
    2552:	bf 90       	pop	r11
    2554:	af 90       	pop	r10
    2556:	9f 90       	pop	r9
    2558:	8f 90       	pop	r8
    255a:	7f 90       	pop	r7
    255c:	6f 90       	pop	r6
    255e:	5f 90       	pop	r5
    2560:	08 95       	ret

00002562 <draw_string>:
    2562:	3f 92       	push	r3
    2564:	4f 92       	push	r4
    2566:	5f 92       	push	r5
    2568:	6f 92       	push	r6
    256a:	7f 92       	push	r7
    256c:	8f 92       	push	r8
    256e:	9f 92       	push	r9
    2570:	af 92       	push	r10
    2572:	bf 92       	push	r11
    2574:	cf 92       	push	r12
    2576:	df 92       	push	r13
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	5c 01       	movw	r10, r24
    2586:	3b 01       	movw	r6, r22
    2588:	ea 01       	movw	r28, r20
    258a:	32 2e       	mov	r3, r18
    258c:	48 01       	movw	r8, r16
    258e:	27 01       	movw	r4, r14
    2590:	12 c0       	rjmp	.+36     	; 0x25b6 <draw_string+0x54>
    2592:	21 96       	adiw	r28, 0x01	; 1
    2594:	76 01       	movw	r14, r12
    2596:	82 01       	movw	r16, r4
    2598:	94 01       	movw	r18, r8
    259a:	b3 01       	movw	r22, r6
    259c:	c5 01       	movw	r24, r10
    259e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <draw_char>
    25a2:	f6 01       	movw	r30, r12
    25a4:	24 91       	lpm	r18, Z
    25a6:	83 2d       	mov	r24, r3
    25a8:	03 2c       	mov	r0, r3
    25aa:	00 0c       	add	r0, r0
    25ac:	99 0b       	sbc	r25, r25
    25ae:	82 0f       	add	r24, r18
    25b0:	91 1d       	adc	r25, r1
    25b2:	a8 0e       	add	r10, r24
    25b4:	b9 1e       	adc	r11, r25
    25b6:	48 81       	ld	r20, Y
    25b8:	41 11       	cpse	r20, r1
    25ba:	eb cf       	rjmp	.-42     	; 0x2592 <draw_string+0x30>
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	df 90       	pop	r13
    25ca:	cf 90       	pop	r12
    25cc:	bf 90       	pop	r11
    25ce:	af 90       	pop	r10
    25d0:	9f 90       	pop	r9
    25d2:	8f 90       	pop	r8
    25d4:	7f 90       	pop	r7
    25d6:	6f 90       	pop	r6
    25d8:	5f 90       	pop	r5
    25da:	4f 90       	pop	r4
    25dc:	3f 90       	pop	r3
    25de:	08 95       	ret

000025e0 <draw_number>:

void draw_number(uint16_t xpos,  uint16_t ypos, int32_t number, int8_t space, uint16_t bcolor,  uint16_t fcolor, uint8_t *font){
    25e0:	3f 92       	push	r3
    25e2:	4f 92       	push	r4
    25e4:	5f 92       	push	r5
    25e6:	6f 92       	push	r6
    25e8:	7f 92       	push	r7
    25ea:	8f 92       	push	r8
    25ec:	9f 92       	push	r9
    25ee:	af 92       	push	r10
    25f0:	bf 92       	push	r11
    25f2:	cf 92       	push	r12
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	2a 97       	sbiw	r28, 0x0a	; 10
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	3c 01       	movw	r6, r24
    2614:	2b 01       	movw	r4, r22
    2616:	30 2e       	mov	r3, r16
    2618:	87 01       	movw	r16, r14
    261a:	76 01       	movw	r14, r12
    261c:	65 01       	movw	r12, r10
	char buf[10] = {0};
    261e:	ce 01       	movw	r24, r28
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	4c 01       	movw	r8, r24
    2624:	8a e0       	ldi	r24, 0x0A	; 10
    2626:	f4 01       	movw	r30, r8
    2628:	11 92       	st	Z+, r1
    262a:	8a 95       	dec	r24
    262c:	e9 f7       	brne	.-6      	; 0x2628 <draw_number+0x48>
	uint8_t len = sprintf(buf, "%li", number);					//определяем длину числа
    262e:	5f 93       	push	r21
    2630:	4f 93       	push	r20
    2632:	3f 93       	push	r19
    2634:	2f 93       	push	r18
    2636:	8e ee       	ldi	r24, 0xEE	; 238
    2638:	92 e0       	ldi	r25, 0x02	; 2
    263a:	9f 93       	push	r25
    263c:	8f 93       	push	r24
    263e:	9f 92       	push	r9
    2640:	8f 92       	push	r8
    2642:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	memset(buf + len, ' ', sizeof(buf) - len - 1);				// очищаем лишние позиции                                                                                   
    2646:	99 27       	eor	r25, r25
    2648:	49 e0       	ldi	r20, 0x09	; 9
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	48 1b       	sub	r20, r24
    264e:	59 0b       	sbc	r21, r25
    2650:	60 e2       	ldi	r22, 0x20	; 32
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	88 0d       	add	r24, r8
    2656:	99 1d       	adc	r25, r9
    2658:	0e 94 69 18 	call	0x30d2	; 0x30d2 <memset>
	draw_string(xpos,ypos,buf,space,bcolor,fcolor,font);
    265c:	23 2d       	mov	r18, r3
    265e:	a4 01       	movw	r20, r8
    2660:	b2 01       	movw	r22, r4
    2662:	c3 01       	movw	r24, r6
    2664:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
}
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	2a 96       	adiw	r28, 0x0a	; 10
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	7f 90       	pop	r7
    2698:	6f 90       	pop	r6
    269a:	5f 90       	pop	r5
    269c:	4f 90       	pop	r4
    269e:	3f 90       	pop	r3
    26a0:	08 95       	ret

000026a2 <draw_hexnumber>:

void draw_hexnumber(uint16_t xpos,  uint16_t ypos, int32_t number, uint8_t space, uint16_t bcolor,  uint16_t fcolor, uint8_t *font){
    26a2:	2f 92       	push	r2
    26a4:	3f 92       	push	r3
    26a6:	5f 92       	push	r5
    26a8:	6f 92       	push	r6
    26aa:	7f 92       	push	r7
    26ac:	8f 92       	push	r8
    26ae:	9f 92       	push	r9
    26b0:	af 92       	push	r10
    26b2:	bf 92       	push	r11
    26b4:	cf 92       	push	r12
    26b6:	df 92       	push	r13
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	2a 97       	sbiw	r28, 0x0a	; 10
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	3c 01       	movw	r6, r24
    26d6:	1b 01       	movw	r2, r22
    26d8:	50 2e       	mov	r5, r16
    26da:	87 01       	movw	r16, r14
    26dc:	76 01       	movw	r14, r12
    26de:	65 01       	movw	r12, r10
    char buf[10] = {0};
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	4c 01       	movw	r8, r24
    26e6:	8a e0       	ldi	r24, 0x0A	; 10
    26e8:	f4 01       	movw	r30, r8
    26ea:	11 92       	st	Z+, r1
    26ec:	8a 95       	dec	r24
    26ee:	e9 f7       	brne	.-6      	; 0x26ea <draw_hexnumber+0x48>
	sprintf(buf, "%s%lx","0x", number);
    26f0:	5f 93       	push	r21
    26f2:	4f 93       	push	r20
    26f4:	3f 93       	push	r19
    26f6:	2f 93       	push	r18
    26f8:	82 ef       	ldi	r24, 0xF2	; 242
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	9f 93       	push	r25
    26fe:	8f 93       	push	r24
    2700:	85 ef       	ldi	r24, 0xF5	; 245
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	9f 93       	push	r25
    2706:	8f 93       	push	r24
    2708:	9f 92       	push	r9
    270a:	8f 92       	push	r8
    270c:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	draw_string(xpos, ypos, buf, space, bcolor, fcolor, font);
    2710:	25 2d       	mov	r18, r5
    2712:	a4 01       	movw	r20, r8
    2714:	b1 01       	movw	r22, r2
    2716:	c3 01       	movw	r24, r6
    2718:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
}
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	2a 96       	adiw	r28, 0x0a	; 10
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	1f 91       	pop	r17
    2738:	0f 91       	pop	r16
    273a:	ff 90       	pop	r15
    273c:	ef 90       	pop	r14
    273e:	df 90       	pop	r13
    2740:	cf 90       	pop	r12
    2742:	bf 90       	pop	r11
    2744:	af 90       	pop	r10
    2746:	9f 90       	pop	r9
    2748:	8f 90       	pop	r8
    274a:	7f 90       	pop	r7
    274c:	6f 90       	pop	r6
    274e:	5f 90       	pop	r5
    2750:	3f 90       	pop	r3
    2752:	2f 90       	pop	r2
    2754:	08 95       	ret

00002756 <draw_float_number>:

//draw_float_number(60,70,84.67,"%0.2f",0,BACKGROUND_COLOR,GREEN,TinyFont);
void draw_float_number(uint16_t xpos,  uint16_t ypos, float number, const char *dimens, uint8_t space, uint16_t bcolor,  uint16_t fcolor, uint8_t *font){
    2756:	3f 92       	push	r3
    2758:	4f 92       	push	r4
    275a:	5f 92       	push	r5
    275c:	6f 92       	push	r6
    275e:	7f 92       	push	r7
    2760:	8f 92       	push	r8
    2762:	9f 92       	push	r9
    2764:	af 92       	push	r10
    2766:	bf 92       	push	r11
    2768:	cf 92       	push	r12
    276a:	df 92       	push	r13
    276c:	ef 92       	push	r14
    276e:	ff 92       	push	r15
    2770:	0f 93       	push	r16
    2772:	1f 93       	push	r17
    2774:	cf 93       	push	r28
    2776:	df 93       	push	r29
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	2c 97       	sbiw	r28, 0x0c	; 12
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	3c 01       	movw	r6, r24
    278a:	7c 87       	std	Y+12, r23	; 0x0c
    278c:	6b 87       	std	Y+11, r22	; 0x0b
    278e:	80 2f       	mov	r24, r16
    2790:	91 2f       	mov	r25, r17
    2792:	3e 2c       	mov	r3, r14
    2794:	86 01       	movw	r16, r12
    2796:	75 01       	movw	r14, r10
    2798:	64 01       	movw	r12, r8
	char buf[10] = {0};
    279a:	be 01       	movw	r22, r28
    279c:	6f 5f       	subi	r22, 0xFF	; 255
    279e:	7f 4f       	sbci	r23, 0xFF	; 255
    27a0:	2b 01       	movw	r4, r22
    27a2:	6a e0       	ldi	r22, 0x0A	; 10
    27a4:	f2 01       	movw	r30, r4
    27a6:	11 92       	st	Z+, r1
    27a8:	6a 95       	dec	r22
    27aa:	e9 f7       	brne	.-6      	; 0x27a6 <draw_float_number+0x50>
	sprintf(buf, dimens, number);
    27ac:	5f 93       	push	r21
    27ae:	4f 93       	push	r20
    27b0:	3f 93       	push	r19
    27b2:	2f 93       	push	r18
    27b4:	9f 93       	push	r25
    27b6:	8f 93       	push	r24
    27b8:	5f 92       	push	r5
    27ba:	4f 92       	push	r4
    27bc:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	draw_string(xpos, ypos, buf, space, bcolor, fcolor, font);
    27c0:	23 2d       	mov	r18, r3
    27c2:	a2 01       	movw	r20, r4
    27c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c8:	c3 01       	movw	r24, r6
    27ca:	0e 94 b1 12 	call	0x2562	; 0x2562 <draw_string>
}
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	2c 96       	adiw	r28, 0x0c	; 12
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	cf 90       	pop	r12
    27f4:	bf 90       	pop	r11
    27f6:	af 90       	pop	r10
    27f8:	9f 90       	pop	r9
    27fa:	8f 90       	pop	r8
    27fc:	7f 90       	pop	r7
    27fe:	6f 90       	pop	r6
    2800:	5f 90       	pop	r5
    2802:	4f 90       	pop	r4
    2804:	3f 90       	pop	r3
    2806:	08 95       	ret

00002808 <uart_init>:
}

uint8_t uart_in(void){												//прием байта из UART
	while(!READ_BIT(UCSR0A,(1<<RXC0)));								//ожидание прихода байта
	return UDR0;										
}
    2808:	88 e1       	ldi	r24, 0x18	; 24
    280a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    280e:	86 e0       	ldi	r24, 0x06	; 6
    2810:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    2814:	87 e6       	ldi	r24, 0x67	; 103
    2816:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    281a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    281e:	08 95       	ret

00002820 <uart_out>:
    2820:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2824:	95 ff       	sbrs	r25, 5
    2826:	fc cf       	rjmp	.-8      	; 0x2820 <uart_out>
    2828:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    282c:	08 95       	ret

0000282e <print_string>:

void print_string(char *string){
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	ec 01       	movw	r28, r24
	while(*string) uart_out(*string++);
    2834:	03 c0       	rjmp	.+6      	; 0x283c <print_string+0xe>
    2836:	21 96       	adiw	r28, 0x01	; 1
    2838:	0e 94 10 14 	call	0x2820	; 0x2820 <uart_out>
    283c:	88 81       	ld	r24, Y
    283e:	81 11       	cpse	r24, r1
    2840:	fa cf       	rjmp	.-12     	; 0x2836 <print_string+0x8>
}
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <print_number>:

void print_number(uint16_t number){
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	00 d0       	rcall	.+0      	; 0x2852 <print_number+0xa>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <print_number+0xc>
    2854:	1f 92       	push	r1
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	char num_m[5]={0,};
    285a:	8e 01       	movw	r16, r28
    285c:	0f 5f       	subi	r16, 0xFF	; 255
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	25 e0       	ldi	r18, 0x05	; 5
    2862:	f8 01       	movw	r30, r16
    2864:	11 92       	st	Z+, r1
    2866:	2a 95       	dec	r18
    2868:	e9 f7       	brne	.-6      	; 0x2864 <print_number+0x1c>
	sprintf(num_m,"%d", number);
    286a:	9f 93       	push	r25
    286c:	8f 93       	push	r24
    286e:	8b ef       	ldi	r24, 0xFB	; 251
    2870:	92 e0       	ldi	r25, 0x02	; 2
    2872:	9f 93       	push	r25
    2874:	8f 93       	push	r24
    2876:	1f 93       	push	r17
    2878:	0f 93       	push	r16
    287a:	0e 94 70 18 	call	0x30e0	; 0x30e0 <sprintf>
	print_string(num_m);
    287e:	c8 01       	movw	r24, r16
    2880:	0e 94 17 14 	call	0x282e	; 0x282e <print_string>
}
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <__subsf3>:
    28a4:	50 58       	subi	r21, 0x80	; 128

000028a6 <__addsf3>:
    28a6:	bb 27       	eor	r27, r27
    28a8:	aa 27       	eor	r26, r26
    28aa:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__addsf3x>
    28ae:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__fp_round>
    28b2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__fp_pscA>
    28b6:	38 f0       	brcs	.+14     	; 0x28c6 <__addsf3+0x20>
    28b8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__fp_pscB>
    28bc:	20 f0       	brcs	.+8      	; 0x28c6 <__addsf3+0x20>
    28be:	39 f4       	brne	.+14     	; 0x28ce <__addsf3+0x28>
    28c0:	9f 3f       	cpi	r25, 0xFF	; 255
    28c2:	19 f4       	brne	.+6      	; 0x28ca <__addsf3+0x24>
    28c4:	26 f4       	brtc	.+8      	; 0x28ce <__addsf3+0x28>
    28c6:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__fp_nan>
    28ca:	0e f4       	brtc	.+2      	; 0x28ce <__addsf3+0x28>
    28cc:	e0 95       	com	r30
    28ce:	e7 fb       	bst	r30, 7
    28d0:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>

000028d4 <__addsf3x>:
    28d4:	e9 2f       	mov	r30, r25
    28d6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fp_split3>
    28da:	58 f3       	brcs	.-42     	; 0x28b2 <__addsf3+0xc>
    28dc:	ba 17       	cp	r27, r26
    28de:	62 07       	cpc	r22, r18
    28e0:	73 07       	cpc	r23, r19
    28e2:	84 07       	cpc	r24, r20
    28e4:	95 07       	cpc	r25, r21
    28e6:	20 f0       	brcs	.+8      	; 0x28f0 <__addsf3x+0x1c>
    28e8:	79 f4       	brne	.+30     	; 0x2908 <__addsf3x+0x34>
    28ea:	a6 f5       	brtc	.+104    	; 0x2954 <__addsf3x+0x80>
    28ec:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__fp_zero>
    28f0:	0e f4       	brtc	.+2      	; 0x28f4 <__addsf3x+0x20>
    28f2:	e0 95       	com	r30
    28f4:	0b 2e       	mov	r0, r27
    28f6:	ba 2f       	mov	r27, r26
    28f8:	a0 2d       	mov	r26, r0
    28fa:	0b 01       	movw	r0, r22
    28fc:	b9 01       	movw	r22, r18
    28fe:	90 01       	movw	r18, r0
    2900:	0c 01       	movw	r0, r24
    2902:	ca 01       	movw	r24, r20
    2904:	a0 01       	movw	r20, r0
    2906:	11 24       	eor	r1, r1
    2908:	ff 27       	eor	r31, r31
    290a:	59 1b       	sub	r21, r25
    290c:	99 f0       	breq	.+38     	; 0x2934 <__addsf3x+0x60>
    290e:	59 3f       	cpi	r21, 0xF9	; 249
    2910:	50 f4       	brcc	.+20     	; 0x2926 <__addsf3x+0x52>
    2912:	50 3e       	cpi	r21, 0xE0	; 224
    2914:	68 f1       	brcs	.+90     	; 0x2970 <__addsf3x+0x9c>
    2916:	1a 16       	cp	r1, r26
    2918:	f0 40       	sbci	r31, 0x00	; 0
    291a:	a2 2f       	mov	r26, r18
    291c:	23 2f       	mov	r18, r19
    291e:	34 2f       	mov	r19, r20
    2920:	44 27       	eor	r20, r20
    2922:	58 5f       	subi	r21, 0xF8	; 248
    2924:	f3 cf       	rjmp	.-26     	; 0x290c <__addsf3x+0x38>
    2926:	46 95       	lsr	r20
    2928:	37 95       	ror	r19
    292a:	27 95       	ror	r18
    292c:	a7 95       	ror	r26
    292e:	f0 40       	sbci	r31, 0x00	; 0
    2930:	53 95       	inc	r21
    2932:	c9 f7       	brne	.-14     	; 0x2926 <__addsf3x+0x52>
    2934:	7e f4       	brtc	.+30     	; 0x2954 <__addsf3x+0x80>
    2936:	1f 16       	cp	r1, r31
    2938:	ba 0b       	sbc	r27, r26
    293a:	62 0b       	sbc	r22, r18
    293c:	73 0b       	sbc	r23, r19
    293e:	84 0b       	sbc	r24, r20
    2940:	ba f0       	brmi	.+46     	; 0x2970 <__addsf3x+0x9c>
    2942:	91 50       	subi	r25, 0x01	; 1
    2944:	a1 f0       	breq	.+40     	; 0x296e <__addsf3x+0x9a>
    2946:	ff 0f       	add	r31, r31
    2948:	bb 1f       	adc	r27, r27
    294a:	66 1f       	adc	r22, r22
    294c:	77 1f       	adc	r23, r23
    294e:	88 1f       	adc	r24, r24
    2950:	c2 f7       	brpl	.-16     	; 0x2942 <__addsf3x+0x6e>
    2952:	0e c0       	rjmp	.+28     	; 0x2970 <__addsf3x+0x9c>
    2954:	ba 0f       	add	r27, r26
    2956:	62 1f       	adc	r22, r18
    2958:	73 1f       	adc	r23, r19
    295a:	84 1f       	adc	r24, r20
    295c:	48 f4       	brcc	.+18     	; 0x2970 <__addsf3x+0x9c>
    295e:	87 95       	ror	r24
    2960:	77 95       	ror	r23
    2962:	67 95       	ror	r22
    2964:	b7 95       	ror	r27
    2966:	f7 95       	ror	r31
    2968:	9e 3f       	cpi	r25, 0xFE	; 254
    296a:	08 f0       	brcs	.+2      	; 0x296e <__addsf3x+0x9a>
    296c:	b0 cf       	rjmp	.-160    	; 0x28ce <__addsf3+0x28>
    296e:	93 95       	inc	r25
    2970:	88 0f       	add	r24, r24
    2972:	08 f0       	brcs	.+2      	; 0x2976 <__addsf3x+0xa2>
    2974:	99 27       	eor	r25, r25
    2976:	ee 0f       	add	r30, r30
    2978:	97 95       	ror	r25
    297a:	87 95       	ror	r24
    297c:	08 95       	ret

0000297e <__divsf3>:
    297e:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divsf3x>
    2982:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__fp_round>
    2986:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__fp_pscB>
    298a:	58 f0       	brcs	.+22     	; 0x29a2 <__divsf3+0x24>
    298c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__fp_pscA>
    2990:	40 f0       	brcs	.+16     	; 0x29a2 <__divsf3+0x24>
    2992:	29 f4       	brne	.+10     	; 0x299e <__divsf3+0x20>
    2994:	5f 3f       	cpi	r21, 0xFF	; 255
    2996:	29 f0       	breq	.+10     	; 0x29a2 <__divsf3+0x24>
    2998:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    299c:	51 11       	cpse	r21, r1
    299e:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>
    29a2:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__fp_nan>

000029a6 <__divsf3x>:
    29a6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fp_split3>
    29aa:	68 f3       	brcs	.-38     	; 0x2986 <__divsf3+0x8>

000029ac <__divsf3_pse>:
    29ac:	99 23       	and	r25, r25
    29ae:	b1 f3       	breq	.-20     	; 0x299c <__divsf3+0x1e>
    29b0:	55 23       	and	r21, r21
    29b2:	91 f3       	breq	.-28     	; 0x2998 <__divsf3+0x1a>
    29b4:	95 1b       	sub	r25, r21
    29b6:	55 0b       	sbc	r21, r21
    29b8:	bb 27       	eor	r27, r27
    29ba:	aa 27       	eor	r26, r26
    29bc:	62 17       	cp	r22, r18
    29be:	73 07       	cpc	r23, r19
    29c0:	84 07       	cpc	r24, r20
    29c2:	38 f0       	brcs	.+14     	; 0x29d2 <__divsf3_pse+0x26>
    29c4:	9f 5f       	subi	r25, 0xFF	; 255
    29c6:	5f 4f       	sbci	r21, 0xFF	; 255
    29c8:	22 0f       	add	r18, r18
    29ca:	33 1f       	adc	r19, r19
    29cc:	44 1f       	adc	r20, r20
    29ce:	aa 1f       	adc	r26, r26
    29d0:	a9 f3       	breq	.-22     	; 0x29bc <__divsf3_pse+0x10>
    29d2:	35 d0       	rcall	.+106    	; 0x2a3e <__divsf3_pse+0x92>
    29d4:	0e 2e       	mov	r0, r30
    29d6:	3a f0       	brmi	.+14     	; 0x29e6 <__divsf3_pse+0x3a>
    29d8:	e0 e8       	ldi	r30, 0x80	; 128
    29da:	32 d0       	rcall	.+100    	; 0x2a40 <__divsf3_pse+0x94>
    29dc:	91 50       	subi	r25, 0x01	; 1
    29de:	50 40       	sbci	r21, 0x00	; 0
    29e0:	e6 95       	lsr	r30
    29e2:	00 1c       	adc	r0, r0
    29e4:	ca f7       	brpl	.-14     	; 0x29d8 <__divsf3_pse+0x2c>
    29e6:	2b d0       	rcall	.+86     	; 0x2a3e <__divsf3_pse+0x92>
    29e8:	fe 2f       	mov	r31, r30
    29ea:	29 d0       	rcall	.+82     	; 0x2a3e <__divsf3_pse+0x92>
    29ec:	66 0f       	add	r22, r22
    29ee:	77 1f       	adc	r23, r23
    29f0:	88 1f       	adc	r24, r24
    29f2:	bb 1f       	adc	r27, r27
    29f4:	26 17       	cp	r18, r22
    29f6:	37 07       	cpc	r19, r23
    29f8:	48 07       	cpc	r20, r24
    29fa:	ab 07       	cpc	r26, r27
    29fc:	b0 e8       	ldi	r27, 0x80	; 128
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <__divsf3_pse+0x56>
    2a00:	bb 0b       	sbc	r27, r27
    2a02:	80 2d       	mov	r24, r0
    2a04:	bf 01       	movw	r22, r30
    2a06:	ff 27       	eor	r31, r31
    2a08:	93 58       	subi	r25, 0x83	; 131
    2a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0c:	3a f0       	brmi	.+14     	; 0x2a1c <__divsf3_pse+0x70>
    2a0e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a10:	51 05       	cpc	r21, r1
    2a12:	78 f0       	brcs	.+30     	; 0x2a32 <__divsf3_pse+0x86>
    2a14:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    2a18:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>
    2a1c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a1e:	e4 f3       	brlt	.-8      	; 0x2a18 <__divsf3_pse+0x6c>
    2a20:	98 3e       	cpi	r25, 0xE8	; 232
    2a22:	d4 f3       	brlt	.-12     	; 0x2a18 <__divsf3_pse+0x6c>
    2a24:	86 95       	lsr	r24
    2a26:	77 95       	ror	r23
    2a28:	67 95       	ror	r22
    2a2a:	b7 95       	ror	r27
    2a2c:	f7 95       	ror	r31
    2a2e:	9f 5f       	subi	r25, 0xFF	; 255
    2a30:	c9 f7       	brne	.-14     	; 0x2a24 <__divsf3_pse+0x78>
    2a32:	88 0f       	add	r24, r24
    2a34:	91 1d       	adc	r25, r1
    2a36:	96 95       	lsr	r25
    2a38:	87 95       	ror	r24
    2a3a:	97 f9       	bld	r25, 7
    2a3c:	08 95       	ret
    2a3e:	e1 e0       	ldi	r30, 0x01	; 1
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	bb 1f       	adc	r27, r27
    2a48:	62 17       	cp	r22, r18
    2a4a:	73 07       	cpc	r23, r19
    2a4c:	84 07       	cpc	r24, r20
    2a4e:	ba 07       	cpc	r27, r26
    2a50:	20 f0       	brcs	.+8      	; 0x2a5a <__divsf3_pse+0xae>
    2a52:	62 1b       	sub	r22, r18
    2a54:	73 0b       	sbc	r23, r19
    2a56:	84 0b       	sbc	r24, r20
    2a58:	ba 0b       	sbc	r27, r26
    2a5a:	ee 1f       	adc	r30, r30
    2a5c:	88 f7       	brcc	.-30     	; 0x2a40 <__divsf3_pse+0x94>
    2a5e:	e0 95       	com	r30
    2a60:	08 95       	ret

00002a62 <__fixsfsi>:
    2a62:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__fixunssfsi>
    2a66:	68 94       	set
    2a68:	b1 11       	cpse	r27, r1
    2a6a:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>
    2a6e:	08 95       	ret

00002a70 <__fixunssfsi>:
    2a70:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__fp_splitA>
    2a74:	88 f0       	brcs	.+34     	; 0x2a98 <__fixunssfsi+0x28>
    2a76:	9f 57       	subi	r25, 0x7F	; 127
    2a78:	98 f0       	brcs	.+38     	; 0x2aa0 <__fixunssfsi+0x30>
    2a7a:	b9 2f       	mov	r27, r25
    2a7c:	99 27       	eor	r25, r25
    2a7e:	b7 51       	subi	r27, 0x17	; 23
    2a80:	b0 f0       	brcs	.+44     	; 0x2aae <__fixunssfsi+0x3e>
    2a82:	e1 f0       	breq	.+56     	; 0x2abc <__fixunssfsi+0x4c>
    2a84:	66 0f       	add	r22, r22
    2a86:	77 1f       	adc	r23, r23
    2a88:	88 1f       	adc	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	1a f0       	brmi	.+6      	; 0x2a94 <__fixunssfsi+0x24>
    2a8e:	ba 95       	dec	r27
    2a90:	c9 f7       	brne	.-14     	; 0x2a84 <__fixunssfsi+0x14>
    2a92:	14 c0       	rjmp	.+40     	; 0x2abc <__fixunssfsi+0x4c>
    2a94:	b1 30       	cpi	r27, 0x01	; 1
    2a96:	91 f0       	breq	.+36     	; 0x2abc <__fixunssfsi+0x4c>
    2a98:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__fp_zero>
    2a9c:	b1 e0       	ldi	r27, 0x01	; 1
    2a9e:	08 95       	ret
    2aa0:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__fp_zero>
    2aa4:	67 2f       	mov	r22, r23
    2aa6:	78 2f       	mov	r23, r24
    2aa8:	88 27       	eor	r24, r24
    2aaa:	b8 5f       	subi	r27, 0xF8	; 248
    2aac:	39 f0       	breq	.+14     	; 0x2abc <__fixunssfsi+0x4c>
    2aae:	b9 3f       	cpi	r27, 0xF9	; 249
    2ab0:	cc f3       	brlt	.-14     	; 0x2aa4 <__fixunssfsi+0x34>
    2ab2:	86 95       	lsr	r24
    2ab4:	77 95       	ror	r23
    2ab6:	67 95       	ror	r22
    2ab8:	b3 95       	inc	r27
    2aba:	d9 f7       	brne	.-10     	; 0x2ab2 <__fixunssfsi+0x42>
    2abc:	3e f4       	brtc	.+14     	; 0x2acc <__fixunssfsi+0x5c>
    2abe:	90 95       	com	r25
    2ac0:	80 95       	com	r24
    2ac2:	70 95       	com	r23
    2ac4:	61 95       	neg	r22
    2ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aca:	9f 4f       	sbci	r25, 0xFF	; 255
    2acc:	08 95       	ret

00002ace <__floatunsisf>:
    2ace:	e8 94       	clt
    2ad0:	09 c0       	rjmp	.+18     	; 0x2ae4 <__floatsisf+0x12>

00002ad2 <__floatsisf>:
    2ad2:	97 fb       	bst	r25, 7
    2ad4:	3e f4       	brtc	.+14     	; 0x2ae4 <__floatsisf+0x12>
    2ad6:	90 95       	com	r25
    2ad8:	80 95       	com	r24
    2ada:	70 95       	com	r23
    2adc:	61 95       	neg	r22
    2ade:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae4:	99 23       	and	r25, r25
    2ae6:	a9 f0       	breq	.+42     	; 0x2b12 <__floatsisf+0x40>
    2ae8:	f9 2f       	mov	r31, r25
    2aea:	96 e9       	ldi	r25, 0x96	; 150
    2aec:	bb 27       	eor	r27, r27
    2aee:	93 95       	inc	r25
    2af0:	f6 95       	lsr	r31
    2af2:	87 95       	ror	r24
    2af4:	77 95       	ror	r23
    2af6:	67 95       	ror	r22
    2af8:	b7 95       	ror	r27
    2afa:	f1 11       	cpse	r31, r1
    2afc:	f8 cf       	rjmp	.-16     	; 0x2aee <__floatsisf+0x1c>
    2afe:	fa f4       	brpl	.+62     	; 0x2b3e <__floatsisf+0x6c>
    2b00:	bb 0f       	add	r27, r27
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <__floatsisf+0x36>
    2b04:	60 ff       	sbrs	r22, 0
    2b06:	1b c0       	rjmp	.+54     	; 0x2b3e <__floatsisf+0x6c>
    2b08:	6f 5f       	subi	r22, 0xFF	; 255
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	16 c0       	rjmp	.+44     	; 0x2b3e <__floatsisf+0x6c>
    2b12:	88 23       	and	r24, r24
    2b14:	11 f0       	breq	.+4      	; 0x2b1a <__floatsisf+0x48>
    2b16:	96 e9       	ldi	r25, 0x96	; 150
    2b18:	11 c0       	rjmp	.+34     	; 0x2b3c <__floatsisf+0x6a>
    2b1a:	77 23       	and	r23, r23
    2b1c:	21 f0       	breq	.+8      	; 0x2b26 <__floatsisf+0x54>
    2b1e:	9e e8       	ldi	r25, 0x8E	; 142
    2b20:	87 2f       	mov	r24, r23
    2b22:	76 2f       	mov	r23, r22
    2b24:	05 c0       	rjmp	.+10     	; 0x2b30 <__floatsisf+0x5e>
    2b26:	66 23       	and	r22, r22
    2b28:	71 f0       	breq	.+28     	; 0x2b46 <__floatsisf+0x74>
    2b2a:	96 e8       	ldi	r25, 0x86	; 134
    2b2c:	86 2f       	mov	r24, r22
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	2a f0       	brmi	.+10     	; 0x2b3e <__floatsisf+0x6c>
    2b34:	9a 95       	dec	r25
    2b36:	66 0f       	add	r22, r22
    2b38:	77 1f       	adc	r23, r23
    2b3a:	88 1f       	adc	r24, r24
    2b3c:	da f7       	brpl	.-10     	; 0x2b34 <__floatsisf+0x62>
    2b3e:	88 0f       	add	r24, r24
    2b40:	96 95       	lsr	r25
    2b42:	87 95       	ror	r24
    2b44:	97 f9       	bld	r25, 7
    2b46:	08 95       	ret

00002b48 <__fp_inf>:
    2b48:	97 f9       	bld	r25, 7
    2b4a:	9f 67       	ori	r25, 0x7F	; 127
    2b4c:	80 e8       	ldi	r24, 0x80	; 128
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	08 95       	ret

00002b54 <__fp_nan>:
    2b54:	9f ef       	ldi	r25, 0xFF	; 255
    2b56:	80 ec       	ldi	r24, 0xC0	; 192
    2b58:	08 95       	ret

00002b5a <__fp_pscA>:
    2b5a:	00 24       	eor	r0, r0
    2b5c:	0a 94       	dec	r0
    2b5e:	16 16       	cp	r1, r22
    2b60:	17 06       	cpc	r1, r23
    2b62:	18 06       	cpc	r1, r24
    2b64:	09 06       	cpc	r0, r25
    2b66:	08 95       	ret

00002b68 <__fp_pscB>:
    2b68:	00 24       	eor	r0, r0
    2b6a:	0a 94       	dec	r0
    2b6c:	12 16       	cp	r1, r18
    2b6e:	13 06       	cpc	r1, r19
    2b70:	14 06       	cpc	r1, r20
    2b72:	05 06       	cpc	r0, r21
    2b74:	08 95       	ret

00002b76 <__fp_round>:
    2b76:	09 2e       	mov	r0, r25
    2b78:	03 94       	inc	r0
    2b7a:	00 0c       	add	r0, r0
    2b7c:	11 f4       	brne	.+4      	; 0x2b82 <__fp_round+0xc>
    2b7e:	88 23       	and	r24, r24
    2b80:	52 f0       	brmi	.+20     	; 0x2b96 <__fp_round+0x20>
    2b82:	bb 0f       	add	r27, r27
    2b84:	40 f4       	brcc	.+16     	; 0x2b96 <__fp_round+0x20>
    2b86:	bf 2b       	or	r27, r31
    2b88:	11 f4       	brne	.+4      	; 0x2b8e <__fp_round+0x18>
    2b8a:	60 ff       	sbrs	r22, 0
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <__fp_round+0x20>
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8f 4f       	sbci	r24, 0xFF	; 255
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	08 95       	ret

00002b98 <__fp_split3>:
    2b98:	57 fd       	sbrc	r21, 7
    2b9a:	90 58       	subi	r25, 0x80	; 128
    2b9c:	44 0f       	add	r20, r20
    2b9e:	55 1f       	adc	r21, r21
    2ba0:	59 f0       	breq	.+22     	; 0x2bb8 <__fp_splitA+0x10>
    2ba2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ba4:	71 f0       	breq	.+28     	; 0x2bc2 <__fp_splitA+0x1a>
    2ba6:	47 95       	ror	r20

00002ba8 <__fp_splitA>:
    2ba8:	88 0f       	add	r24, r24
    2baa:	97 fb       	bst	r25, 7
    2bac:	99 1f       	adc	r25, r25
    2bae:	61 f0       	breq	.+24     	; 0x2bc8 <__fp_splitA+0x20>
    2bb0:	9f 3f       	cpi	r25, 0xFF	; 255
    2bb2:	79 f0       	breq	.+30     	; 0x2bd2 <__fp_splitA+0x2a>
    2bb4:	87 95       	ror	r24
    2bb6:	08 95       	ret
    2bb8:	12 16       	cp	r1, r18
    2bba:	13 06       	cpc	r1, r19
    2bbc:	14 06       	cpc	r1, r20
    2bbe:	55 1f       	adc	r21, r21
    2bc0:	f2 cf       	rjmp	.-28     	; 0x2ba6 <__fp_split3+0xe>
    2bc2:	46 95       	lsr	r20
    2bc4:	f1 df       	rcall	.-30     	; 0x2ba8 <__fp_splitA>
    2bc6:	08 c0       	rjmp	.+16     	; 0x2bd8 <__fp_splitA+0x30>
    2bc8:	16 16       	cp	r1, r22
    2bca:	17 06       	cpc	r1, r23
    2bcc:	18 06       	cpc	r1, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	f1 cf       	rjmp	.-30     	; 0x2bb4 <__fp_splitA+0xc>
    2bd2:	86 95       	lsr	r24
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	61 05       	cpc	r22, r1
    2bd8:	08 94       	sec
    2bda:	08 95       	ret

00002bdc <__fp_zero>:
    2bdc:	e8 94       	clt

00002bde <__fp_szero>:
    2bde:	bb 27       	eor	r27, r27
    2be0:	66 27       	eor	r22, r22
    2be2:	77 27       	eor	r23, r23
    2be4:	cb 01       	movw	r24, r22
    2be6:	97 f9       	bld	r25, 7
    2be8:	08 95       	ret

00002bea <__mulsf3>:
    2bea:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__mulsf3x>
    2bee:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__fp_round>
    2bf2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__fp_pscA>
    2bf6:	38 f0       	brcs	.+14     	; 0x2c06 <__mulsf3+0x1c>
    2bf8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__fp_pscB>
    2bfc:	20 f0       	brcs	.+8      	; 0x2c06 <__mulsf3+0x1c>
    2bfe:	95 23       	and	r25, r21
    2c00:	11 f0       	breq	.+4      	; 0x2c06 <__mulsf3+0x1c>
    2c02:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    2c06:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__fp_nan>
    2c0a:	11 24       	eor	r1, r1
    2c0c:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>

00002c10 <__mulsf3x>:
    2c10:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fp_split3>
    2c14:	70 f3       	brcs	.-36     	; 0x2bf2 <__mulsf3+0x8>

00002c16 <__mulsf3_pse>:
    2c16:	95 9f       	mul	r25, r21
    2c18:	c1 f3       	breq	.-16     	; 0x2c0a <__mulsf3+0x20>
    2c1a:	95 0f       	add	r25, r21
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	55 1f       	adc	r21, r21
    2c20:	62 9f       	mul	r22, r18
    2c22:	f0 01       	movw	r30, r0
    2c24:	72 9f       	mul	r23, r18
    2c26:	bb 27       	eor	r27, r27
    2c28:	f0 0d       	add	r31, r0
    2c2a:	b1 1d       	adc	r27, r1
    2c2c:	63 9f       	mul	r22, r19
    2c2e:	aa 27       	eor	r26, r26
    2c30:	f0 0d       	add	r31, r0
    2c32:	b1 1d       	adc	r27, r1
    2c34:	aa 1f       	adc	r26, r26
    2c36:	64 9f       	mul	r22, r20
    2c38:	66 27       	eor	r22, r22
    2c3a:	b0 0d       	add	r27, r0
    2c3c:	a1 1d       	adc	r26, r1
    2c3e:	66 1f       	adc	r22, r22
    2c40:	82 9f       	mul	r24, r18
    2c42:	22 27       	eor	r18, r18
    2c44:	b0 0d       	add	r27, r0
    2c46:	a1 1d       	adc	r26, r1
    2c48:	62 1f       	adc	r22, r18
    2c4a:	73 9f       	mul	r23, r19
    2c4c:	b0 0d       	add	r27, r0
    2c4e:	a1 1d       	adc	r26, r1
    2c50:	62 1f       	adc	r22, r18
    2c52:	83 9f       	mul	r24, r19
    2c54:	a0 0d       	add	r26, r0
    2c56:	61 1d       	adc	r22, r1
    2c58:	22 1f       	adc	r18, r18
    2c5a:	74 9f       	mul	r23, r20
    2c5c:	33 27       	eor	r19, r19
    2c5e:	a0 0d       	add	r26, r0
    2c60:	61 1d       	adc	r22, r1
    2c62:	23 1f       	adc	r18, r19
    2c64:	84 9f       	mul	r24, r20
    2c66:	60 0d       	add	r22, r0
    2c68:	21 1d       	adc	r18, r1
    2c6a:	82 2f       	mov	r24, r18
    2c6c:	76 2f       	mov	r23, r22
    2c6e:	6a 2f       	mov	r22, r26
    2c70:	11 24       	eor	r1, r1
    2c72:	9f 57       	subi	r25, 0x7F	; 127
    2c74:	50 40       	sbci	r21, 0x00	; 0
    2c76:	9a f0       	brmi	.+38     	; 0x2c9e <__mulsf3_pse+0x88>
    2c78:	f1 f0       	breq	.+60     	; 0x2cb6 <__mulsf3_pse+0xa0>
    2c7a:	88 23       	and	r24, r24
    2c7c:	4a f0       	brmi	.+18     	; 0x2c90 <__mulsf3_pse+0x7a>
    2c7e:	ee 0f       	add	r30, r30
    2c80:	ff 1f       	adc	r31, r31
    2c82:	bb 1f       	adc	r27, r27
    2c84:	66 1f       	adc	r22, r22
    2c86:	77 1f       	adc	r23, r23
    2c88:	88 1f       	adc	r24, r24
    2c8a:	91 50       	subi	r25, 0x01	; 1
    2c8c:	50 40       	sbci	r21, 0x00	; 0
    2c8e:	a9 f7       	brne	.-22     	; 0x2c7a <__mulsf3_pse+0x64>
    2c90:	9e 3f       	cpi	r25, 0xFE	; 254
    2c92:	51 05       	cpc	r21, r1
    2c94:	80 f0       	brcs	.+32     	; 0x2cb6 <__mulsf3_pse+0xa0>
    2c96:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_inf>
    2c9a:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_szero>
    2c9e:	5f 3f       	cpi	r21, 0xFF	; 255
    2ca0:	e4 f3       	brlt	.-8      	; 0x2c9a <__mulsf3_pse+0x84>
    2ca2:	98 3e       	cpi	r25, 0xE8	; 232
    2ca4:	d4 f3       	brlt	.-12     	; 0x2c9a <__mulsf3_pse+0x84>
    2ca6:	86 95       	lsr	r24
    2ca8:	77 95       	ror	r23
    2caa:	67 95       	ror	r22
    2cac:	b7 95       	ror	r27
    2cae:	f7 95       	ror	r31
    2cb0:	e7 95       	ror	r30
    2cb2:	9f 5f       	subi	r25, 0xFF	; 255
    2cb4:	c1 f7       	brne	.-16     	; 0x2ca6 <__mulsf3_pse+0x90>
    2cb6:	fe 2b       	or	r31, r30
    2cb8:	88 0f       	add	r24, r24
    2cba:	91 1d       	adc	r25, r1
    2cbc:	96 95       	lsr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	97 f9       	bld	r25, 7
    2cc2:	08 95       	ret

00002cc4 <__mulsi3>:
    2cc4:	db 01       	movw	r26, r22
    2cc6:	8f 93       	push	r24
    2cc8:	9f 93       	push	r25
    2cca:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__muluhisi3>
    2cce:	bf 91       	pop	r27
    2cd0:	af 91       	pop	r26
    2cd2:	a2 9f       	mul	r26, r18
    2cd4:	80 0d       	add	r24, r0
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	a3 9f       	mul	r26, r19
    2cda:	90 0d       	add	r25, r0
    2cdc:	b2 9f       	mul	r27, r18
    2cde:	90 0d       	add	r25, r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	08 95       	ret

00002ce4 <__divmodhi4>:
    2ce4:	97 fb       	bst	r25, 7
    2ce6:	07 2e       	mov	r0, r23
    2ce8:	16 f4       	brtc	.+4      	; 0x2cee <__divmodhi4+0xa>
    2cea:	00 94       	com	r0
    2cec:	07 d0       	rcall	.+14     	; 0x2cfc <__divmodhi4_neg1>
    2cee:	77 fd       	sbrc	r23, 7
    2cf0:	09 d0       	rcall	.+18     	; 0x2d04 <__divmodhi4_neg2>
    2cf2:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodhi4>
    2cf6:	07 fc       	sbrc	r0, 7
    2cf8:	05 d0       	rcall	.+10     	; 0x2d04 <__divmodhi4_neg2>
    2cfa:	3e f4       	brtc	.+14     	; 0x2d0a <__divmodhi4_exit>

00002cfc <__divmodhi4_neg1>:
    2cfc:	90 95       	com	r25
    2cfe:	81 95       	neg	r24
    2d00:	9f 4f       	sbci	r25, 0xFF	; 255
    2d02:	08 95       	ret

00002d04 <__divmodhi4_neg2>:
    2d04:	70 95       	com	r23
    2d06:	61 95       	neg	r22
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255

00002d0a <__divmodhi4_exit>:
    2d0a:	08 95       	ret

00002d0c <__udivmodsi4>:
    2d0c:	a1 e2       	ldi	r26, 0x21	; 33
    2d0e:	1a 2e       	mov	r1, r26
    2d10:	aa 1b       	sub	r26, r26
    2d12:	bb 1b       	sub	r27, r27
    2d14:	fd 01       	movw	r30, r26
    2d16:	0d c0       	rjmp	.+26     	; 0x2d32 <__udivmodsi4_ep>

00002d18 <__udivmodsi4_loop>:
    2d18:	aa 1f       	adc	r26, r26
    2d1a:	bb 1f       	adc	r27, r27
    2d1c:	ee 1f       	adc	r30, r30
    2d1e:	ff 1f       	adc	r31, r31
    2d20:	a2 17       	cp	r26, r18
    2d22:	b3 07       	cpc	r27, r19
    2d24:	e4 07       	cpc	r30, r20
    2d26:	f5 07       	cpc	r31, r21
    2d28:	20 f0       	brcs	.+8      	; 0x2d32 <__udivmodsi4_ep>
    2d2a:	a2 1b       	sub	r26, r18
    2d2c:	b3 0b       	sbc	r27, r19
    2d2e:	e4 0b       	sbc	r30, r20
    2d30:	f5 0b       	sbc	r31, r21

00002d32 <__udivmodsi4_ep>:
    2d32:	66 1f       	adc	r22, r22
    2d34:	77 1f       	adc	r23, r23
    2d36:	88 1f       	adc	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	1a 94       	dec	r1
    2d3c:	69 f7       	brne	.-38     	; 0x2d18 <__udivmodsi4_loop>
    2d3e:	60 95       	com	r22
    2d40:	70 95       	com	r23
    2d42:	80 95       	com	r24
    2d44:	90 95       	com	r25
    2d46:	9b 01       	movw	r18, r22
    2d48:	ac 01       	movw	r20, r24
    2d4a:	bd 01       	movw	r22, r26
    2d4c:	cf 01       	movw	r24, r30
    2d4e:	08 95       	ret

00002d50 <__tablejump2__>:
    2d50:	ee 0f       	add	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	05 90       	lpm	r0, Z+
    2d56:	f4 91       	lpm	r31, Z
    2d58:	e0 2d       	mov	r30, r0
    2d5a:	09 94       	ijmp

00002d5c <__umulhisi3>:
    2d5c:	a2 9f       	mul	r26, r18
    2d5e:	b0 01       	movw	r22, r0
    2d60:	b3 9f       	mul	r27, r19
    2d62:	c0 01       	movw	r24, r0
    2d64:	a3 9f       	mul	r26, r19
    2d66:	70 0d       	add	r23, r0
    2d68:	81 1d       	adc	r24, r1
    2d6a:	11 24       	eor	r1, r1
    2d6c:	91 1d       	adc	r25, r1
    2d6e:	b2 9f       	mul	r27, r18
    2d70:	70 0d       	add	r23, r0
    2d72:	81 1d       	adc	r24, r1
    2d74:	11 24       	eor	r1, r1
    2d76:	91 1d       	adc	r25, r1
    2d78:	08 95       	ret

00002d7a <__muluhisi3>:
    2d7a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2d7e:	a5 9f       	mul	r26, r21
    2d80:	90 0d       	add	r25, r0
    2d82:	b4 9f       	mul	r27, r20
    2d84:	90 0d       	add	r25, r0
    2d86:	a4 9f       	mul	r26, r20
    2d88:	80 0d       	add	r24, r0
    2d8a:	91 1d       	adc	r25, r1
    2d8c:	11 24       	eor	r1, r1
    2d8e:	08 95       	ret

00002d90 <__mulshisi3>:
    2d90:	b7 ff       	sbrs	r27, 7
    2d92:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__muluhisi3>

00002d96 <__mulohisi3>:
    2d96:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__muluhisi3>
    2d9a:	82 1b       	sub	r24, r18
    2d9c:	93 0b       	sbc	r25, r19
    2d9e:	08 95       	ret

00002da0 <__muldi3>:
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	1f 93       	push	r17
    2da6:	0f 93       	push	r16
    2da8:	9a 9d       	mul	r25, r10
    2daa:	f0 2d       	mov	r31, r0
    2dac:	21 9f       	mul	r18, r17
    2dae:	f0 0d       	add	r31, r0
    2db0:	8b 9d       	mul	r24, r11
    2db2:	f0 0d       	add	r31, r0
    2db4:	8a 9d       	mul	r24, r10
    2db6:	e0 2d       	mov	r30, r0
    2db8:	f1 0d       	add	r31, r1
    2dba:	03 9f       	mul	r16, r19
    2dbc:	f0 0d       	add	r31, r0
    2dbe:	02 9f       	mul	r16, r18
    2dc0:	e0 0d       	add	r30, r0
    2dc2:	f1 1d       	adc	r31, r1
    2dc4:	4e 9d       	mul	r20, r14
    2dc6:	e0 0d       	add	r30, r0
    2dc8:	f1 1d       	adc	r31, r1
    2dca:	5e 9d       	mul	r21, r14
    2dcc:	f0 0d       	add	r31, r0
    2dce:	4f 9d       	mul	r20, r15
    2dd0:	f0 0d       	add	r31, r0
    2dd2:	7f 93       	push	r23
    2dd4:	6f 93       	push	r22
    2dd6:	bf 92       	push	r11
    2dd8:	af 92       	push	r10
    2dda:	5f 93       	push	r21
    2ddc:	4f 93       	push	r20
    2dde:	d5 01       	movw	r26, r10
    2de0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2de4:	8b 01       	movw	r16, r22
    2de6:	ac 01       	movw	r20, r24
    2de8:	d7 01       	movw	r26, r14
    2dea:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2dee:	eb 01       	movw	r28, r22
    2df0:	e8 0f       	add	r30, r24
    2df2:	f9 1f       	adc	r31, r25
    2df4:	d6 01       	movw	r26, r12
    2df6:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__muldi3_6>
    2dfa:	2f 91       	pop	r18
    2dfc:	3f 91       	pop	r19
    2dfe:	d6 01       	movw	r26, r12
    2e00:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2e04:	c6 0f       	add	r28, r22
    2e06:	d7 1f       	adc	r29, r23
    2e08:	e8 1f       	adc	r30, r24
    2e0a:	f9 1f       	adc	r31, r25
    2e0c:	af 91       	pop	r26
    2e0e:	bf 91       	pop	r27
    2e10:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__muldi3_6>
    2e14:	2f 91       	pop	r18
    2e16:	3f 91       	pop	r19
    2e18:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2e1c:	c6 0f       	add	r28, r22
    2e1e:	d7 1f       	adc	r29, r23
    2e20:	e8 1f       	adc	r30, r24
    2e22:	f9 1f       	adc	r31, r25
    2e24:	d6 01       	movw	r26, r12
    2e26:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2e2a:	e6 0f       	add	r30, r22
    2e2c:	f7 1f       	adc	r31, r23
    2e2e:	98 01       	movw	r18, r16
    2e30:	be 01       	movw	r22, r28
    2e32:	cf 01       	movw	r24, r30
    2e34:	11 24       	eor	r1, r1
    2e36:	0f 91       	pop	r16
    2e38:	1f 91       	pop	r17
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <__muldi3_6>:
    2e40:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__umulhisi3>
    2e44:	46 0f       	add	r20, r22
    2e46:	57 1f       	adc	r21, r23
    2e48:	c8 1f       	adc	r28, r24
    2e4a:	d9 1f       	adc	r29, r25
    2e4c:	08 f4       	brcc	.+2      	; 0x2e50 <__muldi3_6+0x10>
    2e4e:	31 96       	adiw	r30, 0x01	; 1
    2e50:	08 95       	ret

00002e52 <__moddi3>:
    2e52:	68 94       	set
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <__divdi3_moddi3>

00002e56 <__divdi3>:
    2e56:	e8 94       	clt

00002e58 <__divdi3_moddi3>:
    2e58:	f9 2f       	mov	r31, r25
    2e5a:	f1 2b       	or	r31, r17
    2e5c:	12 f0       	brmi	.+4      	; 0x2e62 <__divdi3_moddi3+0xa>
    2e5e:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__udivdi3_umoddi3>
    2e62:	a0 e0       	ldi	r26, 0x00	; 0
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e7 e3       	ldi	r30, 0x37	; 55
    2e68:	f7 e1       	ldi	r31, 0x17	; 23
    2e6a:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0xc>
    2e6e:	09 2e       	mov	r0, r25
    2e70:	05 94       	asr	r0
    2e72:	22 f4       	brpl	.+8      	; 0x2e7c <__divdi3_moddi3+0x24>
    2e74:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__negdi2>
    2e78:	11 23       	and	r17, r17
    2e7a:	92 f4       	brpl	.+36     	; 0x2ea0 <__divdi3_moddi3+0x48>
    2e7c:	f0 e8       	ldi	r31, 0x80	; 128
    2e7e:	0f 26       	eor	r0, r31
    2e80:	ff ef       	ldi	r31, 0xFF	; 255
    2e82:	e0 94       	com	r14
    2e84:	f0 94       	com	r15
    2e86:	00 95       	com	r16
    2e88:	10 95       	com	r17
    2e8a:	b0 94       	com	r11
    2e8c:	c0 94       	com	r12
    2e8e:	d0 94       	com	r13
    2e90:	a1 94       	neg	r10
    2e92:	bf 0a       	sbc	r11, r31
    2e94:	cf 0a       	sbc	r12, r31
    2e96:	df 0a       	sbc	r13, r31
    2e98:	ef 0a       	sbc	r14, r31
    2e9a:	ff 0a       	sbc	r15, r31
    2e9c:	0f 0b       	sbc	r16, r31
    2e9e:	1f 0b       	sbc	r17, r31
    2ea0:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__udivmod64>
    2ea4:	07 fc       	sbrc	r0, 7
    2ea6:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__negdi2>
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	ec e0       	ldi	r30, 0x0C	; 12
    2eb0:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0xc>

00002eb4 <__umoddi3>:
    2eb4:	68 94       	set
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <__udivdi3_umoddi3>

00002eb8 <__udivdi3>:
    2eb8:	e8 94       	clt

00002eba <__udivdi3_umoddi3>:
    2eba:	8f 92       	push	r8
    2ebc:	9f 92       	push	r9
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__udivmod64>
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	9f 90       	pop	r9
    2ecc:	8f 90       	pop	r8
    2ece:	08 95       	ret

00002ed0 <__udivmod64>:
    2ed0:	88 24       	eor	r8, r8
    2ed2:	99 24       	eor	r9, r9
    2ed4:	f4 01       	movw	r30, r8
    2ed6:	e4 01       	movw	r28, r8
    2ed8:	b0 e4       	ldi	r27, 0x40	; 64
    2eda:	9f 93       	push	r25
    2edc:	aa 27       	eor	r26, r26
    2ede:	9a 15       	cp	r25, r10
    2ee0:	8b 04       	cpc	r8, r11
    2ee2:	9c 04       	cpc	r9, r12
    2ee4:	ed 05       	cpc	r30, r13
    2ee6:	fe 05       	cpc	r31, r14
    2ee8:	cf 05       	cpc	r28, r15
    2eea:	d0 07       	cpc	r29, r16
    2eec:	a1 07       	cpc	r26, r17
    2eee:	98 f4       	brcc	.+38     	; 0x2f16 <__udivmod64+0x46>
    2ef0:	ad 2f       	mov	r26, r29
    2ef2:	dc 2f       	mov	r29, r28
    2ef4:	cf 2f       	mov	r28, r31
    2ef6:	fe 2f       	mov	r31, r30
    2ef8:	e9 2d       	mov	r30, r9
    2efa:	98 2c       	mov	r9, r8
    2efc:	89 2e       	mov	r8, r25
    2efe:	98 2f       	mov	r25, r24
    2f00:	87 2f       	mov	r24, r23
    2f02:	76 2f       	mov	r23, r22
    2f04:	65 2f       	mov	r22, r21
    2f06:	54 2f       	mov	r21, r20
    2f08:	43 2f       	mov	r20, r19
    2f0a:	32 2f       	mov	r19, r18
    2f0c:	22 27       	eor	r18, r18
    2f0e:	b8 50       	subi	r27, 0x08	; 8
    2f10:	31 f7       	brne	.-52     	; 0x2ede <__udivmod64+0xe>
    2f12:	bf 91       	pop	r27
    2f14:	27 c0       	rjmp	.+78     	; 0x2f64 <__udivmod64+0x94>
    2f16:	1b 2e       	mov	r1, r27
    2f18:	bf 91       	pop	r27
    2f1a:	bb 27       	eor	r27, r27
    2f1c:	22 0f       	add	r18, r18
    2f1e:	33 1f       	adc	r19, r19
    2f20:	44 1f       	adc	r20, r20
    2f22:	55 1f       	adc	r21, r21
    2f24:	66 1f       	adc	r22, r22
    2f26:	77 1f       	adc	r23, r23
    2f28:	88 1f       	adc	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	88 1c       	adc	r8, r8
    2f2e:	99 1c       	adc	r9, r9
    2f30:	ee 1f       	adc	r30, r30
    2f32:	ff 1f       	adc	r31, r31
    2f34:	cc 1f       	adc	r28, r28
    2f36:	dd 1f       	adc	r29, r29
    2f38:	aa 1f       	adc	r26, r26
    2f3a:	bb 1f       	adc	r27, r27
    2f3c:	8a 14       	cp	r8, r10
    2f3e:	9b 04       	cpc	r9, r11
    2f40:	ec 05       	cpc	r30, r12
    2f42:	fd 05       	cpc	r31, r13
    2f44:	ce 05       	cpc	r28, r14
    2f46:	df 05       	cpc	r29, r15
    2f48:	a0 07       	cpc	r26, r16
    2f4a:	b1 07       	cpc	r27, r17
    2f4c:	48 f0       	brcs	.+18     	; 0x2f60 <__udivmod64+0x90>
    2f4e:	8a 18       	sub	r8, r10
    2f50:	9b 08       	sbc	r9, r11
    2f52:	ec 09       	sbc	r30, r12
    2f54:	fd 09       	sbc	r31, r13
    2f56:	ce 09       	sbc	r28, r14
    2f58:	df 09       	sbc	r29, r15
    2f5a:	a0 0b       	sbc	r26, r16
    2f5c:	b1 0b       	sbc	r27, r17
    2f5e:	21 60       	ori	r18, 0x01	; 1
    2f60:	1a 94       	dec	r1
    2f62:	e1 f6       	brne	.-72     	; 0x2f1c <__udivmod64+0x4c>
    2f64:	2e f4       	brtc	.+10     	; 0x2f70 <__udivmod64+0xa0>
    2f66:	94 01       	movw	r18, r8
    2f68:	af 01       	movw	r20, r30
    2f6a:	be 01       	movw	r22, r28
    2f6c:	cd 01       	movw	r24, r26
    2f6e:	00 0c       	add	r0, r0
    2f70:	08 95       	ret

00002f72 <__negdi2>:
    2f72:	60 95       	com	r22
    2f74:	70 95       	com	r23
    2f76:	80 95       	com	r24
    2f78:	90 95       	com	r25
    2f7a:	30 95       	com	r19
    2f7c:	40 95       	com	r20
    2f7e:	50 95       	com	r21
    2f80:	21 95       	neg	r18
    2f82:	3f 4f       	sbci	r19, 0xFF	; 255
    2f84:	4f 4f       	sbci	r20, 0xFF	; 255
    2f86:	5f 4f       	sbci	r21, 0xFF	; 255
    2f88:	6f 4f       	sbci	r22, 0xFF	; 255
    2f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f90:	08 95       	ret

00002f92 <__prologue_saves__>:
    2f92:	2f 92       	push	r2
    2f94:	3f 92       	push	r3
    2f96:	4f 92       	push	r4
    2f98:	5f 92       	push	r5
    2f9a:	6f 92       	push	r6
    2f9c:	7f 92       	push	r7
    2f9e:	8f 92       	push	r8
    2fa0:	9f 92       	push	r9
    2fa2:	af 92       	push	r10
    2fa4:	bf 92       	push	r11
    2fa6:	cf 92       	push	r12
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	ca 1b       	sub	r28, r26
    2fbc:	db 0b       	sbc	r29, r27
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	09 94       	ijmp

00002fca <__epilogue_restores__>:
    2fca:	2a 88       	ldd	r2, Y+18	; 0x12
    2fcc:	39 88       	ldd	r3, Y+17	; 0x11
    2fce:	48 88       	ldd	r4, Y+16	; 0x10
    2fd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fda:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fdc:	b9 84       	ldd	r11, Y+9	; 0x09
    2fde:	c8 84       	ldd	r12, Y+8	; 0x08
    2fe0:	df 80       	ldd	r13, Y+7	; 0x07
    2fe2:	ee 80       	ldd	r14, Y+6	; 0x06
    2fe4:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe6:	0c 81       	ldd	r16, Y+4	; 0x04
    2fe8:	1b 81       	ldd	r17, Y+3	; 0x03
    2fea:	aa 81       	ldd	r26, Y+2	; 0x02
    2fec:	b9 81       	ldd	r27, Y+1	; 0x01
    2fee:	ce 0f       	add	r28, r30
    2ff0:	d1 1d       	adc	r29, r1
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	ed 01       	movw	r28, r26
    2ffe:	08 95       	ret

00003000 <__ashldi3>:
    3000:	0f 93       	push	r16
    3002:	08 30       	cpi	r16, 0x08	; 8
    3004:	90 f0       	brcs	.+36     	; 0x302a <__ashldi3+0x2a>
    3006:	98 2f       	mov	r25, r24
    3008:	87 2f       	mov	r24, r23
    300a:	76 2f       	mov	r23, r22
    300c:	65 2f       	mov	r22, r21
    300e:	54 2f       	mov	r21, r20
    3010:	43 2f       	mov	r20, r19
    3012:	32 2f       	mov	r19, r18
    3014:	22 27       	eor	r18, r18
    3016:	08 50       	subi	r16, 0x08	; 8
    3018:	f4 cf       	rjmp	.-24     	; 0x3002 <__ashldi3+0x2>
    301a:	22 0f       	add	r18, r18
    301c:	33 1f       	adc	r19, r19
    301e:	44 1f       	adc	r20, r20
    3020:	55 1f       	adc	r21, r21
    3022:	66 1f       	adc	r22, r22
    3024:	77 1f       	adc	r23, r23
    3026:	88 1f       	adc	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	0a 95       	dec	r16
    302c:	b2 f7       	brpl	.-20     	; 0x301a <__ashldi3+0x1a>
    302e:	0f 91       	pop	r16
    3030:	08 95       	ret

00003032 <__ashrdi3>:
    3032:	97 fb       	bst	r25, 7
    3034:	10 f8       	bld	r1, 0

00003036 <__lshrdi3>:
    3036:	16 94       	lsr	r1
    3038:	00 08       	sbc	r0, r0
    303a:	0f 93       	push	r16
    303c:	08 30       	cpi	r16, 0x08	; 8
    303e:	98 f0       	brcs	.+38     	; 0x3066 <__lshrdi3+0x30>
    3040:	08 50       	subi	r16, 0x08	; 8
    3042:	23 2f       	mov	r18, r19
    3044:	34 2f       	mov	r19, r20
    3046:	45 2f       	mov	r20, r21
    3048:	56 2f       	mov	r21, r22
    304a:	67 2f       	mov	r22, r23
    304c:	78 2f       	mov	r23, r24
    304e:	89 2f       	mov	r24, r25
    3050:	90 2d       	mov	r25, r0
    3052:	f4 cf       	rjmp	.-24     	; 0x303c <__lshrdi3+0x6>
    3054:	05 94       	asr	r0
    3056:	97 95       	ror	r25
    3058:	87 95       	ror	r24
    305a:	77 95       	ror	r23
    305c:	67 95       	ror	r22
    305e:	57 95       	ror	r21
    3060:	47 95       	ror	r20
    3062:	37 95       	ror	r19
    3064:	27 95       	ror	r18
    3066:	0a 95       	dec	r16
    3068:	aa f7       	brpl	.-22     	; 0x3054 <__lshrdi3+0x1e>
    306a:	0f 91       	pop	r16
    306c:	08 95       	ret

0000306e <__adddi3>:
    306e:	2a 0d       	add	r18, r10
    3070:	3b 1d       	adc	r19, r11
    3072:	4c 1d       	adc	r20, r12
    3074:	5d 1d       	adc	r21, r13
    3076:	6e 1d       	adc	r22, r14
    3078:	7f 1d       	adc	r23, r15
    307a:	80 1f       	adc	r24, r16
    307c:	91 1f       	adc	r25, r17
    307e:	08 95       	ret

00003080 <__subdi3>:
    3080:	2a 19       	sub	r18, r10
    3082:	3b 09       	sbc	r19, r11
    3084:	4c 09       	sbc	r20, r12
    3086:	5d 09       	sbc	r21, r13
    3088:	6e 09       	sbc	r22, r14
    308a:	7f 09       	sbc	r23, r15
    308c:	80 0b       	sbc	r24, r16
    308e:	91 0b       	sbc	r25, r17
    3090:	08 95       	ret

00003092 <__cmpdi2_s8>:
    3092:	00 24       	eor	r0, r0
    3094:	a7 fd       	sbrc	r26, 7
    3096:	00 94       	com	r0
    3098:	2a 17       	cp	r18, r26
    309a:	30 05       	cpc	r19, r0
    309c:	40 05       	cpc	r20, r0
    309e:	50 05       	cpc	r21, r0
    30a0:	60 05       	cpc	r22, r0
    30a2:	70 05       	cpc	r23, r0
    30a4:	80 05       	cpc	r24, r0
    30a6:	90 05       	cpc	r25, r0
    30a8:	08 95       	ret

000030aa <__udivmodhi4>:
    30aa:	aa 1b       	sub	r26, r26
    30ac:	bb 1b       	sub	r27, r27
    30ae:	51 e1       	ldi	r21, 0x11	; 17
    30b0:	07 c0       	rjmp	.+14     	; 0x30c0 <__udivmodhi4_ep>

000030b2 <__udivmodhi4_loop>:
    30b2:	aa 1f       	adc	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	a6 17       	cp	r26, r22
    30b8:	b7 07       	cpc	r27, r23
    30ba:	10 f0       	brcs	.+4      	; 0x30c0 <__udivmodhi4_ep>
    30bc:	a6 1b       	sub	r26, r22
    30be:	b7 0b       	sbc	r27, r23

000030c0 <__udivmodhi4_ep>:
    30c0:	88 1f       	adc	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	5a 95       	dec	r21
    30c6:	a9 f7       	brne	.-22     	; 0x30b2 <__udivmodhi4_loop>
    30c8:	80 95       	com	r24
    30ca:	90 95       	com	r25
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	08 95       	ret

000030d2 <memset>:
    30d2:	dc 01       	movw	r26, r24
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <memset+0x6>
    30d6:	6d 93       	st	X+, r22
    30d8:	41 50       	subi	r20, 0x01	; 1
    30da:	50 40       	sbci	r21, 0x00	; 0
    30dc:	e0 f7       	brcc	.-8      	; 0x30d6 <memset+0x4>
    30de:	08 95       	ret

000030e0 <sprintf>:
    30e0:	ae e0       	ldi	r26, 0x0E	; 14
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e6 e7       	ldi	r30, 0x76	; 118
    30e6:	f8 e1       	ldi	r31, 0x18	; 24
    30e8:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__prologue_saves__+0x1c>
    30ec:	0d 89       	ldd	r16, Y+21	; 0x15
    30ee:	1e 89       	ldd	r17, Y+22	; 0x16
    30f0:	86 e0       	ldi	r24, 0x06	; 6
    30f2:	8c 83       	std	Y+4, r24	; 0x04
    30f4:	1a 83       	std	Y+2, r17	; 0x02
    30f6:	09 83       	std	Y+1, r16	; 0x01
    30f8:	8f ef       	ldi	r24, 0xFF	; 255
    30fa:	9f e7       	ldi	r25, 0x7F	; 127
    30fc:	9e 83       	std	Y+6, r25	; 0x06
    30fe:	8d 83       	std	Y+5, r24	; 0x05
    3100:	ae 01       	movw	r20, r28
    3102:	47 5e       	subi	r20, 0xE7	; 231
    3104:	5f 4f       	sbci	r21, 0xFF	; 255
    3106:	6f 89       	ldd	r22, Y+23	; 0x17
    3108:	78 8d       	ldd	r23, Y+24	; 0x18
    310a:	ce 01       	movw	r24, r28
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	0e 94 92 18 	call	0x3124	; 0x3124 <vfprintf>
    3112:	ef 81       	ldd	r30, Y+7	; 0x07
    3114:	f8 85       	ldd	r31, Y+8	; 0x08
    3116:	e0 0f       	add	r30, r16
    3118:	f1 1f       	adc	r31, r17
    311a:	10 82       	st	Z, r1
    311c:	2e 96       	adiw	r28, 0x0e	; 14
    311e:	e4 e0       	ldi	r30, 0x04	; 4
    3120:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <__epilogue_restores__+0x1c>

00003124 <vfprintf>:
    3124:	ab e0       	ldi	r26, 0x0B	; 11
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e8 e9       	ldi	r30, 0x98	; 152
    312a:	f8 e1       	ldi	r31, 0x18	; 24
    312c:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__>
    3130:	6c 01       	movw	r12, r24
    3132:	7b 01       	movw	r14, r22
    3134:	8a 01       	movw	r16, r20
    3136:	fc 01       	movw	r30, r24
    3138:	17 82       	std	Z+7, r1	; 0x07
    313a:	16 82       	std	Z+6, r1	; 0x06
    313c:	83 81       	ldd	r24, Z+3	; 0x03
    313e:	81 ff       	sbrs	r24, 1
    3140:	cc c1       	rjmp	.+920    	; 0x34da <vfprintf+0x3b6>
    3142:	ce 01       	movw	r24, r28
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	3c 01       	movw	r6, r24
    3148:	f6 01       	movw	r30, r12
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	f7 01       	movw	r30, r14
    314e:	93 fd       	sbrc	r25, 3
    3150:	85 91       	lpm	r24, Z+
    3152:	93 ff       	sbrs	r25, 3
    3154:	81 91       	ld	r24, Z+
    3156:	7f 01       	movw	r14, r30
    3158:	88 23       	and	r24, r24
    315a:	09 f4       	brne	.+2      	; 0x315e <vfprintf+0x3a>
    315c:	ba c1       	rjmp	.+884    	; 0x34d2 <vfprintf+0x3ae>
    315e:	85 32       	cpi	r24, 0x25	; 37
    3160:	39 f4       	brne	.+14     	; 0x3170 <vfprintf+0x4c>
    3162:	93 fd       	sbrc	r25, 3
    3164:	85 91       	lpm	r24, Z+
    3166:	93 ff       	sbrs	r25, 3
    3168:	81 91       	ld	r24, Z+
    316a:	7f 01       	movw	r14, r30
    316c:	85 32       	cpi	r24, 0x25	; 37
    316e:	29 f4       	brne	.+10     	; 0x317a <vfprintf+0x56>
    3170:	b6 01       	movw	r22, r12
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    3178:	e7 cf       	rjmp	.-50     	; 0x3148 <vfprintf+0x24>
    317a:	91 2c       	mov	r9, r1
    317c:	21 2c       	mov	r2, r1
    317e:	31 2c       	mov	r3, r1
    3180:	ff e1       	ldi	r31, 0x1F	; 31
    3182:	f3 15       	cp	r31, r3
    3184:	d8 f0       	brcs	.+54     	; 0x31bc <vfprintf+0x98>
    3186:	8b 32       	cpi	r24, 0x2B	; 43
    3188:	79 f0       	breq	.+30     	; 0x31a8 <vfprintf+0x84>
    318a:	38 f4       	brcc	.+14     	; 0x319a <vfprintf+0x76>
    318c:	80 32       	cpi	r24, 0x20	; 32
    318e:	79 f0       	breq	.+30     	; 0x31ae <vfprintf+0x8a>
    3190:	83 32       	cpi	r24, 0x23	; 35
    3192:	a1 f4       	brne	.+40     	; 0x31bc <vfprintf+0x98>
    3194:	23 2d       	mov	r18, r3
    3196:	20 61       	ori	r18, 0x10	; 16
    3198:	1d c0       	rjmp	.+58     	; 0x31d4 <vfprintf+0xb0>
    319a:	8d 32       	cpi	r24, 0x2D	; 45
    319c:	61 f0       	breq	.+24     	; 0x31b6 <vfprintf+0x92>
    319e:	80 33       	cpi	r24, 0x30	; 48
    31a0:	69 f4       	brne	.+26     	; 0x31bc <vfprintf+0x98>
    31a2:	23 2d       	mov	r18, r3
    31a4:	21 60       	ori	r18, 0x01	; 1
    31a6:	16 c0       	rjmp	.+44     	; 0x31d4 <vfprintf+0xb0>
    31a8:	83 2d       	mov	r24, r3
    31aa:	82 60       	ori	r24, 0x02	; 2
    31ac:	38 2e       	mov	r3, r24
    31ae:	e3 2d       	mov	r30, r3
    31b0:	e4 60       	ori	r30, 0x04	; 4
    31b2:	3e 2e       	mov	r3, r30
    31b4:	2a c0       	rjmp	.+84     	; 0x320a <vfprintf+0xe6>
    31b6:	f3 2d       	mov	r31, r3
    31b8:	f8 60       	ori	r31, 0x08	; 8
    31ba:	1d c0       	rjmp	.+58     	; 0x31f6 <vfprintf+0xd2>
    31bc:	37 fc       	sbrc	r3, 7
    31be:	2d c0       	rjmp	.+90     	; 0x321a <vfprintf+0xf6>
    31c0:	20 ed       	ldi	r18, 0xD0	; 208
    31c2:	28 0f       	add	r18, r24
    31c4:	2a 30       	cpi	r18, 0x0A	; 10
    31c6:	40 f0       	brcs	.+16     	; 0x31d8 <vfprintf+0xb4>
    31c8:	8e 32       	cpi	r24, 0x2E	; 46
    31ca:	b9 f4       	brne	.+46     	; 0x31fa <vfprintf+0xd6>
    31cc:	36 fc       	sbrc	r3, 6
    31ce:	81 c1       	rjmp	.+770    	; 0x34d2 <vfprintf+0x3ae>
    31d0:	23 2d       	mov	r18, r3
    31d2:	20 64       	ori	r18, 0x40	; 64
    31d4:	32 2e       	mov	r3, r18
    31d6:	19 c0       	rjmp	.+50     	; 0x320a <vfprintf+0xe6>
    31d8:	36 fe       	sbrs	r3, 6
    31da:	06 c0       	rjmp	.+12     	; 0x31e8 <vfprintf+0xc4>
    31dc:	8a e0       	ldi	r24, 0x0A	; 10
    31de:	98 9e       	mul	r9, r24
    31e0:	20 0d       	add	r18, r0
    31e2:	11 24       	eor	r1, r1
    31e4:	92 2e       	mov	r9, r18
    31e6:	11 c0       	rjmp	.+34     	; 0x320a <vfprintf+0xe6>
    31e8:	ea e0       	ldi	r30, 0x0A	; 10
    31ea:	2e 9e       	mul	r2, r30
    31ec:	20 0d       	add	r18, r0
    31ee:	11 24       	eor	r1, r1
    31f0:	22 2e       	mov	r2, r18
    31f2:	f3 2d       	mov	r31, r3
    31f4:	f0 62       	ori	r31, 0x20	; 32
    31f6:	3f 2e       	mov	r3, r31
    31f8:	08 c0       	rjmp	.+16     	; 0x320a <vfprintf+0xe6>
    31fa:	8c 36       	cpi	r24, 0x6C	; 108
    31fc:	21 f4       	brne	.+8      	; 0x3206 <vfprintf+0xe2>
    31fe:	83 2d       	mov	r24, r3
    3200:	80 68       	ori	r24, 0x80	; 128
    3202:	38 2e       	mov	r3, r24
    3204:	02 c0       	rjmp	.+4      	; 0x320a <vfprintf+0xe6>
    3206:	88 36       	cpi	r24, 0x68	; 104
    3208:	41 f4       	brne	.+16     	; 0x321a <vfprintf+0xf6>
    320a:	f7 01       	movw	r30, r14
    320c:	93 fd       	sbrc	r25, 3
    320e:	85 91       	lpm	r24, Z+
    3210:	93 ff       	sbrs	r25, 3
    3212:	81 91       	ld	r24, Z+
    3214:	7f 01       	movw	r14, r30
    3216:	81 11       	cpse	r24, r1
    3218:	b3 cf       	rjmp	.-154    	; 0x3180 <vfprintf+0x5c>
    321a:	98 2f       	mov	r25, r24
    321c:	9f 7d       	andi	r25, 0xDF	; 223
    321e:	95 54       	subi	r25, 0x45	; 69
    3220:	93 30       	cpi	r25, 0x03	; 3
    3222:	28 f4       	brcc	.+10     	; 0x322e <vfprintf+0x10a>
    3224:	0c 5f       	subi	r16, 0xFC	; 252
    3226:	1f 4f       	sbci	r17, 0xFF	; 255
    3228:	9f e3       	ldi	r25, 0x3F	; 63
    322a:	99 83       	std	Y+1, r25	; 0x01
    322c:	0d c0       	rjmp	.+26     	; 0x3248 <vfprintf+0x124>
    322e:	83 36       	cpi	r24, 0x63	; 99
    3230:	31 f0       	breq	.+12     	; 0x323e <vfprintf+0x11a>
    3232:	83 37       	cpi	r24, 0x73	; 115
    3234:	71 f0       	breq	.+28     	; 0x3252 <vfprintf+0x12e>
    3236:	83 35       	cpi	r24, 0x53	; 83
    3238:	09 f0       	breq	.+2      	; 0x323c <vfprintf+0x118>
    323a:	59 c0       	rjmp	.+178    	; 0x32ee <vfprintf+0x1ca>
    323c:	21 c0       	rjmp	.+66     	; 0x3280 <vfprintf+0x15c>
    323e:	f8 01       	movw	r30, r16
    3240:	80 81       	ld	r24, Z
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	0e 5f       	subi	r16, 0xFE	; 254
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	88 24       	eor	r8, r8
    324a:	83 94       	inc	r8
    324c:	91 2c       	mov	r9, r1
    324e:	53 01       	movw	r10, r6
    3250:	13 c0       	rjmp	.+38     	; 0x3278 <vfprintf+0x154>
    3252:	28 01       	movw	r4, r16
    3254:	f2 e0       	ldi	r31, 0x02	; 2
    3256:	4f 0e       	add	r4, r31
    3258:	51 1c       	adc	r5, r1
    325a:	f8 01       	movw	r30, r16
    325c:	a0 80       	ld	r10, Z
    325e:	b1 80       	ldd	r11, Z+1	; 0x01
    3260:	36 fe       	sbrs	r3, 6
    3262:	03 c0       	rjmp	.+6      	; 0x326a <vfprintf+0x146>
    3264:	69 2d       	mov	r22, r9
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	02 c0       	rjmp	.+4      	; 0x326e <vfprintf+0x14a>
    326a:	6f ef       	ldi	r22, 0xFF	; 255
    326c:	7f ef       	ldi	r23, 0xFF	; 255
    326e:	c5 01       	movw	r24, r10
    3270:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <strnlen>
    3274:	4c 01       	movw	r8, r24
    3276:	82 01       	movw	r16, r4
    3278:	f3 2d       	mov	r31, r3
    327a:	ff 77       	andi	r31, 0x7F	; 127
    327c:	3f 2e       	mov	r3, r31
    327e:	16 c0       	rjmp	.+44     	; 0x32ac <vfprintf+0x188>
    3280:	28 01       	movw	r4, r16
    3282:	22 e0       	ldi	r18, 0x02	; 2
    3284:	42 0e       	add	r4, r18
    3286:	51 1c       	adc	r5, r1
    3288:	f8 01       	movw	r30, r16
    328a:	a0 80       	ld	r10, Z
    328c:	b1 80       	ldd	r11, Z+1	; 0x01
    328e:	36 fe       	sbrs	r3, 6
    3290:	03 c0       	rjmp	.+6      	; 0x3298 <vfprintf+0x174>
    3292:	69 2d       	mov	r22, r9
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	02 c0       	rjmp	.+4      	; 0x329c <vfprintf+0x178>
    3298:	6f ef       	ldi	r22, 0xFF	; 255
    329a:	7f ef       	ldi	r23, 0xFF	; 255
    329c:	c5 01       	movw	r24, r10
    329e:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <strnlen_P>
    32a2:	4c 01       	movw	r8, r24
    32a4:	f3 2d       	mov	r31, r3
    32a6:	f0 68       	ori	r31, 0x80	; 128
    32a8:	3f 2e       	mov	r3, r31
    32aa:	82 01       	movw	r16, r4
    32ac:	33 fc       	sbrc	r3, 3
    32ae:	1b c0       	rjmp	.+54     	; 0x32e6 <vfprintf+0x1c2>
    32b0:	82 2d       	mov	r24, r2
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	88 16       	cp	r8, r24
    32b6:	99 06       	cpc	r9, r25
    32b8:	b0 f4       	brcc	.+44     	; 0x32e6 <vfprintf+0x1c2>
    32ba:	b6 01       	movw	r22, r12
    32bc:	80 e2       	ldi	r24, 0x20	; 32
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    32c4:	2a 94       	dec	r2
    32c6:	f4 cf       	rjmp	.-24     	; 0x32b0 <vfprintf+0x18c>
    32c8:	f5 01       	movw	r30, r10
    32ca:	37 fc       	sbrc	r3, 7
    32cc:	85 91       	lpm	r24, Z+
    32ce:	37 fe       	sbrs	r3, 7
    32d0:	81 91       	ld	r24, Z+
    32d2:	5f 01       	movw	r10, r30
    32d4:	b6 01       	movw	r22, r12
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    32dc:	21 10       	cpse	r2, r1
    32de:	2a 94       	dec	r2
    32e0:	21 e0       	ldi	r18, 0x01	; 1
    32e2:	82 1a       	sub	r8, r18
    32e4:	91 08       	sbc	r9, r1
    32e6:	81 14       	cp	r8, r1
    32e8:	91 04       	cpc	r9, r1
    32ea:	71 f7       	brne	.-36     	; 0x32c8 <vfprintf+0x1a4>
    32ec:	e8 c0       	rjmp	.+464    	; 0x34be <vfprintf+0x39a>
    32ee:	84 36       	cpi	r24, 0x64	; 100
    32f0:	11 f0       	breq	.+4      	; 0x32f6 <vfprintf+0x1d2>
    32f2:	89 36       	cpi	r24, 0x69	; 105
    32f4:	41 f5       	brne	.+80     	; 0x3346 <vfprintf+0x222>
    32f6:	f8 01       	movw	r30, r16
    32f8:	37 fe       	sbrs	r3, 7
    32fa:	07 c0       	rjmp	.+14     	; 0x330a <vfprintf+0x1e6>
    32fc:	60 81       	ld	r22, Z
    32fe:	71 81       	ldd	r23, Z+1	; 0x01
    3300:	82 81       	ldd	r24, Z+2	; 0x02
    3302:	93 81       	ldd	r25, Z+3	; 0x03
    3304:	0c 5f       	subi	r16, 0xFC	; 252
    3306:	1f 4f       	sbci	r17, 0xFF	; 255
    3308:	08 c0       	rjmp	.+16     	; 0x331a <vfprintf+0x1f6>
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	07 2e       	mov	r0, r23
    3310:	00 0c       	add	r0, r0
    3312:	88 0b       	sbc	r24, r24
    3314:	99 0b       	sbc	r25, r25
    3316:	0e 5f       	subi	r16, 0xFE	; 254
    3318:	1f 4f       	sbci	r17, 0xFF	; 255
    331a:	f3 2d       	mov	r31, r3
    331c:	ff 76       	andi	r31, 0x6F	; 111
    331e:	3f 2e       	mov	r3, r31
    3320:	97 ff       	sbrs	r25, 7
    3322:	09 c0       	rjmp	.+18     	; 0x3336 <vfprintf+0x212>
    3324:	90 95       	com	r25
    3326:	80 95       	com	r24
    3328:	70 95       	com	r23
    332a:	61 95       	neg	r22
    332c:	7f 4f       	sbci	r23, 0xFF	; 255
    332e:	8f 4f       	sbci	r24, 0xFF	; 255
    3330:	9f 4f       	sbci	r25, 0xFF	; 255
    3332:	f0 68       	ori	r31, 0x80	; 128
    3334:	3f 2e       	mov	r3, r31
    3336:	2a e0       	ldi	r18, 0x0A	; 10
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	a3 01       	movw	r20, r6
    333c:	0e 94 c5 1a 	call	0x358a	; 0x358a <__ultoa_invert>
    3340:	88 2e       	mov	r8, r24
    3342:	86 18       	sub	r8, r6
    3344:	45 c0       	rjmp	.+138    	; 0x33d0 <vfprintf+0x2ac>
    3346:	85 37       	cpi	r24, 0x75	; 117
    3348:	31 f4       	brne	.+12     	; 0x3356 <vfprintf+0x232>
    334a:	23 2d       	mov	r18, r3
    334c:	2f 7e       	andi	r18, 0xEF	; 239
    334e:	b2 2e       	mov	r11, r18
    3350:	2a e0       	ldi	r18, 0x0A	; 10
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	25 c0       	rjmp	.+74     	; 0x33a0 <vfprintf+0x27c>
    3356:	93 2d       	mov	r25, r3
    3358:	99 7f       	andi	r25, 0xF9	; 249
    335a:	b9 2e       	mov	r11, r25
    335c:	8f 36       	cpi	r24, 0x6F	; 111
    335e:	c1 f0       	breq	.+48     	; 0x3390 <vfprintf+0x26c>
    3360:	18 f4       	brcc	.+6      	; 0x3368 <vfprintf+0x244>
    3362:	88 35       	cpi	r24, 0x58	; 88
    3364:	79 f0       	breq	.+30     	; 0x3384 <vfprintf+0x260>
    3366:	b5 c0       	rjmp	.+362    	; 0x34d2 <vfprintf+0x3ae>
    3368:	80 37       	cpi	r24, 0x70	; 112
    336a:	19 f0       	breq	.+6      	; 0x3372 <vfprintf+0x24e>
    336c:	88 37       	cpi	r24, 0x78	; 120
    336e:	21 f0       	breq	.+8      	; 0x3378 <vfprintf+0x254>
    3370:	b0 c0       	rjmp	.+352    	; 0x34d2 <vfprintf+0x3ae>
    3372:	e9 2f       	mov	r30, r25
    3374:	e0 61       	ori	r30, 0x10	; 16
    3376:	be 2e       	mov	r11, r30
    3378:	b4 fe       	sbrs	r11, 4
    337a:	0d c0       	rjmp	.+26     	; 0x3396 <vfprintf+0x272>
    337c:	fb 2d       	mov	r31, r11
    337e:	f4 60       	ori	r31, 0x04	; 4
    3380:	bf 2e       	mov	r11, r31
    3382:	09 c0       	rjmp	.+18     	; 0x3396 <vfprintf+0x272>
    3384:	34 fe       	sbrs	r3, 4
    3386:	0a c0       	rjmp	.+20     	; 0x339c <vfprintf+0x278>
    3388:	29 2f       	mov	r18, r25
    338a:	26 60       	ori	r18, 0x06	; 6
    338c:	b2 2e       	mov	r11, r18
    338e:	06 c0       	rjmp	.+12     	; 0x339c <vfprintf+0x278>
    3390:	28 e0       	ldi	r18, 0x08	; 8
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	05 c0       	rjmp	.+10     	; 0x33a0 <vfprintf+0x27c>
    3396:	20 e1       	ldi	r18, 0x10	; 16
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <vfprintf+0x27c>
    339c:	20 e1       	ldi	r18, 0x10	; 16
    339e:	32 e0       	ldi	r19, 0x02	; 2
    33a0:	f8 01       	movw	r30, r16
    33a2:	b7 fe       	sbrs	r11, 7
    33a4:	07 c0       	rjmp	.+14     	; 0x33b4 <vfprintf+0x290>
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	0c 5f       	subi	r16, 0xFC	; 252
    33b0:	1f 4f       	sbci	r17, 0xFF	; 255
    33b2:	06 c0       	rjmp	.+12     	; 0x33c0 <vfprintf+0x29c>
    33b4:	60 81       	ld	r22, Z
    33b6:	71 81       	ldd	r23, Z+1	; 0x01
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0e 5f       	subi	r16, 0xFE	; 254
    33be:	1f 4f       	sbci	r17, 0xFF	; 255
    33c0:	a3 01       	movw	r20, r6
    33c2:	0e 94 c5 1a 	call	0x358a	; 0x358a <__ultoa_invert>
    33c6:	88 2e       	mov	r8, r24
    33c8:	86 18       	sub	r8, r6
    33ca:	fb 2d       	mov	r31, r11
    33cc:	ff 77       	andi	r31, 0x7F	; 127
    33ce:	3f 2e       	mov	r3, r31
    33d0:	36 fe       	sbrs	r3, 6
    33d2:	0d c0       	rjmp	.+26     	; 0x33ee <vfprintf+0x2ca>
    33d4:	23 2d       	mov	r18, r3
    33d6:	2e 7f       	andi	r18, 0xFE	; 254
    33d8:	a2 2e       	mov	r10, r18
    33da:	89 14       	cp	r8, r9
    33dc:	58 f4       	brcc	.+22     	; 0x33f4 <vfprintf+0x2d0>
    33de:	34 fe       	sbrs	r3, 4
    33e0:	0b c0       	rjmp	.+22     	; 0x33f8 <vfprintf+0x2d4>
    33e2:	32 fc       	sbrc	r3, 2
    33e4:	09 c0       	rjmp	.+18     	; 0x33f8 <vfprintf+0x2d4>
    33e6:	83 2d       	mov	r24, r3
    33e8:	8e 7e       	andi	r24, 0xEE	; 238
    33ea:	a8 2e       	mov	r10, r24
    33ec:	05 c0       	rjmp	.+10     	; 0x33f8 <vfprintf+0x2d4>
    33ee:	b8 2c       	mov	r11, r8
    33f0:	a3 2c       	mov	r10, r3
    33f2:	03 c0       	rjmp	.+6      	; 0x33fa <vfprintf+0x2d6>
    33f4:	b8 2c       	mov	r11, r8
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <vfprintf+0x2d6>
    33f8:	b9 2c       	mov	r11, r9
    33fa:	a4 fe       	sbrs	r10, 4
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <vfprintf+0x2f8>
    33fe:	fe 01       	movw	r30, r28
    3400:	e8 0d       	add	r30, r8
    3402:	f1 1d       	adc	r31, r1
    3404:	80 81       	ld	r24, Z
    3406:	80 33       	cpi	r24, 0x30	; 48
    3408:	21 f4       	brne	.+8      	; 0x3412 <vfprintf+0x2ee>
    340a:	9a 2d       	mov	r25, r10
    340c:	99 7e       	andi	r25, 0xE9	; 233
    340e:	a9 2e       	mov	r10, r25
    3410:	09 c0       	rjmp	.+18     	; 0x3424 <vfprintf+0x300>
    3412:	a2 fe       	sbrs	r10, 2
    3414:	06 c0       	rjmp	.+12     	; 0x3422 <vfprintf+0x2fe>
    3416:	b3 94       	inc	r11
    3418:	b3 94       	inc	r11
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <vfprintf+0x300>
    341c:	8a 2d       	mov	r24, r10
    341e:	86 78       	andi	r24, 0x86	; 134
    3420:	09 f0       	breq	.+2      	; 0x3424 <vfprintf+0x300>
    3422:	b3 94       	inc	r11
    3424:	a3 fc       	sbrc	r10, 3
    3426:	11 c0       	rjmp	.+34     	; 0x344a <vfprintf+0x326>
    3428:	a0 fe       	sbrs	r10, 0
    342a:	06 c0       	rjmp	.+12     	; 0x3438 <vfprintf+0x314>
    342c:	b2 14       	cp	r11, r2
    342e:	88 f4       	brcc	.+34     	; 0x3452 <vfprintf+0x32e>
    3430:	28 0c       	add	r2, r8
    3432:	92 2c       	mov	r9, r2
    3434:	9b 18       	sub	r9, r11
    3436:	0e c0       	rjmp	.+28     	; 0x3454 <vfprintf+0x330>
    3438:	b2 14       	cp	r11, r2
    343a:	60 f4       	brcc	.+24     	; 0x3454 <vfprintf+0x330>
    343c:	b6 01       	movw	r22, r12
    343e:	80 e2       	ldi	r24, 0x20	; 32
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    3446:	b3 94       	inc	r11
    3448:	f7 cf       	rjmp	.-18     	; 0x3438 <vfprintf+0x314>
    344a:	b2 14       	cp	r11, r2
    344c:	18 f4       	brcc	.+6      	; 0x3454 <vfprintf+0x330>
    344e:	2b 18       	sub	r2, r11
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <vfprintf+0x332>
    3452:	98 2c       	mov	r9, r8
    3454:	21 2c       	mov	r2, r1
    3456:	a4 fe       	sbrs	r10, 4
    3458:	10 c0       	rjmp	.+32     	; 0x347a <vfprintf+0x356>
    345a:	b6 01       	movw	r22, r12
    345c:	80 e3       	ldi	r24, 0x30	; 48
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    3464:	a2 fe       	sbrs	r10, 2
    3466:	17 c0       	rjmp	.+46     	; 0x3496 <vfprintf+0x372>
    3468:	a1 fc       	sbrc	r10, 1
    346a:	03 c0       	rjmp	.+6      	; 0x3472 <vfprintf+0x34e>
    346c:	88 e7       	ldi	r24, 0x78	; 120
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <vfprintf+0x352>
    3472:	88 e5       	ldi	r24, 0x58	; 88
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	b6 01       	movw	r22, r12
    3478:	0c c0       	rjmp	.+24     	; 0x3492 <vfprintf+0x36e>
    347a:	8a 2d       	mov	r24, r10
    347c:	86 78       	andi	r24, 0x86	; 134
    347e:	59 f0       	breq	.+22     	; 0x3496 <vfprintf+0x372>
    3480:	a1 fe       	sbrs	r10, 1
    3482:	02 c0       	rjmp	.+4      	; 0x3488 <vfprintf+0x364>
    3484:	8b e2       	ldi	r24, 0x2B	; 43
    3486:	01 c0       	rjmp	.+2      	; 0x348a <vfprintf+0x366>
    3488:	80 e2       	ldi	r24, 0x20	; 32
    348a:	a7 fc       	sbrc	r10, 7
    348c:	8d e2       	ldi	r24, 0x2D	; 45
    348e:	b6 01       	movw	r22, r12
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    3496:	89 14       	cp	r8, r9
    3498:	38 f4       	brcc	.+14     	; 0x34a8 <vfprintf+0x384>
    349a:	b6 01       	movw	r22, r12
    349c:	80 e3       	ldi	r24, 0x30	; 48
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    34a4:	9a 94       	dec	r9
    34a6:	f7 cf       	rjmp	.-18     	; 0x3496 <vfprintf+0x372>
    34a8:	8a 94       	dec	r8
    34aa:	f3 01       	movw	r30, r6
    34ac:	e8 0d       	add	r30, r8
    34ae:	f1 1d       	adc	r31, r1
    34b0:	80 81       	ld	r24, Z
    34b2:	b6 01       	movw	r22, r12
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    34ba:	81 10       	cpse	r8, r1
    34bc:	f5 cf       	rjmp	.-22     	; 0x34a8 <vfprintf+0x384>
    34be:	22 20       	and	r2, r2
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <vfprintf+0x3a0>
    34c2:	42 ce       	rjmp	.-892    	; 0x3148 <vfprintf+0x24>
    34c4:	b6 01       	movw	r22, r12
    34c6:	80 e2       	ldi	r24, 0x20	; 32
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 89 1a 	call	0x3512	; 0x3512 <fputc>
    34ce:	2a 94       	dec	r2
    34d0:	f6 cf       	rjmp	.-20     	; 0x34be <vfprintf+0x39a>
    34d2:	f6 01       	movw	r30, r12
    34d4:	86 81       	ldd	r24, Z+6	; 0x06
    34d6:	97 81       	ldd	r25, Z+7	; 0x07
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <vfprintf+0x3ba>
    34da:	8f ef       	ldi	r24, 0xFF	; 255
    34dc:	9f ef       	ldi	r25, 0xFF	; 255
    34de:	2b 96       	adiw	r28, 0x0b	; 11
    34e0:	e2 e1       	ldi	r30, 0x12	; 18
    34e2:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__>

000034e6 <strnlen_P>:
    34e6:	fc 01       	movw	r30, r24
    34e8:	05 90       	lpm	r0, Z+
    34ea:	61 50       	subi	r22, 0x01	; 1
    34ec:	70 40       	sbci	r23, 0x00	; 0
    34ee:	01 10       	cpse	r0, r1
    34f0:	d8 f7       	brcc	.-10     	; 0x34e8 <strnlen_P+0x2>
    34f2:	80 95       	com	r24
    34f4:	90 95       	com	r25
    34f6:	8e 0f       	add	r24, r30
    34f8:	9f 1f       	adc	r25, r31
    34fa:	08 95       	ret

000034fc <strnlen>:
    34fc:	fc 01       	movw	r30, r24
    34fe:	61 50       	subi	r22, 0x01	; 1
    3500:	70 40       	sbci	r23, 0x00	; 0
    3502:	01 90       	ld	r0, Z+
    3504:	01 10       	cpse	r0, r1
    3506:	d8 f7       	brcc	.-10     	; 0x34fe <strnlen+0x2>
    3508:	80 95       	com	r24
    350a:	90 95       	com	r25
    350c:	8e 0f       	add	r24, r30
    350e:	9f 1f       	adc	r25, r31
    3510:	08 95       	ret

00003512 <fputc>:
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	fb 01       	movw	r30, r22
    351c:	23 81       	ldd	r18, Z+3	; 0x03
    351e:	21 fd       	sbrc	r18, 1
    3520:	03 c0       	rjmp	.+6      	; 0x3528 <fputc+0x16>
    3522:	8f ef       	ldi	r24, 0xFF	; 255
    3524:	9f ef       	ldi	r25, 0xFF	; 255
    3526:	2c c0       	rjmp	.+88     	; 0x3580 <fputc+0x6e>
    3528:	22 ff       	sbrs	r18, 2
    352a:	16 c0       	rjmp	.+44     	; 0x3558 <fputc+0x46>
    352c:	46 81       	ldd	r20, Z+6	; 0x06
    352e:	57 81       	ldd	r21, Z+7	; 0x07
    3530:	24 81       	ldd	r18, Z+4	; 0x04
    3532:	35 81       	ldd	r19, Z+5	; 0x05
    3534:	42 17       	cp	r20, r18
    3536:	53 07       	cpc	r21, r19
    3538:	44 f4       	brge	.+16     	; 0x354a <fputc+0x38>
    353a:	a0 81       	ld	r26, Z
    353c:	b1 81       	ldd	r27, Z+1	; 0x01
    353e:	9d 01       	movw	r18, r26
    3540:	2f 5f       	subi	r18, 0xFF	; 255
    3542:	3f 4f       	sbci	r19, 0xFF	; 255
    3544:	31 83       	std	Z+1, r19	; 0x01
    3546:	20 83       	st	Z, r18
    3548:	8c 93       	st	X, r24
    354a:	26 81       	ldd	r18, Z+6	; 0x06
    354c:	37 81       	ldd	r19, Z+7	; 0x07
    354e:	2f 5f       	subi	r18, 0xFF	; 255
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	37 83       	std	Z+7, r19	; 0x07
    3554:	26 83       	std	Z+6, r18	; 0x06
    3556:	14 c0       	rjmp	.+40     	; 0x3580 <fputc+0x6e>
    3558:	8b 01       	movw	r16, r22
    355a:	ec 01       	movw	r28, r24
    355c:	fb 01       	movw	r30, r22
    355e:	00 84       	ldd	r0, Z+8	; 0x08
    3560:	f1 85       	ldd	r31, Z+9	; 0x09
    3562:	e0 2d       	mov	r30, r0
    3564:	09 95       	icall
    3566:	89 2b       	or	r24, r25
    3568:	e1 f6       	brne	.-72     	; 0x3522 <fputc+0x10>
    356a:	d8 01       	movw	r26, r16
    356c:	16 96       	adiw	r26, 0x06	; 6
    356e:	8d 91       	ld	r24, X+
    3570:	9c 91       	ld	r25, X
    3572:	17 97       	sbiw	r26, 0x07	; 7
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	17 96       	adiw	r26, 0x07	; 7
    3578:	9c 93       	st	X, r25
    357a:	8e 93       	st	-X, r24
    357c:	16 97       	sbiw	r26, 0x06	; 6
    357e:	ce 01       	movw	r24, r28
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	1f 91       	pop	r17
    3586:	0f 91       	pop	r16
    3588:	08 95       	ret

0000358a <__ultoa_invert>:
    358a:	fa 01       	movw	r30, r20
    358c:	aa 27       	eor	r26, r26
    358e:	28 30       	cpi	r18, 0x08	; 8
    3590:	51 f1       	breq	.+84     	; 0x35e6 <__ultoa_invert+0x5c>
    3592:	20 31       	cpi	r18, 0x10	; 16
    3594:	81 f1       	breq	.+96     	; 0x35f6 <__ultoa_invert+0x6c>
    3596:	e8 94       	clt
    3598:	6f 93       	push	r22
    359a:	6e 7f       	andi	r22, 0xFE	; 254
    359c:	6e 5f       	subi	r22, 0xFE	; 254
    359e:	7f 4f       	sbci	r23, 0xFF	; 255
    35a0:	8f 4f       	sbci	r24, 0xFF	; 255
    35a2:	9f 4f       	sbci	r25, 0xFF	; 255
    35a4:	af 4f       	sbci	r26, 0xFF	; 255
    35a6:	b1 e0       	ldi	r27, 0x01	; 1
    35a8:	3e d0       	rcall	.+124    	; 0x3626 <__ultoa_invert+0x9c>
    35aa:	b4 e0       	ldi	r27, 0x04	; 4
    35ac:	3c d0       	rcall	.+120    	; 0x3626 <__ultoa_invert+0x9c>
    35ae:	67 0f       	add	r22, r23
    35b0:	78 1f       	adc	r23, r24
    35b2:	89 1f       	adc	r24, r25
    35b4:	9a 1f       	adc	r25, r26
    35b6:	a1 1d       	adc	r26, r1
    35b8:	68 0f       	add	r22, r24
    35ba:	79 1f       	adc	r23, r25
    35bc:	8a 1f       	adc	r24, r26
    35be:	91 1d       	adc	r25, r1
    35c0:	a1 1d       	adc	r26, r1
    35c2:	6a 0f       	add	r22, r26
    35c4:	71 1d       	adc	r23, r1
    35c6:	81 1d       	adc	r24, r1
    35c8:	91 1d       	adc	r25, r1
    35ca:	a1 1d       	adc	r26, r1
    35cc:	20 d0       	rcall	.+64     	; 0x360e <__ultoa_invert+0x84>
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <__ultoa_invert+0x48>
    35d0:	68 94       	set
    35d2:	3f 91       	pop	r19
    35d4:	2a e0       	ldi	r18, 0x0A	; 10
    35d6:	26 9f       	mul	r18, r22
    35d8:	11 24       	eor	r1, r1
    35da:	30 19       	sub	r19, r0
    35dc:	30 5d       	subi	r19, 0xD0	; 208
    35de:	31 93       	st	Z+, r19
    35e0:	de f6       	brtc	.-74     	; 0x3598 <__ultoa_invert+0xe>
    35e2:	cf 01       	movw	r24, r30
    35e4:	08 95       	ret
    35e6:	46 2f       	mov	r20, r22
    35e8:	47 70       	andi	r20, 0x07	; 7
    35ea:	40 5d       	subi	r20, 0xD0	; 208
    35ec:	41 93       	st	Z+, r20
    35ee:	b3 e0       	ldi	r27, 0x03	; 3
    35f0:	0f d0       	rcall	.+30     	; 0x3610 <__ultoa_invert+0x86>
    35f2:	c9 f7       	brne	.-14     	; 0x35e6 <__ultoa_invert+0x5c>
    35f4:	f6 cf       	rjmp	.-20     	; 0x35e2 <__ultoa_invert+0x58>
    35f6:	46 2f       	mov	r20, r22
    35f8:	4f 70       	andi	r20, 0x0F	; 15
    35fa:	40 5d       	subi	r20, 0xD0	; 208
    35fc:	4a 33       	cpi	r20, 0x3A	; 58
    35fe:	18 f0       	brcs	.+6      	; 0x3606 <__ultoa_invert+0x7c>
    3600:	49 5d       	subi	r20, 0xD9	; 217
    3602:	31 fd       	sbrc	r19, 1
    3604:	40 52       	subi	r20, 0x20	; 32
    3606:	41 93       	st	Z+, r20
    3608:	02 d0       	rcall	.+4      	; 0x360e <__ultoa_invert+0x84>
    360a:	a9 f7       	brne	.-22     	; 0x35f6 <__ultoa_invert+0x6c>
    360c:	ea cf       	rjmp	.-44     	; 0x35e2 <__ultoa_invert+0x58>
    360e:	b4 e0       	ldi	r27, 0x04	; 4
    3610:	a6 95       	lsr	r26
    3612:	97 95       	ror	r25
    3614:	87 95       	ror	r24
    3616:	77 95       	ror	r23
    3618:	67 95       	ror	r22
    361a:	ba 95       	dec	r27
    361c:	c9 f7       	brne	.-14     	; 0x3610 <__ultoa_invert+0x86>
    361e:	00 97       	sbiw	r24, 0x00	; 0
    3620:	61 05       	cpc	r22, r1
    3622:	71 05       	cpc	r23, r1
    3624:	08 95       	ret
    3626:	9b 01       	movw	r18, r22
    3628:	ac 01       	movw	r20, r24
    362a:	0a 2e       	mov	r0, r26
    362c:	06 94       	lsr	r0
    362e:	57 95       	ror	r21
    3630:	47 95       	ror	r20
    3632:	37 95       	ror	r19
    3634:	27 95       	ror	r18
    3636:	ba 95       	dec	r27
    3638:	c9 f7       	brne	.-14     	; 0x362c <__ultoa_invert+0xa2>
    363a:	62 0f       	add	r22, r18
    363c:	73 1f       	adc	r23, r19
    363e:	84 1f       	adc	r24, r20
    3640:	95 1f       	adc	r25, r21
    3642:	a0 1d       	adc	r26, r0
    3644:	08 95       	ret

00003646 <_exit>:
    3646:	f8 94       	cli

00003648 <__stop_program>:
    3648:	ff cf       	rjmp	.-2      	; 0x3648 <__stop_program>
